
demos/test_m4/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 55 4b 00 00 99 4b 00 00 99 4b 00 00     .P. UK...K...K..
      10:	99 4b 00 00 99 4b 00 00 99 4b 00 00 00 00 00 00     .K...K...K......
	...
      2c:	99 4b 00 00 99 4b 00 00 00 00 00 00 99 4b 00 00     .K...K.......K..
      3c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      4c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      5c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      6c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      7c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      8c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      9c:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      ac:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      bc:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      cc:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
      dc:	99 4b 00 00 99 4b 00 00 99 4b 00 00 99 4b 00 00     .K...K...K...K..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	4603      	mov	r3, r0
     31c:	6039      	str	r1, [r7, #0]
     31e:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     320:	2300      	movs	r3, #0
     322:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     324:	683a      	ldr	r2, [r7, #0]
     326:	79f9      	ldrb	r1, [r7, #7]
     328:	e8c2 1f43 	strexb	r3, r1, [r2]
     32c:	60fb      	str	r3, [r7, #12]
   return(result);
     32e:	68fb      	ldr	r3, [r7, #12]
}
     330:	4618      	mov	r0, r3
     332:	3714      	adds	r7, #20
     334:	46bd      	mov	sp, r7
     336:	f85d 7b04 	ldr.w	r7, [sp], #4
     33a:	4770      	bx	lr

0000033c <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     33c:	b480      	push	{r7}
     33e:	b085      	sub	sp, #20
     340:	af00      	add	r7, sp, #0
     342:	4603      	mov	r3, r0
     344:	6039      	str	r1, [r7, #0]
     346:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     348:	2300      	movs	r3, #0
     34a:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     34c:	683a      	ldr	r2, [r7, #0]
     34e:	88f9      	ldrh	r1, [r7, #6]
     350:	e8c2 1f53 	strexh	r3, r1, [r2]
     354:	60fb      	str	r3, [r7, #12]
   return(result);
     356:	68fb      	ldr	r3, [r7, #12]
}
     358:	4618      	mov	r0, r3
     35a:	3714      	adds	r7, #20
     35c:	46bd      	mov	sp, r7
     35e:	f85d 7b04 	ldr.w	r7, [sp], #4
     362:	4770      	bx	lr

00000364 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     364:	b480      	push	{r7}
     366:	b085      	sub	sp, #20
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
     36c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     36e:	2300      	movs	r3, #0
     370:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     372:	683b      	ldr	r3, [r7, #0]
     374:	687a      	ldr	r2, [r7, #4]
     376:	e843 2300 	strex	r3, r2, [r3]
     37a:	60fb      	str	r3, [r7, #12]
   return(result);
     37c:	68fb      	ldr	r3, [r7, #12]
}
     37e:	4618      	mov	r0, r3
     380:	3714      	adds	r7, #20
     382:	46bd      	mov	sp, r7
     384:	f85d 7b04 	ldr.w	r7, [sp], #4
     388:	4770      	bx	lr
     38a:	bf00      	nop

0000038c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     38c:	b580      	push	{r7, lr}
     38e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     390:	4b15      	ldr	r3, [pc, #84]	; (3e8 <SystemInit+0x5c>)
     392:	4a15      	ldr	r2, [pc, #84]	; (3e8 <SystemInit+0x5c>)
     394:	6812      	ldr	r2, [r2, #0]
     396:	f042 0201 	orr.w	r2, r2, #1
     39a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     39c:	4a12      	ldr	r2, [pc, #72]	; (3e8 <SystemInit+0x5c>)
     39e:	4b12      	ldr	r3, [pc, #72]	; (3e8 <SystemInit+0x5c>)
     3a0:	6859      	ldr	r1, [r3, #4]
     3a2:	4b12      	ldr	r3, [pc, #72]	; (3ec <SystemInit+0x60>)
     3a4:	400b      	ands	r3, r1
     3a6:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3a8:	4a0f      	ldr	r2, [pc, #60]	; (3e8 <SystemInit+0x5c>)
     3aa:	4b0f      	ldr	r3, [pc, #60]	; (3e8 <SystemInit+0x5c>)
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
     3b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     3b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3b8:	4b0b      	ldr	r3, [pc, #44]	; (3e8 <SystemInit+0x5c>)
     3ba:	4a0b      	ldr	r2, [pc, #44]	; (3e8 <SystemInit+0x5c>)
     3bc:	6812      	ldr	r2, [r2, #0]
     3be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <SystemInit+0x5c>)
     3c6:	4a08      	ldr	r2, [pc, #32]	; (3e8 <SystemInit+0x5c>)
     3c8:	6852      	ldr	r2, [r2, #4]
     3ca:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3ce:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3d0:	4b05      	ldr	r3, [pc, #20]	; (3e8 <SystemInit+0x5c>)
     3d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3d6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3d8:	f000 f878 	bl	4cc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3dc:	4b04      	ldr	r3, [pc, #16]	; (3f0 <SystemInit+0x64>)
     3de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3e2:	609a      	str	r2, [r3, #8]
#endif 
}
     3e4:	bd80      	pop	{r7, pc}
     3e6:	bf00      	nop
     3e8:	40021000 	.word	0x40021000
     3ec:	f8ff0000 	.word	0xf8ff0000
     3f0:	e000ed00 	.word	0xe000ed00

000003f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3f4:	b480      	push	{r7}
     3f6:	b085      	sub	sp, #20
     3f8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3fa:	2300      	movs	r3, #0
     3fc:	60fb      	str	r3, [r7, #12]
     3fe:	2300      	movs	r3, #0
     400:	60bb      	str	r3, [r7, #8]
     402:	2300      	movs	r3, #0
     404:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     406:	4b2c      	ldr	r3, [pc, #176]	; (4b8 <SystemCoreClockUpdate+0xc4>)
     408:	685b      	ldr	r3, [r3, #4]
     40a:	f003 030c 	and.w	r3, r3, #12
     40e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     410:	68fb      	ldr	r3, [r7, #12]
     412:	2b04      	cmp	r3, #4
     414:	d007      	beq.n	426 <SystemCoreClockUpdate+0x32>
     416:	2b08      	cmp	r3, #8
     418:	d009      	beq.n	42e <SystemCoreClockUpdate+0x3a>
     41a:	2b00      	cmp	r3, #0
     41c:	d134      	bne.n	488 <SystemCoreClockUpdate+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     41e:	4b27      	ldr	r3, [pc, #156]	; (4bc <SystemCoreClockUpdate+0xc8>)
     420:	4a27      	ldr	r2, [pc, #156]	; (4c0 <SystemCoreClockUpdate+0xcc>)
     422:	601a      	str	r2, [r3, #0]
      break;
     424:	e034      	b.n	490 <SystemCoreClockUpdate+0x9c>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     426:	4b25      	ldr	r3, [pc, #148]	; (4bc <SystemCoreClockUpdate+0xc8>)
     428:	4a25      	ldr	r2, [pc, #148]	; (4c0 <SystemCoreClockUpdate+0xcc>)
     42a:	601a      	str	r2, [r3, #0]
      break;
     42c:	e030      	b.n	490 <SystemCoreClockUpdate+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     42e:	4b22      	ldr	r3, [pc, #136]	; (4b8 <SystemCoreClockUpdate+0xc4>)
     430:	685b      	ldr	r3, [r3, #4]
     432:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     436:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     438:	4b1f      	ldr	r3, [pc, #124]	; (4b8 <SystemCoreClockUpdate+0xc4>)
     43a:	685b      	ldr	r3, [r3, #4]
     43c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     440:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     442:	68bb      	ldr	r3, [r7, #8]
     444:	0c9b      	lsrs	r3, r3, #18
     446:	3302      	adds	r3, #2
     448:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	2b00      	cmp	r3, #0
     44e:	d106      	bne.n	45e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     450:	68bb      	ldr	r3, [r7, #8]
     452:	4a1c      	ldr	r2, [pc, #112]	; (4c4 <SystemCoreClockUpdate+0xd0>)
     454:	fb02 f203 	mul.w	r2, r2, r3
     458:	4b18      	ldr	r3, [pc, #96]	; (4bc <SystemCoreClockUpdate+0xc8>)
     45a:	601a      	str	r2, [r3, #0]
     45c:	e013      	b.n	486 <SystemCoreClockUpdate+0x92>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     45e:	4b16      	ldr	r3, [pc, #88]	; (4b8 <SystemCoreClockUpdate+0xc4>)
     460:	685b      	ldr	r3, [r3, #4]
     462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     466:	2b00      	cmp	r3, #0
     468:	d006      	beq.n	478 <SystemCoreClockUpdate+0x84>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	4a15      	ldr	r2, [pc, #84]	; (4c4 <SystemCoreClockUpdate+0xd0>)
     46e:	fb02 f203 	mul.w	r2, r2, r3
     472:	4b12      	ldr	r3, [pc, #72]	; (4bc <SystemCoreClockUpdate+0xc8>)
     474:	601a      	str	r2, [r3, #0]
     476:	e006      	b.n	486 <SystemCoreClockUpdate+0x92>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     478:	68bb      	ldr	r3, [r7, #8]
     47a:	4a11      	ldr	r2, [pc, #68]	; (4c0 <SystemCoreClockUpdate+0xcc>)
     47c:	fb02 f203 	mul.w	r2, r2, r3
     480:	4b0e      	ldr	r3, [pc, #56]	; (4bc <SystemCoreClockUpdate+0xc8>)
     482:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     484:	e004      	b.n	490 <SystemCoreClockUpdate+0x9c>
     486:	e003      	b.n	490 <SystemCoreClockUpdate+0x9c>

    default:
      SystemCoreClock = HSI_VALUE;
     488:	4b0c      	ldr	r3, [pc, #48]	; (4bc <SystemCoreClockUpdate+0xc8>)
     48a:	4a0d      	ldr	r2, [pc, #52]	; (4c0 <SystemCoreClockUpdate+0xcc>)
     48c:	601a      	str	r2, [r3, #0]
      break;
     48e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     490:	4b09      	ldr	r3, [pc, #36]	; (4b8 <SystemCoreClockUpdate+0xc4>)
     492:	685b      	ldr	r3, [r3, #4]
     494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     498:	091b      	lsrs	r3, r3, #4
     49a:	4a0b      	ldr	r2, [pc, #44]	; (4c8 <SystemCoreClockUpdate+0xd4>)
     49c:	5cd3      	ldrb	r3, [r2, r3]
     49e:	b2db      	uxtb	r3, r3
     4a0:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <SystemCoreClockUpdate+0xc8>)
     4a4:	681a      	ldr	r2, [r3, #0]
     4a6:	68fb      	ldr	r3, [r7, #12]
     4a8:	40da      	lsrs	r2, r3
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <SystemCoreClockUpdate+0xc8>)
     4ac:	601a      	str	r2, [r3, #0]
}
     4ae:	3714      	adds	r7, #20
     4b0:	46bd      	mov	sp, r7
     4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b6:	4770      	bx	lr
     4b8:	40021000 	.word	0x40021000
     4bc:	20000000 	.word	0x20000000
     4c0:	007a1200 	.word	0x007a1200
     4c4:	003d0900 	.word	0x003d0900
     4c8:	20000004 	.word	0x20000004

000004cc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     4cc:	b580      	push	{r7, lr}
     4ce:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     4d0:	f000 f802 	bl	4d8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     4d4:	bd80      	pop	{r7, pc}
     4d6:	bf00      	nop

000004d8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     4d8:	b480      	push	{r7}
     4da:	b083      	sub	sp, #12
     4dc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     4de:	2300      	movs	r3, #0
     4e0:	607b      	str	r3, [r7, #4]
     4e2:	2300      	movs	r3, #0
     4e4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     4e6:	4b3a      	ldr	r3, [pc, #232]	; (5d0 <SetSysClockTo72+0xf8>)
     4e8:	4a39      	ldr	r2, [pc, #228]	; (5d0 <SetSysClockTo72+0xf8>)
     4ea:	6812      	ldr	r2, [r2, #0]
     4ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     4f0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     4f2:	4b37      	ldr	r3, [pc, #220]	; (5d0 <SetSysClockTo72+0xf8>)
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	3301      	adds	r3, #1
     500:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     502:	683b      	ldr	r3, [r7, #0]
     504:	2b00      	cmp	r3, #0
     506:	d103      	bne.n	510 <SetSysClockTo72+0x38>
     508:	687b      	ldr	r3, [r7, #4]
     50a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     50e:	d1f0      	bne.n	4f2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     510:	4b2f      	ldr	r3, [pc, #188]	; (5d0 <SetSysClockTo72+0xf8>)
     512:	681b      	ldr	r3, [r3, #0]
     514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     518:	2b00      	cmp	r3, #0
     51a:	d002      	beq.n	522 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
     51c:	2301      	movs	r3, #1
     51e:	603b      	str	r3, [r7, #0]
     520:	e001      	b.n	526 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     522:	2300      	movs	r3, #0
     524:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     526:	683b      	ldr	r3, [r7, #0]
     528:	2b01      	cmp	r3, #1
     52a:	d14b      	bne.n	5c4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     52c:	4b29      	ldr	r3, [pc, #164]	; (5d4 <SetSysClockTo72+0xfc>)
     52e:	4a29      	ldr	r2, [pc, #164]	; (5d4 <SetSysClockTo72+0xfc>)
     530:	6812      	ldr	r2, [r2, #0]
     532:	f042 0210 	orr.w	r2, r2, #16
     536:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     538:	4b26      	ldr	r3, [pc, #152]	; (5d4 <SetSysClockTo72+0xfc>)
     53a:	4a26      	ldr	r2, [pc, #152]	; (5d4 <SetSysClockTo72+0xfc>)
     53c:	6812      	ldr	r2, [r2, #0]
     53e:	f022 0203 	bic.w	r2, r2, #3
     542:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     544:	4b23      	ldr	r3, [pc, #140]	; (5d4 <SetSysClockTo72+0xfc>)
     546:	4a23      	ldr	r2, [pc, #140]	; (5d4 <SetSysClockTo72+0xfc>)
     548:	6812      	ldr	r2, [r2, #0]
     54a:	f042 0202 	orr.w	r2, r2, #2
     54e:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     550:	4b1f      	ldr	r3, [pc, #124]	; (5d0 <SetSysClockTo72+0xf8>)
     552:	4a1f      	ldr	r2, [pc, #124]	; (5d0 <SetSysClockTo72+0xf8>)
     554:	6852      	ldr	r2, [r2, #4]
     556:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     558:	4b1d      	ldr	r3, [pc, #116]	; (5d0 <SetSysClockTo72+0xf8>)
     55a:	4a1d      	ldr	r2, [pc, #116]	; (5d0 <SetSysClockTo72+0xf8>)
     55c:	6852      	ldr	r2, [r2, #4]
     55e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     560:	4b1b      	ldr	r3, [pc, #108]	; (5d0 <SetSysClockTo72+0xf8>)
     562:	4a1b      	ldr	r2, [pc, #108]	; (5d0 <SetSysClockTo72+0xf8>)
     564:	6852      	ldr	r2, [r2, #4]
     566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     56a:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     56c:	4b18      	ldr	r3, [pc, #96]	; (5d0 <SetSysClockTo72+0xf8>)
     56e:	4a18      	ldr	r2, [pc, #96]	; (5d0 <SetSysClockTo72+0xf8>)
     570:	6852      	ldr	r2, [r2, #4]
     572:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     576:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     578:	4b15      	ldr	r3, [pc, #84]	; (5d0 <SetSysClockTo72+0xf8>)
     57a:	4a15      	ldr	r2, [pc, #84]	; (5d0 <SetSysClockTo72+0xf8>)
     57c:	6852      	ldr	r2, [r2, #4]
     57e:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     582:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     584:	4b12      	ldr	r3, [pc, #72]	; (5d0 <SetSysClockTo72+0xf8>)
     586:	4a12      	ldr	r2, [pc, #72]	; (5d0 <SetSysClockTo72+0xf8>)
     588:	6812      	ldr	r2, [r2, #0]
     58a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     58e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     590:	bf00      	nop
     592:	4b0f      	ldr	r3, [pc, #60]	; (5d0 <SetSysClockTo72+0xf8>)
     594:	681b      	ldr	r3, [r3, #0]
     596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     59a:	2b00      	cmp	r3, #0
     59c:	d0f9      	beq.n	592 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     59e:	4b0c      	ldr	r3, [pc, #48]	; (5d0 <SetSysClockTo72+0xf8>)
     5a0:	4a0b      	ldr	r2, [pc, #44]	; (5d0 <SetSysClockTo72+0xf8>)
     5a2:	6852      	ldr	r2, [r2, #4]
     5a4:	f022 0203 	bic.w	r2, r2, #3
     5a8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     5aa:	4b09      	ldr	r3, [pc, #36]	; (5d0 <SetSysClockTo72+0xf8>)
     5ac:	4a08      	ldr	r2, [pc, #32]	; (5d0 <SetSysClockTo72+0xf8>)
     5ae:	6852      	ldr	r2, [r2, #4]
     5b0:	f042 0202 	orr.w	r2, r2, #2
     5b4:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     5b6:	bf00      	nop
     5b8:	4b05      	ldr	r3, [pc, #20]	; (5d0 <SetSysClockTo72+0xf8>)
     5ba:	685b      	ldr	r3, [r3, #4]
     5bc:	f003 030c 	and.w	r3, r3, #12
     5c0:	2b08      	cmp	r3, #8
     5c2:	d1f9      	bne.n	5b8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     5c4:	370c      	adds	r7, #12
     5c6:	46bd      	mov	sp, r7
     5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	40021000 	.word	0x40021000
     5d4:	40022000 	.word	0x40022000
     5d8:	00004b9a 	.word	0x00004b9a
     5dc:	20000000 	.word	0x20000000
     5e0:	20000028 	.word	0x20000028
     5e4:	20000028 	.word	0x20000028
     5e8:	20000028 	.word	0x20000028

000005ec <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b082      	sub	sp, #8
     5f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     5f2:	2010      	movs	r0, #16
     5f4:	2101      	movs	r1, #1
     5f6:	f000 fc27 	bl	e48 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
     5fa:	480a      	ldr	r0, [pc, #40]	; (624 <init_led+0x38>)
     5fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     600:	2201      	movs	r2, #1
     602:	f000 fef7 	bl	13f4 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     60c:	2310      	movs	r3, #16
     60e:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     610:	2303      	movs	r3, #3
     612:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     614:	1d3b      	adds	r3, r7, #4
     616:	4803      	ldr	r0, [pc, #12]	; (624 <init_led+0x38>)
     618:	4619      	mov	r1, r3
     61a:	f000 fdaf 	bl	117c <GPIO_Init>
}
     61e:	3708      	adds	r7, #8
     620:	46bd      	mov	sp, r7
     622:	bd80      	pop	{r7, pc}
     624:	40011000 	.word	0x40011000

00000628 <init_button>:

void init_button(void)
{
     628:	b580      	push	{r7, lr}
     62a:	b082      	sub	sp, #8
     62c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     62e:	2004      	movs	r0, #4
     630:	2101      	movs	r1, #1
     632:	f000 fc09 	bl	e48 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     636:	2301      	movs	r3, #1
     638:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     63a:	2304      	movs	r3, #4
     63c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     63e:	2303      	movs	r3, #3
     640:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     642:	1d3b      	adds	r3, r7, #4
     644:	4803      	ldr	r0, [pc, #12]	; (654 <init_button+0x2c>)
     646:	4619      	mov	r1, r3
     648:	f000 fd98 	bl	117c <GPIO_Init>
}
     64c:	3708      	adds	r7, #8
     64e:	46bd      	mov	sp, r7
     650:	bd80      	pop	{r7, pc}
     652:	bf00      	nop
     654:	40011000 	.word	0x40011000

00000658 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
     658:	b580      	push	{r7, lr}
     65a:	b084      	sub	sp, #16
     65c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     65e:	2001      	movs	r0, #1
     660:	2101      	movs	r1, #1
     662:	f000 fbf1 	bl	e48 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     666:	2000      	movs	r0, #0
     668:	2100      	movs	r1, #0
     66a:	f000 ffaf 	bl	15cc <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     66e:	2301      	movs	r3, #1
     670:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     672:	2300      	movs	r3, #0
     674:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     676:	2308      	movs	r3, #8
     678:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     67a:	2301      	movs	r3, #1
     67c:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     67e:	f107 0308 	add.w	r3, r7, #8
     682:	4618      	mov	r0, r3
     684:	f001 fc86 	bl	1f94 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     688:	2306      	movs	r3, #6
     68a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     68c:	230f      	movs	r3, #15
     68e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     690:	230f      	movs	r3, #15
     692:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     694:	2301      	movs	r3, #1
     696:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     698:	1d3b      	adds	r3, r7, #4
     69a:	4618      	mov	r0, r3
     69c:	f004 f95c 	bl	4958 <NVIC_Init>
}
     6a0:	3710      	adds	r7, #16
     6a2:	46bd      	mov	sp, r7
     6a4:	bd80      	pop	{r7, pc}
     6a6:	bf00      	nop

000006a8 <init_rs232>:

void init_rs232(void)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b086      	sub	sp, #24
     6ac:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
     6ae:	2005      	movs	r0, #5
     6b0:	2101      	movs	r1, #1
     6b2:	f000 fbc9 	bl	e48 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
     6b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     6ba:	2101      	movs	r1, #1
     6bc:	f000 fbe2 	bl	e84 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
     6c0:	2308      	movs	r3, #8
     6c2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     6c4:	2304      	movs	r3, #4
     6c6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6c8:	1d3b      	adds	r3, r7, #4
     6ca:	4814      	ldr	r0, [pc, #80]	; (71c <init_rs232+0x74>)
     6cc:	4619      	mov	r1, r3
     6ce:	f000 fd55 	bl	117c <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     6d2:	2304      	movs	r3, #4
     6d4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6d6:	2303      	movs	r3, #3
     6d8:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     6da:	2318      	movs	r3, #24
     6dc:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6de:	1d3b      	adds	r3, r7, #4
     6e0:	480e      	ldr	r0, [pc, #56]	; (71c <init_rs232+0x74>)
     6e2:	4619      	mov	r1, r3
     6e4:	f000 fd4a 	bl	117c <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
     6e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     6ec:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     6ee:	2300      	movs	r3, #0
     6f0:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     6f2:	2300      	movs	r3, #0
     6f4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     6f6:	2300      	movs	r3, #0
     6f8:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     6fa:	2300      	movs	r3, #0
     6fc:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     6fe:	230c      	movs	r3, #12
     700:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
     702:	f107 0308 	add.w	r3, r7, #8
     706:	4806      	ldr	r0, [pc, #24]	; (720 <init_rs232+0x78>)
     708:	4619      	mov	r1, r3
     70a:	f001 f807 	bl	171c <USART_Init>
    USART_Cmd(USART2, ENABLE);
     70e:	4804      	ldr	r0, [pc, #16]	; (720 <init_rs232+0x78>)
     710:	2101      	movs	r1, #1
     712:	f001 f919 	bl	1948 <USART_Cmd>
}
     716:	3718      	adds	r7, #24
     718:	46bd      	mov	sp, r7
     71a:	bd80      	pop	{r7, pc}
     71c:	40010800 	.word	0x40010800
     720:	40004400 	.word	0x40004400

00000724 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     724:	b580      	push	{r7, lr}
     726:	b082      	sub	sp, #8
     728:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     72a:	480c      	ldr	r0, [pc, #48]	; (75c <enable_rs232_interrupts+0x38>)
     72c:	f240 7127 	movw	r1, #1831	; 0x727
     730:	2200      	movs	r2, #0
     732:	f001 f929 	bl	1988 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
     736:	4809      	ldr	r0, [pc, #36]	; (75c <enable_rs232_interrupts+0x38>)
     738:	f240 5125 	movw	r1, #1317	; 0x525
     73c:	2201      	movs	r2, #1
     73e:	f001 f923 	bl	1988 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
     742:	2326      	movs	r3, #38	; 0x26
     744:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     746:	2300      	movs	r3, #0
     748:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     74a:	2301      	movs	r3, #1
     74c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     74e:	1d3b      	adds	r3, r7, #4
     750:	4618      	mov	r0, r3
     752:	f004 f901 	bl	4958 <NVIC_Init>
}
     756:	3708      	adds	r7, #8
     758:	46bd      	mov	sp, r7
     75a:	bd80      	pop	{r7, pc}
     75c:	40004400 	.word	0x40004400

00000760 <enable_rs232>:

void enable_rs232(void)
{
     760:	b580      	push	{r7, lr}
     762:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
     764:	4802      	ldr	r0, [pc, #8]	; (770 <enable_rs232+0x10>)
     766:	2101      	movs	r1, #1
     768:	f001 f8ee 	bl	1948 <USART_Cmd>
}
     76c:	bd80      	pop	{r7, pc}
     76e:	bf00      	nop
     770:	40004400 	.word	0x40004400

00000774 <rs232_print_str>:

void rs232_print_str(const char *str)
{
     774:	b580      	push	{r7, lr}
     776:	b084      	sub	sp, #16
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     780:	e010      	b.n	7a4 <rs232_print_str+0x30>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     782:	bf00      	nop
     784:	480b      	ldr	r0, [pc, #44]	; (7b4 <rs232_print_str+0x40>)
     786:	2180      	movs	r1, #128	; 0x80
     788:	f001 fb4a 	bl	1e20 <USART_GetFlagStatus>
     78c:	4603      	mov	r3, r0
     78e:	2b00      	cmp	r3, #0
     790:	d0f8      	beq.n	784 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
     792:	68fb      	ldr	r3, [r7, #12]
     794:	781b      	ldrb	r3, [r3, #0]
     796:	4807      	ldr	r0, [pc, #28]	; (7b4 <rs232_print_str+0x40>)
     798:	4619      	mov	r1, r3
     79a:	f001 f9f5 	bl	1b88 <USART_SendData>
        curr_char++;
     79e:	68fb      	ldr	r3, [r7, #12]
     7a0:	3301      	adds	r3, #1
     7a2:	60fb      	str	r3, [r7, #12]

void rs232_print_str(const char *str)
{
    const char *curr_char = str;

    while(*curr_char != '\0') {
     7a4:	68fb      	ldr	r3, [r7, #12]
     7a6:	781b      	ldrb	r3, [r3, #0]
     7a8:	2b00      	cmp	r3, #0
     7aa:	d1ea      	bne.n	782 <rs232_print_str+0xe>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, *curr_char);
        curr_char++;
    }
}
     7ac:	3710      	adds	r7, #16
     7ae:	46bd      	mov	sp, r7
     7b0:	bd80      	pop	{r7, pc}
     7b2:	bf00      	nop
     7b4:	40004400 	.word	0x40004400

000007b8 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     7b8:	b480      	push	{r7}
     7ba:	b083      	sub	sp, #12
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	2b09      	cmp	r3, #9
     7c4:	d804      	bhi.n	7d0 <hex_to_char+0x18>
        return hex_number + '0';
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	b2db      	uxtb	r3, r3
     7ca:	3330      	adds	r3, #48	; 0x30
     7cc:	b2db      	uxtb	r3, r3
     7ce:	e003      	b.n	7d8 <hex_to_char+0x20>
    } else {
        return hex_number - 0xA + 'A';
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	b2db      	uxtb	r3, r3
     7d4:	3337      	adds	r3, #55	; 0x37
     7d6:	b2db      	uxtb	r3, r3
    }
}
     7d8:	4618      	mov	r0, r3
     7da:	370c      	adds	r7, #12
     7dc:	46bd      	mov	sp, r7
     7de:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e2:	4770      	bx	lr

000007e4 <send_byte>:

void send_byte(uint8_t b)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b082      	sub	sp, #8
     7e8:	af00      	add	r7, sp, #0
     7ea:	4603      	mov	r3, r0
     7ec:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     7ee:	bf00      	nop
     7f0:	480a      	ldr	r0, [pc, #40]	; (81c <send_byte+0x38>)
     7f2:	2180      	movs	r1, #128	; 0x80
     7f4:	f001 fb14 	bl	1e20 <USART_GetFlagStatus>
     7f8:	4603      	mov	r3, r0
     7fa:	2b00      	cmp	r3, #0
     7fc:	d0f8      	beq.n	7f0 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     7fe:	4b08      	ldr	r3, [pc, #32]	; (820 <send_byte+0x3c>)
     800:	4a07      	ldr	r2, [pc, #28]	; (820 <send_byte+0x3c>)
     802:	68d2      	ldr	r2, [r2, #12]
     804:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
     808:	60da      	str	r2, [r3, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
     80a:	79fb      	ldrb	r3, [r7, #7]
     80c:	b29b      	uxth	r3, r3
     80e:	4803      	ldr	r0, [pc, #12]	; (81c <send_byte+0x38>)
     810:	4619      	mov	r1, r3
     812:	f001 f9b9 	bl	1b88 <USART_SendData>
}
     816:	3708      	adds	r7, #8
     818:	46bd      	mov	sp, r7
     81a:	bd80      	pop	{r7, pc}
     81c:	40004400 	.word	0x40004400
     820:	40011000 	.word	0x40011000

00000824 <send_number>:

void send_number(unsigned long sample, int radix)
{
     824:	b580      	push	{r7, lr}
     826:	b09e      	sub	sp, #120	; 0x78
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
     82c:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
     82e:	2300      	movs	r3, #0
     830:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
     832:	683a      	ldr	r2, [r7, #0]
     834:	687b      	ldr	r3, [r7, #4]
     836:	fbb3 f1f2 	udiv	r1, r3, r2
     83a:	fb02 f201 	mul.w	r2, r2, r1
     83e:	1a9b      	subs	r3, r3, r2
     840:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
     842:	6f38      	ldr	r0, [r7, #112]	; 0x70
     844:	f7ff ffb8 	bl	7b8 <hex_to_char>
     848:	4603      	mov	r3, r0
     84a:	461a      	mov	r2, r3
     84c:	f107 010c 	add.w	r1, r7, #12
     850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     852:	440b      	add	r3, r1
     854:	701a      	strb	r2, [r3, #0]
        sample /= radix;
     856:	683b      	ldr	r3, [r7, #0]
     858:	687a      	ldr	r2, [r7, #4]
     85a:	fbb2 f3f3 	udiv	r3, r2, r3
     85e:	607b      	str	r3, [r7, #4]
        digit++;
     860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     862:	3301      	adds	r3, #1
     864:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
     866:	687b      	ldr	r3, [r7, #4]
     868:	2b00      	cmp	r3, #0
     86a:	d1e2      	bne.n	832 <send_number+0xe>

    while(digit != 0) {
     86c:	e013      	b.n	896 <send_number+0x72>
        digit--;
     86e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     870:	3b01      	subs	r3, #1
     872:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     874:	bf00      	nop
     876:	480b      	ldr	r0, [pc, #44]	; (8a4 <send_number+0x80>)
     878:	2180      	movs	r1, #128	; 0x80
     87a:	f001 fad1 	bl	1e20 <USART_GetFlagStatus>
     87e:	4603      	mov	r3, r0
     880:	2b00      	cmp	r3, #0
     882:	d0f8      	beq.n	876 <send_number+0x52>
        USART_SendData(USART2, str[digit]);
     884:	f107 020c 	add.w	r2, r7, #12
     888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     88a:	4413      	add	r3, r2
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	4805      	ldr	r0, [pc, #20]	; (8a4 <send_number+0x80>)
     890:	4619      	mov	r1, r3
     892:	f001 f979 	bl	1b88 <USART_SendData>
        str[digit] = hex_to_char(mod);
        sample /= radix;
        digit++;
    } while(sample != 0);

    while(digit != 0) {
     896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     898:	2b00      	cmp	r3, #0
     89a:	d1e8      	bne.n	86e <send_number+0x4a>
        digit--;
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, str[digit]);
    }
}
     89c:	3778      	adds	r7, #120	; 0x78
     89e:	46bd      	mov	sp, r7
     8a0:	bd80      	pop	{r7, pc}
     8a2:	bf00      	nop
     8a4:	40004400 	.word	0x40004400

000008a8 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     8a8:	b480      	push	{r7}
     8aa:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     8ac:	4b13      	ldr	r3, [pc, #76]	; (8fc <RCC_DeInit+0x54>)
     8ae:	4a13      	ldr	r2, [pc, #76]	; (8fc <RCC_DeInit+0x54>)
     8b0:	6812      	ldr	r2, [r2, #0]
     8b2:	f042 0201 	orr.w	r2, r2, #1
     8b6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     8b8:	4a10      	ldr	r2, [pc, #64]	; (8fc <RCC_DeInit+0x54>)
     8ba:	4b10      	ldr	r3, [pc, #64]	; (8fc <RCC_DeInit+0x54>)
     8bc:	6859      	ldr	r1, [r3, #4]
     8be:	4b10      	ldr	r3, [pc, #64]	; (900 <RCC_DeInit+0x58>)
     8c0:	400b      	ands	r3, r1
     8c2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     8c4:	4a0d      	ldr	r2, [pc, #52]	; (8fc <RCC_DeInit+0x54>)
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <RCC_DeInit+0x54>)
     8c8:	681b      	ldr	r3, [r3, #0]
     8ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
     8ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     8d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     8d4:	4b09      	ldr	r3, [pc, #36]	; (8fc <RCC_DeInit+0x54>)
     8d6:	4a09      	ldr	r2, [pc, #36]	; (8fc <RCC_DeInit+0x54>)
     8d8:	6812      	ldr	r2, [r2, #0]
     8da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     8de:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     8e0:	4b06      	ldr	r3, [pc, #24]	; (8fc <RCC_DeInit+0x54>)
     8e2:	4a06      	ldr	r2, [pc, #24]	; (8fc <RCC_DeInit+0x54>)
     8e4:	6852      	ldr	r2, [r2, #4]
     8e6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     8ea:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     8ec:	4b03      	ldr	r3, [pc, #12]	; (8fc <RCC_DeInit+0x54>)
     8ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     8f2:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr
     8fc:	40021000 	.word	0x40021000
     900:	f8ff0000 	.word	0xf8ff0000

00000904 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     904:	b480      	push	{r7}
     906:	b083      	sub	sp, #12
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     90c:	4b13      	ldr	r3, [pc, #76]	; (95c <RCC_HSEConfig+0x58>)
     90e:	4a13      	ldr	r2, [pc, #76]	; (95c <RCC_HSEConfig+0x58>)
     910:	6812      	ldr	r2, [r2, #0]
     912:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     916:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     918:	4b10      	ldr	r3, [pc, #64]	; (95c <RCC_HSEConfig+0x58>)
     91a:	4a10      	ldr	r2, [pc, #64]	; (95c <RCC_HSEConfig+0x58>)
     91c:	6812      	ldr	r2, [r2, #0]
     91e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     922:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     924:	687b      	ldr	r3, [r7, #4]
     926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     92a:	d003      	beq.n	934 <RCC_HSEConfig+0x30>
     92c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     930:	d007      	beq.n	942 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
     932:	e00d      	b.n	950 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     934:	4b09      	ldr	r3, [pc, #36]	; (95c <RCC_HSEConfig+0x58>)
     936:	4a09      	ldr	r2, [pc, #36]	; (95c <RCC_HSEConfig+0x58>)
     938:	6812      	ldr	r2, [r2, #0]
     93a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     93e:	601a      	str	r2, [r3, #0]
      break;
     940:	e006      	b.n	950 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <RCC_HSEConfig+0x58>)
     944:	4a05      	ldr	r2, [pc, #20]	; (95c <RCC_HSEConfig+0x58>)
     946:	6812      	ldr	r2, [r2, #0]
     948:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     94c:	601a      	str	r2, [r3, #0]
      break;
     94e:	bf00      	nop
      
    default:
      break;
  }
}
     950:	370c      	adds	r7, #12
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop
     95c:	40021000 	.word	0x40021000

00000960 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     966:	2300      	movs	r3, #0
     968:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     96a:	2300      	movs	r3, #0
     96c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     96e:	2300      	movs	r3, #0
     970:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     972:	2031      	movs	r0, #49	; 0x31
     974:	f000 fb10 	bl	f98 <RCC_GetFlagStatus>
     978:	4603      	mov	r3, r0
     97a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
     97c:	683b      	ldr	r3, [r7, #0]
     97e:	3301      	adds	r3, #1
     980:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     982:	683b      	ldr	r3, [r7, #0]
     984:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     988:	d002      	beq.n	990 <RCC_WaitForHSEStartUp+0x30>
     98a:	79bb      	ldrb	r3, [r7, #6]
     98c:	2b00      	cmp	r3, #0
     98e:	d0f0      	beq.n	972 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     990:	2031      	movs	r0, #49	; 0x31
     992:	f000 fb01 	bl	f98 <RCC_GetFlagStatus>
     996:	4603      	mov	r3, r0
     998:	2b00      	cmp	r3, #0
     99a:	d002      	beq.n	9a2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     99c:	2301      	movs	r3, #1
     99e:	71fb      	strb	r3, [r7, #7]
     9a0:	e001      	b.n	9a6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     9a2:	2300      	movs	r3, #0
     9a4:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
     9a6:	79fb      	ldrb	r3, [r7, #7]
}
     9a8:	4618      	mov	r0, r3
     9aa:	3708      	adds	r7, #8
     9ac:	46bd      	mov	sp, r7
     9ae:	bd80      	pop	{r7, pc}

000009b0 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     9b0:	b480      	push	{r7}
     9b2:	b085      	sub	sp, #20
     9b4:	af00      	add	r7, sp, #0
     9b6:	4603      	mov	r3, r0
     9b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     9ba:	2300      	movs	r3, #0
     9bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     9be:	4b0a      	ldr	r3, [pc, #40]	; (9e8 <RCC_AdjustHSICalibrationValue+0x38>)
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     9ca:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     9cc:	79fb      	ldrb	r3, [r7, #7]
     9ce:	00db      	lsls	r3, r3, #3
     9d0:	68fa      	ldr	r2, [r7, #12]
     9d2:	4313      	orrs	r3, r2
     9d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     9d6:	4b04      	ldr	r3, [pc, #16]	; (9e8 <RCC_AdjustHSICalibrationValue+0x38>)
     9d8:	68fa      	ldr	r2, [r7, #12]
     9da:	601a      	str	r2, [r3, #0]
}
     9dc:	3714      	adds	r7, #20
     9de:	46bd      	mov	sp, r7
     9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e4:	4770      	bx	lr
     9e6:	bf00      	nop
     9e8:	40021000 	.word	0x40021000

000009ec <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     9ec:	b480      	push	{r7}
     9ee:	b083      	sub	sp, #12
     9f0:	af00      	add	r7, sp, #0
     9f2:	4603      	mov	r3, r0
     9f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <RCC_HSICmd+0x1c>)
     9f8:	79fa      	ldrb	r2, [r7, #7]
     9fa:	601a      	str	r2, [r3, #0]
}
     9fc:	370c      	adds	r7, #12
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr
     a06:	bf00      	nop
     a08:	42420000 	.word	0x42420000

00000a0c <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
     a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a16:	2300      	movs	r3, #0
     a18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     a1a:	4b0a      	ldr	r3, [pc, #40]	; (a44 <RCC_PLLConfig+0x38>)
     a1c:	685b      	ldr	r3, [r3, #4]
     a1e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     a26:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     a28:	687a      	ldr	r2, [r7, #4]
     a2a:	683b      	ldr	r3, [r7, #0]
     a2c:	4313      	orrs	r3, r2
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	4313      	orrs	r3, r2
     a32:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a34:	4b03      	ldr	r3, [pc, #12]	; (a44 <RCC_PLLConfig+0x38>)
     a36:	68fa      	ldr	r2, [r7, #12]
     a38:	605a      	str	r2, [r3, #4]
}
     a3a:	3714      	adds	r7, #20
     a3c:	46bd      	mov	sp, r7
     a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
     a42:	4770      	bx	lr
     a44:	40021000 	.word	0x40021000

00000a48 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     a48:	b480      	push	{r7}
     a4a:	b083      	sub	sp, #12
     a4c:	af00      	add	r7, sp, #0
     a4e:	4603      	mov	r3, r0
     a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     a52:	4b04      	ldr	r3, [pc, #16]	; (a64 <RCC_PLLCmd+0x1c>)
     a54:	79fa      	ldrb	r2, [r7, #7]
     a56:	601a      	str	r2, [r3, #0]
}
     a58:	370c      	adds	r7, #12
     a5a:	46bd      	mov	sp, r7
     a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a60:	4770      	bx	lr
     a62:	bf00      	nop
     a64:	42420060 	.word	0x42420060

00000a68 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     a68:	b480      	push	{r7}
     a6a:	b085      	sub	sp, #20
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a70:	2300      	movs	r3, #0
     a72:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     a74:	4b09      	ldr	r3, [pc, #36]	; (a9c <RCC_SYSCLKConfig+0x34>)
     a76:	685b      	ldr	r3, [r3, #4]
     a78:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	f023 0303 	bic.w	r3, r3, #3
     a80:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     a82:	68fa      	ldr	r2, [r7, #12]
     a84:	687b      	ldr	r3, [r7, #4]
     a86:	4313      	orrs	r3, r2
     a88:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <RCC_SYSCLKConfig+0x34>)
     a8c:	68fa      	ldr	r2, [r7, #12]
     a8e:	605a      	str	r2, [r3, #4]
}
     a90:	3714      	adds	r7, #20
     a92:	46bd      	mov	sp, r7
     a94:	f85d 7b04 	ldr.w	r7, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop
     a9c:	40021000 	.word	0x40021000

00000aa0 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     aa0:	b480      	push	{r7}
     aa2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     aa4:	4b05      	ldr	r3, [pc, #20]	; (abc <RCC_GetSYSCLKSource+0x1c>)
     aa6:	685b      	ldr	r3, [r3, #4]
     aa8:	b2db      	uxtb	r3, r3
     aaa:	f003 030c 	and.w	r3, r3, #12
     aae:	b2db      	uxtb	r3, r3
}
     ab0:	4618      	mov	r0, r3
     ab2:	46bd      	mov	sp, r7
     ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab8:	4770      	bx	lr
     aba:	bf00      	nop
     abc:	40021000 	.word	0x40021000

00000ac0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     ac0:	b480      	push	{r7}
     ac2:	b085      	sub	sp, #20
     ac4:	af00      	add	r7, sp, #0
     ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     ac8:	2300      	movs	r3, #0
     aca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     acc:	4b09      	ldr	r3, [pc, #36]	; (af4 <RCC_HCLKConfig+0x34>)
     ace:	685b      	ldr	r3, [r3, #4]
     ad0:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     ad2:	68fb      	ldr	r3, [r7, #12]
     ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     ad8:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     ada:	68fa      	ldr	r2, [r7, #12]
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	4313      	orrs	r3, r2
     ae0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     ae2:	4b04      	ldr	r3, [pc, #16]	; (af4 <RCC_HCLKConfig+0x34>)
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop
     af4:	40021000 	.word	0x40021000

00000af8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     af8:	b480      	push	{r7}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b00:	2300      	movs	r3, #0
     b02:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     b04:	4b09      	ldr	r3, [pc, #36]	; (b2c <RCC_PCLK1Config+0x34>)
     b06:	685b      	ldr	r3, [r3, #4]
     b08:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     b0a:	68fb      	ldr	r3, [r7, #12]
     b0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     b10:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     b12:	68fa      	ldr	r2, [r7, #12]
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	4313      	orrs	r3, r2
     b18:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b1a:	4b04      	ldr	r3, [pc, #16]	; (b2c <RCC_PCLK1Config+0x34>)
     b1c:	68fa      	ldr	r2, [r7, #12]
     b1e:	605a      	str	r2, [r3, #4]
}
     b20:	3714      	adds	r7, #20
     b22:	46bd      	mov	sp, r7
     b24:	f85d 7b04 	ldr.w	r7, [sp], #4
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40021000 	.word	0x40021000

00000b30 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b38:	2300      	movs	r3, #0
     b3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     b3c:	4b09      	ldr	r3, [pc, #36]	; (b64 <RCC_PCLK2Config+0x34>)
     b3e:	685b      	ldr	r3, [r3, #4]
     b40:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     b48:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	00db      	lsls	r3, r3, #3
     b4e:	68fa      	ldr	r2, [r7, #12]
     b50:	4313      	orrs	r3, r2
     b52:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <RCC_PCLK2Config+0x34>)
     b56:	68fa      	ldr	r2, [r7, #12]
     b58:	605a      	str	r2, [r3, #4]
}
     b5a:	3714      	adds	r7, #20
     b5c:	46bd      	mov	sp, r7
     b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
     b62:	4770      	bx	lr
     b64:	40021000 	.word	0x40021000

00000b68 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	4602      	mov	r2, r0
     b70:	460b      	mov	r3, r1
     b72:	71fa      	strb	r2, [r7, #7]
     b74:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     b76:	79bb      	ldrb	r3, [r7, #6]
     b78:	2b00      	cmp	r3, #0
     b7a:	d008      	beq.n	b8e <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     b7c:	4b0b      	ldr	r3, [pc, #44]	; (bac <RCC_ITConfig+0x44>)
     b7e:	4a0b      	ldr	r2, [pc, #44]	; (bac <RCC_ITConfig+0x44>)
     b80:	7812      	ldrb	r2, [r2, #0]
     b82:	b2d1      	uxtb	r1, r2
     b84:	79fa      	ldrb	r2, [r7, #7]
     b86:	430a      	orrs	r2, r1
     b88:	b2d2      	uxtb	r2, r2
     b8a:	701a      	strb	r2, [r3, #0]
     b8c:	e009      	b.n	ba2 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     b8e:	4b07      	ldr	r3, [pc, #28]	; (bac <RCC_ITConfig+0x44>)
     b90:	4a06      	ldr	r2, [pc, #24]	; (bac <RCC_ITConfig+0x44>)
     b92:	7812      	ldrb	r2, [r2, #0]
     b94:	b2d1      	uxtb	r1, r2
     b96:	79fa      	ldrb	r2, [r7, #7]
     b98:	43d2      	mvns	r2, r2
     b9a:	b2d2      	uxtb	r2, r2
     b9c:	400a      	ands	r2, r1
     b9e:	b2d2      	uxtb	r2, r2
     ba0:	701a      	strb	r2, [r3, #0]
  }
}
     ba2:	370c      	adds	r7, #12
     ba4:	46bd      	mov	sp, r7
     ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
     baa:	4770      	bx	lr
     bac:	40021009 	.word	0x40021009

00000bb0 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     bb0:	b480      	push	{r7}
     bb2:	b083      	sub	sp, #12
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <RCC_USBCLKConfig+0x18>)
     bba:	687a      	ldr	r2, [r7, #4]
     bbc:	601a      	str	r2, [r3, #0]
}
     bbe:	370c      	adds	r7, #12
     bc0:	46bd      	mov	sp, r7
     bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc6:	4770      	bx	lr
     bc8:	424200d8 	.word	0x424200d8

00000bcc <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     bcc:	b480      	push	{r7}
     bce:	b085      	sub	sp, #20
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     bd4:	2300      	movs	r3, #0
     bd6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     bd8:	4b09      	ldr	r3, [pc, #36]	; (c00 <RCC_ADCCLKConfig+0x34>)
     bda:	685b      	ldr	r3, [r3, #4]
     bdc:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     bde:	68fb      	ldr	r3, [r7, #12]
     be0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     be4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     be6:	68fa      	ldr	r2, [r7, #12]
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	4313      	orrs	r3, r2
     bec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <RCC_ADCCLKConfig+0x34>)
     bf0:	68fa      	ldr	r2, [r7, #12]
     bf2:	605a      	str	r2, [r3, #4]
}
     bf4:	3714      	adds	r7, #20
     bf6:	46bd      	mov	sp, r7
     bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bfc:	4770      	bx	lr
     bfe:	bf00      	nop
     c00:	40021000 	.word	0x40021000

00000c04 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     c04:	b480      	push	{r7}
     c06:	b083      	sub	sp, #12
     c08:	af00      	add	r7, sp, #0
     c0a:	4603      	mov	r3, r0
     c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     c0e:	4b0c      	ldr	r3, [pc, #48]	; (c40 <RCC_LSEConfig+0x3c>)
     c10:	2200      	movs	r2, #0
     c12:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     c14:	4b0a      	ldr	r3, [pc, #40]	; (c40 <RCC_LSEConfig+0x3c>)
     c16:	2200      	movs	r2, #0
     c18:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     c1a:	79fb      	ldrb	r3, [r7, #7]
     c1c:	2b01      	cmp	r3, #1
     c1e:	d002      	beq.n	c26 <RCC_LSEConfig+0x22>
     c20:	2b04      	cmp	r3, #4
     c22:	d004      	beq.n	c2e <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
     c24:	e007      	b.n	c36 <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     c26:	4b06      	ldr	r3, [pc, #24]	; (c40 <RCC_LSEConfig+0x3c>)
     c28:	2201      	movs	r2, #1
     c2a:	701a      	strb	r2, [r3, #0]
      break;
     c2c:	e003      	b.n	c36 <RCC_LSEConfig+0x32>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     c2e:	4b04      	ldr	r3, [pc, #16]	; (c40 <RCC_LSEConfig+0x3c>)
     c30:	2205      	movs	r2, #5
     c32:	701a      	strb	r2, [r3, #0]
      break;            
     c34:	bf00      	nop
      
    default:
      break;      
  }
}
     c36:	370c      	adds	r7, #12
     c38:	46bd      	mov	sp, r7
     c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3e:	4770      	bx	lr
     c40:	40021020 	.word	0x40021020

00000c44 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     c44:	b480      	push	{r7}
     c46:	b083      	sub	sp, #12
     c48:	af00      	add	r7, sp, #0
     c4a:	4603      	mov	r3, r0
     c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     c4e:	4b04      	ldr	r3, [pc, #16]	; (c60 <RCC_LSICmd+0x1c>)
     c50:	79fa      	ldrb	r2, [r7, #7]
     c52:	601a      	str	r2, [r3, #0]
}
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop
     c60:	42420480 	.word	0x42420480

00000c64 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     c64:	b480      	push	{r7}
     c66:	b083      	sub	sp, #12
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     c6c:	4b05      	ldr	r3, [pc, #20]	; (c84 <RCC_RTCCLKConfig+0x20>)
     c6e:	4a05      	ldr	r2, [pc, #20]	; (c84 <RCC_RTCCLKConfig+0x20>)
     c70:	6a11      	ldr	r1, [r2, #32]
     c72:	687a      	ldr	r2, [r7, #4]
     c74:	430a      	orrs	r2, r1
     c76:	621a      	str	r2, [r3, #32]
}
     c78:	370c      	adds	r7, #12
     c7a:	46bd      	mov	sp, r7
     c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c80:	4770      	bx	lr
     c82:	bf00      	nop
     c84:	40021000 	.word	0x40021000

00000c88 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     c88:	b480      	push	{r7}
     c8a:	b083      	sub	sp, #12
     c8c:	af00      	add	r7, sp, #0
     c8e:	4603      	mov	r3, r0
     c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     c92:	4b04      	ldr	r3, [pc, #16]	; (ca4 <RCC_RTCCLKCmd+0x1c>)
     c94:	79fa      	ldrb	r2, [r7, #7]
     c96:	601a      	str	r2, [r3, #0]
}
     c98:	370c      	adds	r7, #12
     c9a:	46bd      	mov	sp, r7
     c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca0:	4770      	bx	lr
     ca2:	bf00      	nop
     ca4:	4242043c 	.word	0x4242043c

00000ca8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     ca8:	b480      	push	{r7}
     caa:	b087      	sub	sp, #28
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     cb0:	2300      	movs	r3, #0
     cb2:	617b      	str	r3, [r7, #20]
     cb4:	2300      	movs	r3, #0
     cb6:	613b      	str	r3, [r7, #16]
     cb8:	2300      	movs	r3, #0
     cba:	60fb      	str	r3, [r7, #12]
     cbc:	2300      	movs	r3, #0
     cbe:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     cc0:	4b4d      	ldr	r3, [pc, #308]	; (df8 <RCC_GetClocksFreq+0x150>)
     cc2:	685b      	ldr	r3, [r3, #4]
     cc4:	f003 030c 	and.w	r3, r3, #12
     cc8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
     cca:	697b      	ldr	r3, [r7, #20]
     ccc:	2b04      	cmp	r3, #4
     cce:	d007      	beq.n	ce0 <RCC_GetClocksFreq+0x38>
     cd0:	2b08      	cmp	r3, #8
     cd2:	d009      	beq.n	ce8 <RCC_GetClocksFreq+0x40>
     cd4:	2b00      	cmp	r3, #0
     cd6:	d134      	bne.n	d42 <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	4a48      	ldr	r2, [pc, #288]	; (dfc <RCC_GetClocksFreq+0x154>)
     cdc:	601a      	str	r2, [r3, #0]
      break;
     cde:	e034      	b.n	d4a <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	4a46      	ldr	r2, [pc, #280]	; (dfc <RCC_GetClocksFreq+0x154>)
     ce4:	601a      	str	r2, [r3, #0]
      break;
     ce6:	e030      	b.n	d4a <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     ce8:	4b43      	ldr	r3, [pc, #268]	; (df8 <RCC_GetClocksFreq+0x150>)
     cea:	685b      	ldr	r3, [r3, #4]
     cec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     cf0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     cf2:	4b41      	ldr	r3, [pc, #260]	; (df8 <RCC_GetClocksFreq+0x150>)
     cf4:	685b      	ldr	r3, [r3, #4]
     cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     cfa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     cfc:	693b      	ldr	r3, [r7, #16]
     cfe:	0c9b      	lsrs	r3, r3, #18
     d00:	3302      	adds	r3, #2
     d02:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
     d04:	68fb      	ldr	r3, [r7, #12]
     d06:	2b00      	cmp	r3, #0
     d08:	d106      	bne.n	d18 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     d0a:	693b      	ldr	r3, [r7, #16]
     d0c:	4a3c      	ldr	r2, [pc, #240]	; (e00 <RCC_GetClocksFreq+0x158>)
     d0e:	fb02 f203 	mul.w	r2, r2, r3
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	601a      	str	r2, [r3, #0]
     d16:	e013      	b.n	d40 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     d18:	4b37      	ldr	r3, [pc, #220]	; (df8 <RCC_GetClocksFreq+0x150>)
     d1a:	685b      	ldr	r3, [r3, #4]
     d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     d20:	2b00      	cmp	r3, #0
     d22:	d006      	beq.n	d32 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     d24:	693b      	ldr	r3, [r7, #16]
     d26:	4a36      	ldr	r2, [pc, #216]	; (e00 <RCC_GetClocksFreq+0x158>)
     d28:	fb02 f203 	mul.w	r2, r2, r3
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	601a      	str	r2, [r3, #0]
     d30:	e006      	b.n	d40 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     d32:	693b      	ldr	r3, [r7, #16]
     d34:	4a31      	ldr	r2, [pc, #196]	; (dfc <RCC_GetClocksFreq+0x154>)
     d36:	fb02 f203 	mul.w	r2, r2, r3
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     d3e:	e004      	b.n	d4a <RCC_GetClocksFreq+0xa2>
     d40:	e003      	b.n	d4a <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     d42:	687b      	ldr	r3, [r7, #4]
     d44:	4a2d      	ldr	r2, [pc, #180]	; (dfc <RCC_GetClocksFreq+0x154>)
     d46:	601a      	str	r2, [r3, #0]
      break;
     d48:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     d4a:	4b2b      	ldr	r3, [pc, #172]	; (df8 <RCC_GetClocksFreq+0x150>)
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     d52:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     d54:	697b      	ldr	r3, [r7, #20]
     d56:	091b      	lsrs	r3, r3, #4
     d58:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d5a:	4a2a      	ldr	r2, [pc, #168]	; (e04 <RCC_GetClocksFreq+0x15c>)
     d5c:	697b      	ldr	r3, [r7, #20]
     d5e:	4413      	add	r3, r2
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	b2db      	uxtb	r3, r3
     d64:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	68bb      	ldr	r3, [r7, #8]
     d6c:	40da      	lsrs	r2, r3
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d72:	4b21      	ldr	r3, [pc, #132]	; (df8 <RCC_GetClocksFreq+0x150>)
     d74:	685b      	ldr	r3, [r3, #4]
     d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d7a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d7c:	697b      	ldr	r3, [r7, #20]
     d7e:	0a1b      	lsrs	r3, r3, #8
     d80:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d82:	4a20      	ldr	r2, [pc, #128]	; (e04 <RCC_GetClocksFreq+0x15c>)
     d84:	697b      	ldr	r3, [r7, #20]
     d86:	4413      	add	r3, r2
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	b2db      	uxtb	r3, r3
     d8c:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	685a      	ldr	r2, [r3, #4]
     d92:	68bb      	ldr	r3, [r7, #8]
     d94:	40da      	lsrs	r2, r3
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     d9a:	4b17      	ldr	r3, [pc, #92]	; (df8 <RCC_GetClocksFreq+0x150>)
     d9c:	685b      	ldr	r3, [r3, #4]
     d9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     da2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     da4:	697b      	ldr	r3, [r7, #20]
     da6:	0adb      	lsrs	r3, r3, #11
     da8:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     daa:	4a16      	ldr	r2, [pc, #88]	; (e04 <RCC_GetClocksFreq+0x15c>)
     dac:	697b      	ldr	r3, [r7, #20]
     dae:	4413      	add	r3, r2
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	b2db      	uxtb	r3, r3
     db4:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	685a      	ldr	r2, [r3, #4]
     dba:	68bb      	ldr	r3, [r7, #8]
     dbc:	40da      	lsrs	r2, r3
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     dc2:	4b0d      	ldr	r3, [pc, #52]	; (df8 <RCC_GetClocksFreq+0x150>)
     dc4:	685b      	ldr	r3, [r3, #4]
     dc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     dca:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     dcc:	697b      	ldr	r3, [r7, #20]
     dce:	0b9b      	lsrs	r3, r3, #14
     dd0:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     dd2:	4a0d      	ldr	r2, [pc, #52]	; (e08 <RCC_GetClocksFreq+0x160>)
     dd4:	697b      	ldr	r3, [r7, #20]
     dd6:	4413      	add	r3, r2
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	b2db      	uxtb	r3, r3
     ddc:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	68da      	ldr	r2, [r3, #12]
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	fbb2 f2f3 	udiv	r2, r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	611a      	str	r2, [r3, #16]
}
     dec:	371c      	adds	r7, #28
     dee:	46bd      	mov	sp, r7
     df0:	f85d 7b04 	ldr.w	r7, [sp], #4
     df4:	4770      	bx	lr
     df6:	bf00      	nop
     df8:	40021000 	.word	0x40021000
     dfc:	007a1200 	.word	0x007a1200
     e00:	003d0900 	.word	0x003d0900
     e04:	20000014 	.word	0x20000014
     e08:	20000024 	.word	0x20000024

00000e0c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     e0c:	b480      	push	{r7}
     e0e:	b083      	sub	sp, #12
     e10:	af00      	add	r7, sp, #0
     e12:	6078      	str	r0, [r7, #4]
     e14:	460b      	mov	r3, r1
     e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     e18:	78fb      	ldrb	r3, [r7, #3]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d006      	beq.n	e2c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     e1e:	4b09      	ldr	r3, [pc, #36]	; (e44 <RCC_AHBPeriphClockCmd+0x38>)
     e20:	4a08      	ldr	r2, [pc, #32]	; (e44 <RCC_AHBPeriphClockCmd+0x38>)
     e22:	6951      	ldr	r1, [r2, #20]
     e24:	687a      	ldr	r2, [r7, #4]
     e26:	430a      	orrs	r2, r1
     e28:	615a      	str	r2, [r3, #20]
     e2a:	e006      	b.n	e3a <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     e2c:	4b05      	ldr	r3, [pc, #20]	; (e44 <RCC_AHBPeriphClockCmd+0x38>)
     e2e:	4a05      	ldr	r2, [pc, #20]	; (e44 <RCC_AHBPeriphClockCmd+0x38>)
     e30:	6951      	ldr	r1, [r2, #20]
     e32:	687a      	ldr	r2, [r7, #4]
     e34:	43d2      	mvns	r2, r2
     e36:	400a      	ands	r2, r1
     e38:	615a      	str	r2, [r3, #20]
  }
}
     e3a:	370c      	adds	r7, #12
     e3c:	46bd      	mov	sp, r7
     e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e42:	4770      	bx	lr
     e44:	40021000 	.word	0x40021000

00000e48 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e48:	b480      	push	{r7}
     e4a:	b083      	sub	sp, #12
     e4c:	af00      	add	r7, sp, #0
     e4e:	6078      	str	r0, [r7, #4]
     e50:	460b      	mov	r3, r1
     e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e54:	78fb      	ldrb	r3, [r7, #3]
     e56:	2b00      	cmp	r3, #0
     e58:	d006      	beq.n	e68 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e5a:	4b09      	ldr	r3, [pc, #36]	; (e80 <RCC_APB2PeriphClockCmd+0x38>)
     e5c:	4a08      	ldr	r2, [pc, #32]	; (e80 <RCC_APB2PeriphClockCmd+0x38>)
     e5e:	6991      	ldr	r1, [r2, #24]
     e60:	687a      	ldr	r2, [r7, #4]
     e62:	430a      	orrs	r2, r1
     e64:	619a      	str	r2, [r3, #24]
     e66:	e006      	b.n	e76 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     e68:	4b05      	ldr	r3, [pc, #20]	; (e80 <RCC_APB2PeriphClockCmd+0x38>)
     e6a:	4a05      	ldr	r2, [pc, #20]	; (e80 <RCC_APB2PeriphClockCmd+0x38>)
     e6c:	6991      	ldr	r1, [r2, #24]
     e6e:	687a      	ldr	r2, [r7, #4]
     e70:	43d2      	mvns	r2, r2
     e72:	400a      	ands	r2, r1
     e74:	619a      	str	r2, [r3, #24]
  }
}
     e76:	370c      	adds	r7, #12
     e78:	46bd      	mov	sp, r7
     e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e7e:	4770      	bx	lr
     e80:	40021000 	.word	0x40021000

00000e84 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e84:	b480      	push	{r7}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e90:	78fb      	ldrb	r3, [r7, #3]
     e92:	2b00      	cmp	r3, #0
     e94:	d006      	beq.n	ea4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e96:	4b09      	ldr	r3, [pc, #36]	; (ebc <RCC_APB1PeriphClockCmd+0x38>)
     e98:	4a08      	ldr	r2, [pc, #32]	; (ebc <RCC_APB1PeriphClockCmd+0x38>)
     e9a:	69d1      	ldr	r1, [r2, #28]
     e9c:	687a      	ldr	r2, [r7, #4]
     e9e:	430a      	orrs	r2, r1
     ea0:	61da      	str	r2, [r3, #28]
     ea2:	e006      	b.n	eb2 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     ea4:	4b05      	ldr	r3, [pc, #20]	; (ebc <RCC_APB1PeriphClockCmd+0x38>)
     ea6:	4a05      	ldr	r2, [pc, #20]	; (ebc <RCC_APB1PeriphClockCmd+0x38>)
     ea8:	69d1      	ldr	r1, [r2, #28]
     eaa:	687a      	ldr	r2, [r7, #4]
     eac:	43d2      	mvns	r2, r2
     eae:	400a      	ands	r2, r1
     eb0:	61da      	str	r2, [r3, #28]
  }
}
     eb2:	370c      	adds	r7, #12
     eb4:	46bd      	mov	sp, r7
     eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
     eba:	4770      	bx	lr
     ebc:	40021000 	.word	0x40021000

00000ec0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     ec0:	b480      	push	{r7}
     ec2:	b083      	sub	sp, #12
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
     ec8:	460b      	mov	r3, r1
     eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ecc:	78fb      	ldrb	r3, [r7, #3]
     ece:	2b00      	cmp	r3, #0
     ed0:	d006      	beq.n	ee0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <RCC_APB2PeriphResetCmd+0x38>)
     ed4:	4a08      	ldr	r2, [pc, #32]	; (ef8 <RCC_APB2PeriphResetCmd+0x38>)
     ed6:	68d1      	ldr	r1, [r2, #12]
     ed8:	687a      	ldr	r2, [r7, #4]
     eda:	430a      	orrs	r2, r1
     edc:	60da      	str	r2, [r3, #12]
     ede:	e006      	b.n	eee <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     ee0:	4b05      	ldr	r3, [pc, #20]	; (ef8 <RCC_APB2PeriphResetCmd+0x38>)
     ee2:	4a05      	ldr	r2, [pc, #20]	; (ef8 <RCC_APB2PeriphResetCmd+0x38>)
     ee4:	68d1      	ldr	r1, [r2, #12]
     ee6:	687a      	ldr	r2, [r7, #4]
     ee8:	43d2      	mvns	r2, r2
     eea:	400a      	ands	r2, r1
     eec:	60da      	str	r2, [r3, #12]
  }
}
     eee:	370c      	adds	r7, #12
     ef0:	46bd      	mov	sp, r7
     ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ef6:	4770      	bx	lr
     ef8:	40021000 	.word	0x40021000

00000efc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     efc:	b480      	push	{r7}
     efe:	b083      	sub	sp, #12
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
     f04:	460b      	mov	r3, r1
     f06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f08:	78fb      	ldrb	r3, [r7, #3]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d006      	beq.n	f1c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f0e:	4b09      	ldr	r3, [pc, #36]	; (f34 <RCC_APB1PeriphResetCmd+0x38>)
     f10:	4a08      	ldr	r2, [pc, #32]	; (f34 <RCC_APB1PeriphResetCmd+0x38>)
     f12:	6911      	ldr	r1, [r2, #16]
     f14:	687a      	ldr	r2, [r7, #4]
     f16:	430a      	orrs	r2, r1
     f18:	611a      	str	r2, [r3, #16]
     f1a:	e006      	b.n	f2a <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     f1c:	4b05      	ldr	r3, [pc, #20]	; (f34 <RCC_APB1PeriphResetCmd+0x38>)
     f1e:	4a05      	ldr	r2, [pc, #20]	; (f34 <RCC_APB1PeriphResetCmd+0x38>)
     f20:	6911      	ldr	r1, [r2, #16]
     f22:	687a      	ldr	r2, [r7, #4]
     f24:	43d2      	mvns	r2, r2
     f26:	400a      	ands	r2, r1
     f28:	611a      	str	r2, [r3, #16]
  }
}
     f2a:	370c      	adds	r7, #12
     f2c:	46bd      	mov	sp, r7
     f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
     f32:	4770      	bx	lr
     f34:	40021000 	.word	0x40021000

00000f38 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f38:	b480      	push	{r7}
     f3a:	b083      	sub	sp, #12
     f3c:	af00      	add	r7, sp, #0
     f3e:	4603      	mov	r3, r0
     f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f42:	4b04      	ldr	r3, [pc, #16]	; (f54 <RCC_BackupResetCmd+0x1c>)
     f44:	79fa      	ldrb	r2, [r7, #7]
     f46:	601a      	str	r2, [r3, #0]
}
     f48:	370c      	adds	r7, #12
     f4a:	46bd      	mov	sp, r7
     f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f50:	4770      	bx	lr
     f52:	bf00      	nop
     f54:	42420440 	.word	0x42420440

00000f58 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f58:	b480      	push	{r7}
     f5a:	b083      	sub	sp, #12
     f5c:	af00      	add	r7, sp, #0
     f5e:	4603      	mov	r3, r0
     f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <RCC_ClockSecuritySystemCmd+0x1c>)
     f64:	79fa      	ldrb	r2, [r7, #7]
     f66:	601a      	str	r2, [r3, #0]
}
     f68:	370c      	adds	r7, #12
     f6a:	46bd      	mov	sp, r7
     f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f70:	4770      	bx	lr
     f72:	bf00      	nop
     f74:	4242004c 	.word	0x4242004c

00000f78 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f78:	b480      	push	{r7}
     f7a:	b083      	sub	sp, #12
     f7c:	af00      	add	r7, sp, #0
     f7e:	4603      	mov	r3, r0
     f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <RCC_MCOConfig+0x1c>)
     f84:	79fa      	ldrb	r2, [r7, #7]
     f86:	701a      	strb	r2, [r3, #0]
}
     f88:	370c      	adds	r7, #12
     f8a:	46bd      	mov	sp, r7
     f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f90:	4770      	bx	lr
     f92:	bf00      	nop
     f94:	40021007 	.word	0x40021007

00000f98 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f98:	b480      	push	{r7}
     f9a:	b087      	sub	sp, #28
     f9c:	af00      	add	r7, sp, #0
     f9e:	4603      	mov	r3, r0
     fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     fa2:	2300      	movs	r3, #0
     fa4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     fa6:	2300      	movs	r3, #0
     fa8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     faa:	2300      	movs	r3, #0
     fac:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     fae:	79fb      	ldrb	r3, [r7, #7]
     fb0:	095b      	lsrs	r3, r3, #5
     fb2:	b2db      	uxtb	r3, r3
     fb4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	2b01      	cmp	r3, #1
     fba:	d103      	bne.n	fc4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
     fbc:	4b12      	ldr	r3, [pc, #72]	; (1008 <RCC_GetFlagStatus+0x70>)
     fbe:	681b      	ldr	r3, [r3, #0]
     fc0:	617b      	str	r3, [r7, #20]
     fc2:	e009      	b.n	fd8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	2b02      	cmp	r3, #2
     fc8:	d103      	bne.n	fd2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <RCC_GetFlagStatus+0x70>)
     fcc:	6a1b      	ldr	r3, [r3, #32]
     fce:	617b      	str	r3, [r7, #20]
     fd0:	e002      	b.n	fd8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fd2:	4b0d      	ldr	r3, [pc, #52]	; (1008 <RCC_GetFlagStatus+0x70>)
     fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fd6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fd8:	79fb      	ldrb	r3, [r7, #7]
     fda:	f003 031f 	and.w	r3, r3, #31
     fde:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	697a      	ldr	r2, [r7, #20]
     fe4:	fa22 f303 	lsr.w	r3, r2, r3
     fe8:	f003 0301 	and.w	r3, r3, #1
     fec:	2b00      	cmp	r3, #0
     fee:	d002      	beq.n	ff6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
     ff0:	2301      	movs	r3, #1
     ff2:	74fb      	strb	r3, [r7, #19]
     ff4:	e001      	b.n	ffa <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
     ff6:	2300      	movs	r3, #0
     ff8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     ffa:	7cfb      	ldrb	r3, [r7, #19]
}
     ffc:	4618      	mov	r0, r3
     ffe:	371c      	adds	r7, #28
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr
    1008:	40021000 	.word	0x40021000

0000100c <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    100c:	b480      	push	{r7}
    100e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1010:	4b04      	ldr	r3, [pc, #16]	; (1024 <RCC_ClearFlag+0x18>)
    1012:	4a04      	ldr	r2, [pc, #16]	; (1024 <RCC_ClearFlag+0x18>)
    1014:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1016:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    101a:	625a      	str	r2, [r3, #36]	; 0x24
}
    101c:	46bd      	mov	sp, r7
    101e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1022:	4770      	bx	lr
    1024:	40021000 	.word	0x40021000

00001028 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1028:	b480      	push	{r7}
    102a:	b085      	sub	sp, #20
    102c:	af00      	add	r7, sp, #0
    102e:	4603      	mov	r3, r0
    1030:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1032:	2300      	movs	r3, #0
    1034:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1036:	4b09      	ldr	r3, [pc, #36]	; (105c <RCC_GetITStatus+0x34>)
    1038:	689a      	ldr	r2, [r3, #8]
    103a:	79fb      	ldrb	r3, [r7, #7]
    103c:	4013      	ands	r3, r2
    103e:	2b00      	cmp	r3, #0
    1040:	d002      	beq.n	1048 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
    1042:	2301      	movs	r3, #1
    1044:	73fb      	strb	r3, [r7, #15]
    1046:	e001      	b.n	104c <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
    1048:	2300      	movs	r3, #0
    104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    104c:	7bfb      	ldrb	r3, [r7, #15]
}
    104e:	4618      	mov	r0, r3
    1050:	3714      	adds	r7, #20
    1052:	46bd      	mov	sp, r7
    1054:	f85d 7b04 	ldr.w	r7, [sp], #4
    1058:	4770      	bx	lr
    105a:	bf00      	nop
    105c:	40021000 	.word	0x40021000

00001060 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1060:	b480      	push	{r7}
    1062:	b083      	sub	sp, #12
    1064:	af00      	add	r7, sp, #0
    1066:	4603      	mov	r3, r0
    1068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    106a:	4b04      	ldr	r3, [pc, #16]	; (107c <RCC_ClearITPendingBit+0x1c>)
    106c:	79fa      	ldrb	r2, [r7, #7]
    106e:	701a      	strb	r2, [r3, #0]
}
    1070:	370c      	adds	r7, #12
    1072:	46bd      	mov	sp, r7
    1074:	f85d 7b04 	ldr.w	r7, [sp], #4
    1078:	4770      	bx	lr
    107a:	bf00      	nop
    107c:	4002100a 	.word	0x4002100a

00001080 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	4b2f      	ldr	r3, [pc, #188]	; (1148 <GPIO_DeInit+0xc8>)
    108c:	429a      	cmp	r2, r3
    108e:	d108      	bne.n	10a2 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1090:	2004      	movs	r0, #4
    1092:	2101      	movs	r1, #1
    1094:	f7ff ff14 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1098:	2004      	movs	r0, #4
    109a:	2100      	movs	r1, #0
    109c:	f7ff ff10 	bl	ec0 <RCC_APB2PeriphResetCmd>
    10a0:	e04e      	b.n	1140 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOB)
    10a2:	687a      	ldr	r2, [r7, #4]
    10a4:	4b29      	ldr	r3, [pc, #164]	; (114c <GPIO_DeInit+0xcc>)
    10a6:	429a      	cmp	r2, r3
    10a8:	d108      	bne.n	10bc <GPIO_DeInit+0x3c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    10aa:	2008      	movs	r0, #8
    10ac:	2101      	movs	r1, #1
    10ae:	f7ff ff07 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    10b2:	2008      	movs	r0, #8
    10b4:	2100      	movs	r1, #0
    10b6:	f7ff ff03 	bl	ec0 <RCC_APB2PeriphResetCmd>
    10ba:	e041      	b.n	1140 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOC)
    10bc:	687a      	ldr	r2, [r7, #4]
    10be:	4b24      	ldr	r3, [pc, #144]	; (1150 <GPIO_DeInit+0xd0>)
    10c0:	429a      	cmp	r2, r3
    10c2:	d108      	bne.n	10d6 <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10c4:	2010      	movs	r0, #16
    10c6:	2101      	movs	r1, #1
    10c8:	f7ff fefa 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10cc:	2010      	movs	r0, #16
    10ce:	2100      	movs	r1, #0
    10d0:	f7ff fef6 	bl	ec0 <RCC_APB2PeriphResetCmd>
    10d4:	e034      	b.n	1140 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOD)
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	4b1e      	ldr	r3, [pc, #120]	; (1154 <GPIO_DeInit+0xd4>)
    10da:	429a      	cmp	r2, r3
    10dc:	d108      	bne.n	10f0 <GPIO_DeInit+0x70>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2101      	movs	r1, #1
    10e2:	f7ff feed 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10e6:	2020      	movs	r0, #32
    10e8:	2100      	movs	r1, #0
    10ea:	f7ff fee9 	bl	ec0 <RCC_APB2PeriphResetCmd>
    10ee:	e027      	b.n	1140 <GPIO_DeInit+0xc0>
  }    
  else if (GPIOx == GPIOE)
    10f0:	687a      	ldr	r2, [r7, #4]
    10f2:	4b19      	ldr	r3, [pc, #100]	; (1158 <GPIO_DeInit+0xd8>)
    10f4:	429a      	cmp	r2, r3
    10f6:	d108      	bne.n	110a <GPIO_DeInit+0x8a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f8:	2040      	movs	r0, #64	; 0x40
    10fa:	2101      	movs	r1, #1
    10fc:	f7ff fee0 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    1100:	2040      	movs	r0, #64	; 0x40
    1102:	2100      	movs	r1, #0
    1104:	f7ff fedc 	bl	ec0 <RCC_APB2PeriphResetCmd>
    1108:	e01a      	b.n	1140 <GPIO_DeInit+0xc0>
  } 
  else if (GPIOx == GPIOF)
    110a:	687a      	ldr	r2, [r7, #4]
    110c:	4b13      	ldr	r3, [pc, #76]	; (115c <GPIO_DeInit+0xdc>)
    110e:	429a      	cmp	r2, r3
    1110:	d108      	bne.n	1124 <GPIO_DeInit+0xa4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1112:	2080      	movs	r0, #128	; 0x80
    1114:	2101      	movs	r1, #1
    1116:	f7ff fed3 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111a:	2080      	movs	r0, #128	; 0x80
    111c:	2100      	movs	r1, #0
    111e:	f7ff fecf 	bl	ec0 <RCC_APB2PeriphResetCmd>
    1122:	e00d      	b.n	1140 <GPIO_DeInit+0xc0>
  }
  else
  {
    if (GPIOx == GPIOG)
    1124:	687a      	ldr	r2, [r7, #4]
    1126:	4b0e      	ldr	r3, [pc, #56]	; (1160 <GPIO_DeInit+0xe0>)
    1128:	429a      	cmp	r2, r3
    112a:	d109      	bne.n	1140 <GPIO_DeInit+0xc0>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    112c:	f44f 7080 	mov.w	r0, #256	; 0x100
    1130:	2101      	movs	r1, #1
    1132:	f7ff fec5 	bl	ec0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2100      	movs	r1, #0
    113c:	f7ff fec0 	bl	ec0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    1140:	3708      	adds	r7, #8
    1142:	46bd      	mov	sp, r7
    1144:	bd80      	pop	{r7, pc}
    1146:	bf00      	nop
    1148:	40010800 	.word	0x40010800
    114c:	40010c00 	.word	0x40010c00
    1150:	40011000 	.word	0x40011000
    1154:	40011400 	.word	0x40011400
    1158:	40011800 	.word	0x40011800
    115c:	40011c00 	.word	0x40011c00
    1160:	40012000 	.word	0x40012000

00001164 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1164:	b580      	push	{r7, lr}
    1166:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1168:	2001      	movs	r0, #1
    116a:	2101      	movs	r1, #1
    116c:	f7ff fea8 	bl	ec0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1170:	2001      	movs	r0, #1
    1172:	2100      	movs	r1, #0
    1174:	f7ff fea4 	bl	ec0 <RCC_APB2PeriphResetCmd>
}
    1178:	bd80      	pop	{r7, pc}
    117a:	bf00      	nop

0000117c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    117c:	b480      	push	{r7}
    117e:	b089      	sub	sp, #36	; 0x24
    1180:	af00      	add	r7, sp, #0
    1182:	6078      	str	r0, [r7, #4]
    1184:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1186:	2300      	movs	r3, #0
    1188:	61fb      	str	r3, [r7, #28]
    118a:	2300      	movs	r3, #0
    118c:	613b      	str	r3, [r7, #16]
    118e:	2300      	movs	r3, #0
    1190:	61bb      	str	r3, [r7, #24]
    1192:	2300      	movs	r3, #0
    1194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1196:	2300      	movs	r3, #0
    1198:	617b      	str	r3, [r7, #20]
    119a:	2300      	movs	r3, #0
    119c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    119e:	683b      	ldr	r3, [r7, #0]
    11a0:	78db      	ldrb	r3, [r3, #3]
    11a2:	f003 030f 	and.w	r3, r3, #15
    11a6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    11a8:	683b      	ldr	r3, [r7, #0]
    11aa:	78db      	ldrb	r3, [r3, #3]
    11ac:	f003 0310 	and.w	r3, r3, #16
    11b0:	2b00      	cmp	r3, #0
    11b2:	d004      	beq.n	11be <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11b4:	683b      	ldr	r3, [r7, #0]
    11b6:	789b      	ldrb	r3, [r3, #2]
    11b8:	69fa      	ldr	r2, [r7, #28]
    11ba:	4313      	orrs	r3, r2
    11bc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11be:	683b      	ldr	r3, [r7, #0]
    11c0:	881b      	ldrh	r3, [r3, #0]
    11c2:	b2db      	uxtb	r3, r3
    11c4:	2b00      	cmp	r3, #0
    11c6:	d044      	beq.n	1252 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	681b      	ldr	r3, [r3, #0]
    11cc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ce:	2300      	movs	r3, #0
    11d0:	61bb      	str	r3, [r7, #24]
    11d2:	e038      	b.n	1246 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11d4:	69bb      	ldr	r3, [r7, #24]
    11d6:	2201      	movs	r2, #1
    11d8:	fa02 f303 	lsl.w	r3, r2, r3
    11dc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11de:	683b      	ldr	r3, [r7, #0]
    11e0:	881b      	ldrh	r3, [r3, #0]
    11e2:	461a      	mov	r2, r3
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	4013      	ands	r3, r2
    11e8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11ea:	693a      	ldr	r2, [r7, #16]
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	429a      	cmp	r2, r3
    11f0:	d126      	bne.n	1240 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11f2:	69bb      	ldr	r3, [r7, #24]
    11f4:	009b      	lsls	r3, r3, #2
    11f6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	220f      	movs	r2, #15
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1202:	68bb      	ldr	r3, [r7, #8]
    1204:	43db      	mvns	r3, r3
    1206:	697a      	ldr	r2, [r7, #20]
    1208:	4013      	ands	r3, r2
    120a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    120c:	68fb      	ldr	r3, [r7, #12]
    120e:	69fa      	ldr	r2, [r7, #28]
    1210:	fa02 f303 	lsl.w	r3, r2, r3
    1214:	697a      	ldr	r2, [r7, #20]
    1216:	4313      	orrs	r3, r2
    1218:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b28      	cmp	r3, #40	; 0x28
    1220:	d105      	bne.n	122e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	615a      	str	r2, [r3, #20]
    122c:	e008      	b.n	1240 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    122e:	683b      	ldr	r3, [r7, #0]
    1230:	78db      	ldrb	r3, [r3, #3]
    1232:	2b48      	cmp	r3, #72	; 0x48
    1234:	d104      	bne.n	1240 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1236:	69bb      	ldr	r3, [r7, #24]
    1238:	2201      	movs	r2, #1
    123a:	409a      	lsls	r2, r3
    123c:	687b      	ldr	r3, [r7, #4]
    123e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1240:	69bb      	ldr	r3, [r7, #24]
    1242:	3301      	adds	r3, #1
    1244:	61bb      	str	r3, [r7, #24]
    1246:	69bb      	ldr	r3, [r7, #24]
    1248:	2b07      	cmp	r3, #7
    124a:	d9c3      	bls.n	11d4 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	697a      	ldr	r2, [r7, #20]
    1250:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	881b      	ldrh	r3, [r3, #0]
    1256:	2bff      	cmp	r3, #255	; 0xff
    1258:	d946      	bls.n	12e8 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	685b      	ldr	r3, [r3, #4]
    125e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1260:	2300      	movs	r3, #0
    1262:	61bb      	str	r3, [r7, #24]
    1264:	e03a      	b.n	12dc <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1266:	69bb      	ldr	r3, [r7, #24]
    1268:	3308      	adds	r3, #8
    126a:	2201      	movs	r2, #1
    126c:	fa02 f303 	lsl.w	r3, r2, r3
    1270:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1272:	683b      	ldr	r3, [r7, #0]
    1274:	881b      	ldrh	r3, [r3, #0]
    1276:	461a      	mov	r2, r3
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	4013      	ands	r3, r2
    127c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    127e:	693a      	ldr	r2, [r7, #16]
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	429a      	cmp	r2, r3
    1284:	d127      	bne.n	12d6 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1286:	69bb      	ldr	r3, [r7, #24]
    1288:	009b      	lsls	r3, r3, #2
    128a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	220f      	movs	r2, #15
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1296:	68bb      	ldr	r3, [r7, #8]
    1298:	43db      	mvns	r3, r3
    129a:	697a      	ldr	r2, [r7, #20]
    129c:	4013      	ands	r3, r2
    129e:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    12a0:	68fb      	ldr	r3, [r7, #12]
    12a2:	69fa      	ldr	r2, [r7, #28]
    12a4:	fa02 f303 	lsl.w	r3, r2, r3
    12a8:	697a      	ldr	r2, [r7, #20]
    12aa:	4313      	orrs	r3, r2
    12ac:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b28      	cmp	r3, #40	; 0x28
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12c2:	683b      	ldr	r3, [r7, #0]
    12c4:	78db      	ldrb	r3, [r3, #3]
    12c6:	2b48      	cmp	r3, #72	; 0x48
    12c8:	d105      	bne.n	12d6 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12ca:	69bb      	ldr	r3, [r7, #24]
    12cc:	3308      	adds	r3, #8
    12ce:	2201      	movs	r2, #1
    12d0:	409a      	lsls	r2, r3
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12d6:	69bb      	ldr	r3, [r7, #24]
    12d8:	3301      	adds	r3, #1
    12da:	61bb      	str	r3, [r7, #24]
    12dc:	69bb      	ldr	r3, [r7, #24]
    12de:	2b07      	cmp	r3, #7
    12e0:	d9c1      	bls.n	1266 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	697a      	ldr	r2, [r7, #20]
    12e6:	605a      	str	r2, [r3, #4]
  }
}
    12e8:	3724      	adds	r7, #36	; 0x24
    12ea:	46bd      	mov	sp, r7
    12ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f0:	4770      	bx	lr
    12f2:	bf00      	nop

000012f4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12f4:	b480      	push	{r7}
    12f6:	b083      	sub	sp, #12
    12f8:	af00      	add	r7, sp, #0
    12fa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1302:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	2202      	movs	r2, #2
    1308:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	2204      	movs	r2, #4
    130e:	70da      	strb	r2, [r3, #3]
}
    1310:	370c      	adds	r7, #12
    1312:	46bd      	mov	sp, r7
    1314:	f85d 7b04 	ldr.w	r7, [sp], #4
    1318:	4770      	bx	lr
    131a:	bf00      	nop

0000131c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    131c:	b480      	push	{r7}
    131e:	b085      	sub	sp, #20
    1320:	af00      	add	r7, sp, #0
    1322:	6078      	str	r0, [r7, #4]
    1324:	460b      	mov	r3, r1
    1326:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1328:	2300      	movs	r3, #0
    132a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	689a      	ldr	r2, [r3, #8]
    1330:	887b      	ldrh	r3, [r7, #2]
    1332:	4013      	ands	r3, r2
    1334:	2b00      	cmp	r3, #0
    1336:	d002      	beq.n	133e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1338:	2301      	movs	r3, #1
    133a:	73fb      	strb	r3, [r7, #15]
    133c:	e001      	b.n	1342 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    133e:	2300      	movs	r3, #0
    1340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1342:	7bfb      	ldrb	r3, [r7, #15]
}
    1344:	4618      	mov	r0, r3
    1346:	3714      	adds	r7, #20
    1348:	46bd      	mov	sp, r7
    134a:	f85d 7b04 	ldr.w	r7, [sp], #4
    134e:	4770      	bx	lr

00001350 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1350:	b480      	push	{r7}
    1352:	b083      	sub	sp, #12
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	689b      	ldr	r3, [r3, #8]
    135c:	b29b      	uxth	r3, r3
}
    135e:	4618      	mov	r0, r3
    1360:	370c      	adds	r7, #12
    1362:	46bd      	mov	sp, r7
    1364:	f85d 7b04 	ldr.w	r7, [sp], #4
    1368:	4770      	bx	lr
    136a:	bf00      	nop

0000136c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    136c:	b480      	push	{r7}
    136e:	b085      	sub	sp, #20
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	460b      	mov	r3, r1
    1376:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1378:	2300      	movs	r3, #0
    137a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	68da      	ldr	r2, [r3, #12]
    1380:	887b      	ldrh	r3, [r7, #2]
    1382:	4013      	ands	r3, r2
    1384:	2b00      	cmp	r3, #0
    1386:	d002      	beq.n	138e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1388:	2301      	movs	r3, #1
    138a:	73fb      	strb	r3, [r7, #15]
    138c:	e001      	b.n	1392 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    138e:	2300      	movs	r3, #0
    1390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1392:	7bfb      	ldrb	r3, [r7, #15]
}
    1394:	4618      	mov	r0, r3
    1396:	3714      	adds	r7, #20
    1398:	46bd      	mov	sp, r7
    139a:	f85d 7b04 	ldr.w	r7, [sp], #4
    139e:	4770      	bx	lr

000013a0 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    13a0:	b480      	push	{r7}
    13a2:	b083      	sub	sp, #12
    13a4:	af00      	add	r7, sp, #0
    13a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	68db      	ldr	r3, [r3, #12]
    13ac:	b29b      	uxth	r3, r3
}
    13ae:	4618      	mov	r0, r3
    13b0:	370c      	adds	r7, #12
    13b2:	46bd      	mov	sp, r7
    13b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b8:	4770      	bx	lr
    13ba:	bf00      	nop

000013bc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13bc:	b480      	push	{r7}
    13be:	b083      	sub	sp, #12
    13c0:	af00      	add	r7, sp, #0
    13c2:	6078      	str	r0, [r7, #4]
    13c4:	460b      	mov	r3, r1
    13c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    13c8:	887a      	ldrh	r2, [r7, #2]
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	611a      	str	r2, [r3, #16]
}
    13ce:	370c      	adds	r7, #12
    13d0:	46bd      	mov	sp, r7
    13d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d6:	4770      	bx	lr

000013d8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13d8:	b480      	push	{r7}
    13da:	b083      	sub	sp, #12
    13dc:	af00      	add	r7, sp, #0
    13de:	6078      	str	r0, [r7, #4]
    13e0:	460b      	mov	r3, r1
    13e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    13e4:	887a      	ldrh	r2, [r7, #2]
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	615a      	str	r2, [r3, #20]
}
    13ea:	370c      	adds	r7, #12
    13ec:	46bd      	mov	sp, r7
    13ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f2:	4770      	bx	lr

000013f4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13f4:	b480      	push	{r7}
    13f6:	b083      	sub	sp, #12
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	4613      	mov	r3, r2
    13fe:	460a      	mov	r2, r1
    1400:	807a      	strh	r2, [r7, #2]
    1402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1404:	787b      	ldrb	r3, [r7, #1]
    1406:	2b00      	cmp	r3, #0
    1408:	d003      	beq.n	1412 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    140a:	887a      	ldrh	r2, [r7, #2]
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	611a      	str	r2, [r3, #16]
    1410:	e002      	b.n	1418 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1412:	887a      	ldrh	r2, [r7, #2]
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	615a      	str	r2, [r3, #20]
  }
}
    1418:	370c      	adds	r7, #12
    141a:	46bd      	mov	sp, r7
    141c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1420:	4770      	bx	lr
    1422:	bf00      	nop

00001424 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1424:	b480      	push	{r7}
    1426:	b083      	sub	sp, #12
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    142c:	460b      	mov	r3, r1
    142e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1430:	887a      	ldrh	r2, [r7, #2]
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	60da      	str	r2, [r3, #12]
}
    1436:	370c      	adds	r7, #12
    1438:	46bd      	mov	sp, r7
    143a:	f85d 7b04 	ldr.w	r7, [sp], #4
    143e:	4770      	bx	lr

00001440 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1440:	b480      	push	{r7}
    1442:	b085      	sub	sp, #20
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
    1448:	460b      	mov	r3, r1
    144a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1450:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1452:	887b      	ldrh	r3, [r7, #2]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	4313      	orrs	r3, r2
    1458:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	68fa      	ldr	r2, [r7, #12]
    145e:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1460:	887a      	ldrh	r2, [r7, #2]
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	68fa      	ldr	r2, [r7, #12]
    146a:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	699b      	ldr	r3, [r3, #24]
    1470:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1472:	687b      	ldr	r3, [r7, #4]
    1474:	699b      	ldr	r3, [r3, #24]
    1476:	60fb      	str	r3, [r7, #12]
}
    1478:	3714      	adds	r7, #20
    147a:	46bd      	mov	sp, r7
    147c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1480:	4770      	bx	lr
    1482:	bf00      	nop

00001484 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1484:	b480      	push	{r7}
    1486:	b085      	sub	sp, #20
    1488:	af00      	add	r7, sp, #0
    148a:	4602      	mov	r2, r0
    148c:	460b      	mov	r3, r1
    148e:	71fa      	strb	r2, [r7, #7]
    1490:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1492:	2300      	movs	r3, #0
    1494:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    1496:	4b0c      	ldr	r3, [pc, #48]	; (14c8 <GPIO_EventOutputConfig+0x44>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    149c:	68fa      	ldr	r2, [r7, #12]
    149e:	f64f 7380 	movw	r3, #65408	; 0xff80
    14a2:	4013      	ands	r3, r2
    14a4:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    14a6:	79fb      	ldrb	r3, [r7, #7]
    14a8:	011b      	lsls	r3, r3, #4
    14aa:	68fa      	ldr	r2, [r7, #12]
    14ac:	4313      	orrs	r3, r2
    14ae:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14b0:	79bb      	ldrb	r3, [r7, #6]
    14b2:	68fa      	ldr	r2, [r7, #12]
    14b4:	4313      	orrs	r3, r2
    14b6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14b8:	4b03      	ldr	r3, [pc, #12]	; (14c8 <GPIO_EventOutputConfig+0x44>)
    14ba:	68fa      	ldr	r2, [r7, #12]
    14bc:	601a      	str	r2, [r3, #0]
}
    14be:	3714      	adds	r7, #20
    14c0:	46bd      	mov	sp, r7
    14c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14c6:	4770      	bx	lr
    14c8:	40010000 	.word	0x40010000

000014cc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14cc:	b480      	push	{r7}
    14ce:	b083      	sub	sp, #12
    14d0:	af00      	add	r7, sp, #0
    14d2:	4603      	mov	r3, r0
    14d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14d6:	4b04      	ldr	r3, [pc, #16]	; (14e8 <GPIO_EventOutputCmd+0x1c>)
    14d8:	79fa      	ldrb	r2, [r7, #7]
    14da:	601a      	str	r2, [r3, #0]
}
    14dc:	370c      	adds	r7, #12
    14de:	46bd      	mov	sp, r7
    14e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	4220001c 	.word	0x4220001c

000014ec <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14ec:	b480      	push	{r7}
    14ee:	b087      	sub	sp, #28
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
    14f4:	460b      	mov	r3, r1
    14f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14f8:	2300      	movs	r3, #0
    14fa:	613b      	str	r3, [r7, #16]
    14fc:	2300      	movs	r3, #0
    14fe:	60fb      	str	r3, [r7, #12]
    1500:	2300      	movs	r3, #0
    1502:	617b      	str	r3, [r7, #20]
    1504:	2300      	movs	r3, #0
    1506:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	2b00      	cmp	r3, #0
    150c:	da03      	bge.n	1516 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
    150e:	4b2e      	ldr	r3, [pc, #184]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    1510:	69db      	ldr	r3, [r3, #28]
    1512:	617b      	str	r3, [r7, #20]
    1514:	e002      	b.n	151c <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1516:	4b2c      	ldr	r3, [pc, #176]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    1518:	685b      	ldr	r3, [r3, #4]
    151a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1522:	0c1b      	lsrs	r3, r3, #16
    1524:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	b29b      	uxth	r3, r3
    152a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1536:	d10a      	bne.n	154e <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1538:	697b      	ldr	r3, [r7, #20]
    153a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    153e:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1540:	4b21      	ldr	r3, [pc, #132]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    1542:	4a21      	ldr	r2, [pc, #132]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da03      	bge.n	15b8 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    15b2:	697a      	ldr	r2, [r7, #20]
    15b4:	61da      	str	r2, [r3, #28]
    15b6:	e002      	b.n	15be <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <GPIO_PinRemapConfig+0xdc>)
    15ba:	697a      	ldr	r2, [r7, #20]
    15bc:	605a      	str	r2, [r3, #4]
  }  
}
    15be:	371c      	adds	r7, #28
    15c0:	46bd      	mov	sp, r7
    15c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    15c6:	4770      	bx	lr
    15c8:	40010000 	.word	0x40010000

000015cc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15cc:	b490      	push	{r4, r7}
    15ce:	b084      	sub	sp, #16
    15d0:	af00      	add	r7, sp, #0
    15d2:	4602      	mov	r2, r0
    15d4:	460b      	mov	r3, r1
    15d6:	71fa      	strb	r2, [r7, #7]
    15d8:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15da:	2300      	movs	r3, #0
    15dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15de:	79bb      	ldrb	r3, [r7, #6]
    15e0:	f003 0303 	and.w	r3, r3, #3
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	220f      	movs	r2, #15
    15e8:	fa02 f303 	lsl.w	r3, r2, r3
    15ec:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15ee:	4b15      	ldr	r3, [pc, #84]	; (1644 <GPIO_EXTILineConfig+0x78>)
    15f0:	79ba      	ldrb	r2, [r7, #6]
    15f2:	0892      	lsrs	r2, r2, #2
    15f4:	b2d2      	uxtb	r2, r2
    15f6:	4913      	ldr	r1, [pc, #76]	; (1644 <GPIO_EXTILineConfig+0x78>)
    15f8:	79b8      	ldrb	r0, [r7, #6]
    15fa:	0880      	lsrs	r0, r0, #2
    15fc:	b2c0      	uxtb	r0, r0
    15fe:	3002      	adds	r0, #2
    1600:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1604:	68f9      	ldr	r1, [r7, #12]
    1606:	43c9      	mvns	r1, r1
    1608:	4001      	ands	r1, r0
    160a:	3202      	adds	r2, #2
    160c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1610:	4b0c      	ldr	r3, [pc, #48]	; (1644 <GPIO_EXTILineConfig+0x78>)
    1612:	79ba      	ldrb	r2, [r7, #6]
    1614:	0892      	lsrs	r2, r2, #2
    1616:	b2d2      	uxtb	r2, r2
    1618:	490a      	ldr	r1, [pc, #40]	; (1644 <GPIO_EXTILineConfig+0x78>)
    161a:	79b8      	ldrb	r0, [r7, #6]
    161c:	0880      	lsrs	r0, r0, #2
    161e:	b2c0      	uxtb	r0, r0
    1620:	3002      	adds	r0, #2
    1622:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1626:	79fc      	ldrb	r4, [r7, #7]
    1628:	79b9      	ldrb	r1, [r7, #6]
    162a:	f001 0103 	and.w	r1, r1, #3
    162e:	0089      	lsls	r1, r1, #2
    1630:	fa04 f101 	lsl.w	r1, r4, r1
    1634:	4301      	orrs	r1, r0
    1636:	3202      	adds	r2, #2
    1638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    163c:	3710      	adds	r7, #16
    163e:	46bd      	mov	sp, r7
    1640:	bc90      	pop	{r4, r7}
    1642:	4770      	bx	lr
    1644:	40010000 	.word	0x40010000

00001648 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    1648:	b480      	push	{r7}
    164a:	b083      	sub	sp, #12
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    1650:	4b03      	ldr	r3, [pc, #12]	; (1660 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1652:	687a      	ldr	r2, [r7, #4]
    1654:	601a      	str	r2, [r3, #0]
}
    1656:	370c      	adds	r7, #12
    1658:	46bd      	mov	sp, r7
    165a:	f85d 7b04 	ldr.w	r7, [sp], #4
    165e:	4770      	bx	lr
    1660:	422000dc 	.word	0x422000dc

00001664 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    166c:	687a      	ldr	r2, [r7, #4]
    166e:	4b26      	ldr	r3, [pc, #152]	; (1708 <USART_DeInit+0xa4>)
    1670:	429a      	cmp	r2, r3
    1672:	d10a      	bne.n	168a <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    1674:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1678:	2101      	movs	r1, #1
    167a:	f7ff fc21 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    167e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1682:	2100      	movs	r1, #0
    1684:	f7ff fc1c 	bl	ec0 <RCC_APB2PeriphResetCmd>
    1688:	e03a      	b.n	1700 <USART_DeInit+0x9c>
  }
  else if (USARTx == USART2)
    168a:	687a      	ldr	r2, [r7, #4]
    168c:	4b1f      	ldr	r3, [pc, #124]	; (170c <USART_DeInit+0xa8>)
    168e:	429a      	cmp	r2, r3
    1690:	d10a      	bne.n	16a8 <USART_DeInit+0x44>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1692:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1696:	2101      	movs	r1, #1
    1698:	f7ff fc30 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    169c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16a0:	2100      	movs	r1, #0
    16a2:	f7ff fc2b 	bl	efc <RCC_APB1PeriphResetCmd>
    16a6:	e02b      	b.n	1700 <USART_DeInit+0x9c>
  }
  else if (USARTx == USART3)
    16a8:	687a      	ldr	r2, [r7, #4]
    16aa:	4b19      	ldr	r3, [pc, #100]	; (1710 <USART_DeInit+0xac>)
    16ac:	429a      	cmp	r2, r3
    16ae:	d10a      	bne.n	16c6 <USART_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16b4:	2101      	movs	r1, #1
    16b6:	f7ff fc21 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16be:	2100      	movs	r1, #0
    16c0:	f7ff fc1c 	bl	efc <RCC_APB1PeriphResetCmd>
    16c4:	e01c      	b.n	1700 <USART_DeInit+0x9c>
  }    
  else if (USARTx == UART4)
    16c6:	687a      	ldr	r2, [r7, #4]
    16c8:	4b12      	ldr	r3, [pc, #72]	; (1714 <USART_DeInit+0xb0>)
    16ca:	429a      	cmp	r2, r3
    16cc:	d10a      	bne.n	16e4 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16d2:	2101      	movs	r1, #1
    16d4:	f7ff fc12 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    16d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16dc:	2100      	movs	r1, #0
    16de:	f7ff fc0d 	bl	efc <RCC_APB1PeriphResetCmd>
    16e2:	e00d      	b.n	1700 <USART_DeInit+0x9c>
  }    
  else
  {
    if (USARTx == UART5)
    16e4:	687a      	ldr	r2, [r7, #4]
    16e6:	4b0c      	ldr	r3, [pc, #48]	; (1718 <USART_DeInit+0xb4>)
    16e8:	429a      	cmp	r2, r3
    16ea:	d109      	bne.n	1700 <USART_DeInit+0x9c>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    16ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    16f0:	2101      	movs	r1, #1
    16f2:	f7ff fc03 	bl	efc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    16f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    16fa:	2100      	movs	r1, #0
    16fc:	f7ff fbfe 	bl	efc <RCC_APB1PeriphResetCmd>
    }
  }
}
    1700:	3708      	adds	r7, #8
    1702:	46bd      	mov	sp, r7
    1704:	bd80      	pop	{r7, pc}
    1706:	bf00      	nop
    1708:	40013800 	.word	0x40013800
    170c:	40004400 	.word	0x40004400
    1710:	40004800 	.word	0x40004800
    1714:	40004c00 	.word	0x40004c00
    1718:	40005000 	.word	0x40005000

0000171c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    171c:	b580      	push	{r7, lr}
    171e:	b08c      	sub	sp, #48	; 0x30
    1720:	af00      	add	r7, sp, #0
    1722:	6078      	str	r0, [r7, #4]
    1724:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1726:	2300      	movs	r3, #0
    1728:	62fb      	str	r3, [r7, #44]	; 0x2c
    172a:	2300      	movs	r3, #0
    172c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    172e:	2300      	movs	r3, #0
    1730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    1732:	2300      	movs	r3, #0
    1734:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1736:	2300      	movs	r3, #0
    1738:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	8a1b      	ldrh	r3, [r3, #16]
    1742:	b29b      	uxth	r3, r3
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1748:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    174c:	4013      	ands	r3, r2
    174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	88db      	ldrh	r3, [r3, #6]
    1754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1756:	4313      	orrs	r3, r2
    1758:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    175c:	b29a      	uxth	r2, r3
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	899b      	ldrh	r3, [r3, #12]
    1766:	b29b      	uxth	r3, r3
    1768:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    176a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    176c:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    1770:	4013      	ands	r3, r2
    1772:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1774:	683b      	ldr	r3, [r7, #0]
    1776:	889a      	ldrh	r2, [r3, #4]
    1778:	683b      	ldr	r3, [r7, #0]
    177a:	891b      	ldrh	r3, [r3, #8]
    177c:	4313      	orrs	r3, r2
    177e:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    1780:	683b      	ldr	r3, [r7, #0]
    1782:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1784:	4313      	orrs	r3, r2
    1786:	b29b      	uxth	r3, r3
    1788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    178a:	4313      	orrs	r3, r2
    178c:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1790:	b29a      	uxth	r2, r3
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	8a9b      	ldrh	r3, [r3, #20]
    179a:	b29b      	uxth	r3, r3
    179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17a4:	4013      	ands	r3, r2
    17a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17a8:	683b      	ldr	r3, [r7, #0]
    17aa:	899b      	ldrh	r3, [r3, #12]
    17ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ae:	4313      	orrs	r3, r2
    17b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17b4:	b29a      	uxth	r2, r3
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17ba:	f107 0308 	add.w	r3, r7, #8
    17be:	4618      	mov	r0, r3
    17c0:	f7ff fa72 	bl	ca8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17c4:	69fa      	ldr	r2, [r7, #28]
    17c6:	4b30      	ldr	r3, [pc, #192]	; (1888 <USART_Init+0x16c>)
    17c8:	429a      	cmp	r2, r3
    17ca:	d102      	bne.n	17d2 <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17cc:	697b      	ldr	r3, [r7, #20]
    17ce:	62bb      	str	r3, [r7, #40]	; 0x28
    17d0:	e001      	b.n	17d6 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17d2:	693b      	ldr	r3, [r7, #16]
    17d4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	899b      	ldrh	r3, [r3, #12]
    17da:	b29b      	uxth	r3, r3
    17dc:	b29b      	uxth	r3, r3
    17de:	b21b      	sxth	r3, r3
    17e0:	2b00      	cmp	r3, #0
    17e2:	da0c      	bge.n	17fe <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    17e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    17e6:	4613      	mov	r3, r2
    17e8:	009b      	lsls	r3, r3, #2
    17ea:	4413      	add	r3, r2
    17ec:	009a      	lsls	r2, r3, #2
    17ee:	441a      	add	r2, r3
    17f0:	683b      	ldr	r3, [r7, #0]
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	005b      	lsls	r3, r3, #1
    17f6:	fbb2 f3f3 	udiv	r3, r2, r3
    17fa:	627b      	str	r3, [r7, #36]	; 0x24
    17fc:	e00b      	b.n	1816 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    17fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1800:	4613      	mov	r3, r2
    1802:	009b      	lsls	r3, r3, #2
    1804:	4413      	add	r3, r2
    1806:	009a      	lsls	r2, r3, #2
    1808:	441a      	add	r2, r3
    180a:	683b      	ldr	r3, [r7, #0]
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	009b      	lsls	r3, r3, #2
    1810:	fbb2 f3f3 	udiv	r3, r2, r3
    1814:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1818:	4b1c      	ldr	r3, [pc, #112]	; (188c <USART_Init+0x170>)
    181a:	fba3 1302 	umull	r1, r3, r3, r2
    181e:	095b      	lsrs	r3, r3, #5
    1820:	011b      	lsls	r3, r3, #4
    1822:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1826:	091b      	lsrs	r3, r3, #4
    1828:	2264      	movs	r2, #100	; 0x64
    182a:	fb02 f303 	mul.w	r3, r2, r3
    182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1830:	1ad3      	subs	r3, r2, r3
    1832:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	899b      	ldrh	r3, [r3, #12]
    1838:	b29b      	uxth	r3, r3
    183a:	b29b      	uxth	r3, r3
    183c:	b21b      	sxth	r3, r3
    183e:	2b00      	cmp	r3, #0
    1840:	da0d      	bge.n	185e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1842:	6a3b      	ldr	r3, [r7, #32]
    1844:	00db      	lsls	r3, r3, #3
    1846:	f103 0232 	add.w	r2, r3, #50	; 0x32
    184a:	4b10      	ldr	r3, [pc, #64]	; (188c <USART_Init+0x170>)
    184c:	fba3 1302 	umull	r1, r3, r3, r2
    1850:	095b      	lsrs	r3, r3, #5
    1852:	f003 0307 	and.w	r3, r3, #7
    1856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1858:	4313      	orrs	r3, r2
    185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    185c:	e00c      	b.n	1878 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    185e:	6a3b      	ldr	r3, [r7, #32]
    1860:	011b      	lsls	r3, r3, #4
    1862:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1866:	4b09      	ldr	r3, [pc, #36]	; (188c <USART_Init+0x170>)
    1868:	fba3 1302 	umull	r1, r3, r3, r2
    186c:	095b      	lsrs	r3, r3, #5
    186e:	f003 030f 	and.w	r3, r3, #15
    1872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1874:	4313      	orrs	r3, r2
    1876:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    187a:	b29a      	uxth	r2, r3
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	811a      	strh	r2, [r3, #8]
}
    1880:	3730      	adds	r7, #48	; 0x30
    1882:	46bd      	mov	sp, r7
    1884:	bd80      	pop	{r7, pc}
    1886:	bf00      	nop
    1888:	40013800 	.word	0x40013800
    188c:	51eb851f 	.word	0x51eb851f

00001890 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1890:	b480      	push	{r7}
    1892:	b083      	sub	sp, #12
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    189e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	2200      	movs	r2, #0
    18a4:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	2200      	movs	r2, #0
    18aa:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	2200      	movs	r2, #0
    18b0:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	220c      	movs	r2, #12
    18b6:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	2200      	movs	r2, #0
    18bc:	819a      	strh	r2, [r3, #12]
}
    18be:	370c      	adds	r7, #12
    18c0:	46bd      	mov	sp, r7
    18c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18c6:	4770      	bx	lr

000018c8 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18c8:	b480      	push	{r7}
    18ca:	b085      	sub	sp, #20
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
    18d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18d2:	2300      	movs	r3, #0
    18d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	8a1b      	ldrh	r3, [r3, #16]
    18da:	b29b      	uxth	r3, r3
    18dc:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    18de:	68fa      	ldr	r2, [r7, #12]
    18e0:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    18e4:	4013      	ands	r3, r2
    18e6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    18e8:	683b      	ldr	r3, [r7, #0]
    18ea:	881a      	ldrh	r2, [r3, #0]
    18ec:	683b      	ldr	r3, [r7, #0]
    18ee:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    18f0:	4313      	orrs	r3, r2
    18f2:	b29a      	uxth	r2, r3
    18f4:	683b      	ldr	r3, [r7, #0]
    18f6:	889b      	ldrh	r3, [r3, #4]
    18f8:	4313      	orrs	r3, r2
    18fa:	b29a      	uxth	r2, r3
    18fc:	683b      	ldr	r3, [r7, #0]
    18fe:	88db      	ldrh	r3, [r3, #6]
    1900:	4313      	orrs	r3, r2
    1902:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1904:	68fa      	ldr	r2, [r7, #12]
    1906:	4313      	orrs	r3, r2
    1908:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    190a:	68fb      	ldr	r3, [r7, #12]
    190c:	b29a      	uxth	r2, r3
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	821a      	strh	r2, [r3, #16]
}
    1912:	3714      	adds	r7, #20
    1914:	46bd      	mov	sp, r7
    1916:	f85d 7b04 	ldr.w	r7, [sp], #4
    191a:	4770      	bx	lr

0000191c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    191c:	b480      	push	{r7}
    191e:	b083      	sub	sp, #12
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	2200      	movs	r2, #0
    1928:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	2200      	movs	r2, #0
    192e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	2200      	movs	r2, #0
    1934:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1936:	687b      	ldr	r3, [r7, #4]
    1938:	2200      	movs	r2, #0
    193a:	80da      	strh	r2, [r3, #6]
}
    193c:	370c      	adds	r7, #12
    193e:	46bd      	mov	sp, r7
    1940:	f85d 7b04 	ldr.w	r7, [sp], #4
    1944:	4770      	bx	lr
    1946:	bf00      	nop

00001948 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
    1950:	460b      	mov	r3, r1
    1952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1954:	78fb      	ldrb	r3, [r7, #3]
    1956:	2b00      	cmp	r3, #0
    1958:	d008      	beq.n	196c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	899b      	ldrh	r3, [r3, #12]
    195e:	b29b      	uxth	r3, r3
    1960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1964:	b29a      	uxth	r2, r3
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	819a      	strh	r2, [r3, #12]
    196a:	e007      	b.n	197c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	899b      	ldrh	r3, [r3, #12]
    1970:	b29b      	uxth	r3, r3
    1972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1976:	b29a      	uxth	r2, r3
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	819a      	strh	r2, [r3, #12]
  }
}
    197c:	370c      	adds	r7, #12
    197e:	46bd      	mov	sp, r7
    1980:	f85d 7b04 	ldr.w	r7, [sp], #4
    1984:	4770      	bx	lr
    1986:	bf00      	nop

00001988 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1988:	b480      	push	{r7}
    198a:	b087      	sub	sp, #28
    198c:	af00      	add	r7, sp, #0
    198e:	6078      	str	r0, [r7, #4]
    1990:	4613      	mov	r3, r2
    1992:	460a      	mov	r2, r1
    1994:	807a      	strh	r2, [r7, #2]
    1996:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1998:	2300      	movs	r3, #0
    199a:	613b      	str	r3, [r7, #16]
    199c:	2300      	movs	r3, #0
    199e:	60fb      	str	r3, [r7, #12]
    19a0:	2300      	movs	r3, #0
    19a2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19a4:	2300      	movs	r3, #0
    19a6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19ac:	887b      	ldrh	r3, [r7, #2]
    19ae:	b2db      	uxtb	r3, r3
    19b0:	095b      	lsrs	r3, r3, #5
    19b2:	b2db      	uxtb	r3, r3
    19b4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19b6:	887b      	ldrh	r3, [r7, #2]
    19b8:	f003 031f 	and.w	r3, r3, #31
    19bc:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19be:	68fb      	ldr	r3, [r7, #12]
    19c0:	2201      	movs	r2, #1
    19c2:	fa02 f303 	lsl.w	r3, r2, r3
    19c6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    19c8:	693b      	ldr	r3, [r7, #16]
    19ca:	2b01      	cmp	r3, #1
    19cc:	d103      	bne.n	19d6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19ce:	697b      	ldr	r3, [r7, #20]
    19d0:	330c      	adds	r3, #12
    19d2:	617b      	str	r3, [r7, #20]
    19d4:	e009      	b.n	19ea <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    19d6:	693b      	ldr	r3, [r7, #16]
    19d8:	2b02      	cmp	r3, #2
    19da:	d103      	bne.n	19e4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    19dc:	697b      	ldr	r3, [r7, #20]
    19de:	3310      	adds	r3, #16
    19e0:	617b      	str	r3, [r7, #20]
    19e2:	e002      	b.n	19ea <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    19e4:	697b      	ldr	r3, [r7, #20]
    19e6:	3314      	adds	r3, #20
    19e8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    19ea:	787b      	ldrb	r3, [r7, #1]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d006      	beq.n	19fe <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    19f0:	697b      	ldr	r3, [r7, #20]
    19f2:	697a      	ldr	r2, [r7, #20]
    19f4:	6811      	ldr	r1, [r2, #0]
    19f6:	68ba      	ldr	r2, [r7, #8]
    19f8:	430a      	orrs	r2, r1
    19fa:	601a      	str	r2, [r3, #0]
    19fc:	e006      	b.n	1a0c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    19fe:	697b      	ldr	r3, [r7, #20]
    1a00:	697a      	ldr	r2, [r7, #20]
    1a02:	6811      	ldr	r1, [r2, #0]
    1a04:	68ba      	ldr	r2, [r7, #8]
    1a06:	43d2      	mvns	r2, r2
    1a08:	400a      	ands	r2, r1
    1a0a:	601a      	str	r2, [r3, #0]
  }
}
    1a0c:	371c      	adds	r7, #28
    1a0e:	46bd      	mov	sp, r7
    1a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a14:	4770      	bx	lr
    1a16:	bf00      	nop

00001a18 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a18:	b480      	push	{r7}
    1a1a:	b083      	sub	sp, #12
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
    1a20:	4613      	mov	r3, r2
    1a22:	460a      	mov	r2, r1
    1a24:	807a      	strh	r2, [r7, #2]
    1a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    1a28:	787b      	ldrb	r3, [r7, #1]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d008      	beq.n	1a40 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	8a9b      	ldrh	r3, [r3, #20]
    1a32:	b29a      	uxth	r2, r3
    1a34:	887b      	ldrh	r3, [r7, #2]
    1a36:	4313      	orrs	r3, r2
    1a38:	b29a      	uxth	r2, r3
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	829a      	strh	r2, [r3, #20]
    1a3e:	e009      	b.n	1a54 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a40:	687b      	ldr	r3, [r7, #4]
    1a42:	8a9b      	ldrh	r3, [r3, #20]
    1a44:	b29a      	uxth	r2, r3
    1a46:	887b      	ldrh	r3, [r7, #2]
    1a48:	43db      	mvns	r3, r3
    1a4a:	b29b      	uxth	r3, r3
    1a4c:	4013      	ands	r3, r2
    1a4e:	b29a      	uxth	r2, r3
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	829a      	strh	r2, [r3, #20]
  }
}
    1a54:	370c      	adds	r7, #12
    1a56:	46bd      	mov	sp, r7
    1a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a5c:	4770      	bx	lr
    1a5e:	bf00      	nop

00001a60 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a60:	b480      	push	{r7}
    1a62:	b083      	sub	sp, #12
    1a64:	af00      	add	r7, sp, #0
    1a66:	6078      	str	r0, [r7, #4]
    1a68:	460b      	mov	r3, r1
    1a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a1b      	ldrh	r3, [r3, #16]
    1a70:	b29b      	uxth	r3, r3
    1a72:	f023 030f 	bic.w	r3, r3, #15
    1a76:	b29a      	uxth	r2, r3
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	8a1b      	ldrh	r3, [r3, #16]
    1a80:	b29a      	uxth	r2, r3
    1a82:	78fb      	ldrb	r3, [r7, #3]
    1a84:	b29b      	uxth	r3, r3
    1a86:	4313      	orrs	r3, r2
    1a88:	b29a      	uxth	r2, r3
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	821a      	strh	r2, [r3, #16]
}
    1a8e:	370c      	adds	r7, #12
    1a90:	46bd      	mov	sp, r7
    1a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a96:	4770      	bx	lr

00001a98 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1a98:	b480      	push	{r7}
    1a9a:	b083      	sub	sp, #12
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	6078      	str	r0, [r7, #4]
    1aa0:	460b      	mov	r3, r1
    1aa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	899b      	ldrh	r3, [r3, #12]
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1aae:	b29a      	uxth	r2, r3
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	899b      	ldrh	r3, [r3, #12]
    1ab8:	b29a      	uxth	r2, r3
    1aba:	887b      	ldrh	r3, [r7, #2]
    1abc:	4313      	orrs	r3, r2
    1abe:	b29a      	uxth	r2, r3
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	819a      	strh	r2, [r3, #12]
}
    1ac4:	370c      	adds	r7, #12
    1ac6:	46bd      	mov	sp, r7
    1ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1acc:	4770      	bx	lr
    1ace:	bf00      	nop

00001ad0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ad0:	b480      	push	{r7}
    1ad2:	b083      	sub	sp, #12
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	460b      	mov	r3, r1
    1ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    1adc:	78fb      	ldrb	r3, [r7, #3]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d008      	beq.n	1af4 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	899b      	ldrh	r3, [r3, #12]
    1ae6:	b29b      	uxth	r3, r3
    1ae8:	f043 0302 	orr.w	r3, r3, #2
    1aec:	b29a      	uxth	r2, r3
    1aee:	687b      	ldr	r3, [r7, #4]
    1af0:	819a      	strh	r2, [r3, #12]
    1af2:	e007      	b.n	1b04 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	899b      	ldrh	r3, [r3, #12]
    1af8:	b29b      	uxth	r3, r3
    1afa:	f023 0302 	bic.w	r3, r3, #2
    1afe:	b29a      	uxth	r2, r3
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	819a      	strh	r2, [r3, #12]
  }
}
    1b04:	370c      	adds	r7, #12
    1b06:	46bd      	mov	sp, r7
    1b08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop

00001b10 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b10:	b480      	push	{r7}
    1b12:	b083      	sub	sp, #12
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	460b      	mov	r3, r1
    1b1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	8a1b      	ldrh	r3, [r3, #16]
    1b20:	b29b      	uxth	r3, r3
    1b22:	f023 0320 	bic.w	r3, r3, #32
    1b26:	b29a      	uxth	r2, r3
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	8a1b      	ldrh	r3, [r3, #16]
    1b30:	b29a      	uxth	r2, r3
    1b32:	887b      	ldrh	r3, [r7, #2]
    1b34:	4313      	orrs	r3, r2
    1b36:	b29a      	uxth	r2, r3
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	821a      	strh	r2, [r3, #16]
}
    1b3c:	370c      	adds	r7, #12
    1b3e:	46bd      	mov	sp, r7
    1b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b44:	4770      	bx	lr
    1b46:	bf00      	nop

00001b48 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b48:	b480      	push	{r7}
    1b4a:	b083      	sub	sp, #12
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
    1b50:	460b      	mov	r3, r1
    1b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1b54:	78fb      	ldrb	r3, [r7, #3]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d008      	beq.n	1b6c <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	8a1b      	ldrh	r3, [r3, #16]
    1b5e:	b29b      	uxth	r3, r3
    1b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b64:	b29a      	uxth	r2, r3
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	821a      	strh	r2, [r3, #16]
    1b6a:	e007      	b.n	1b7c <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	8a1b      	ldrh	r3, [r3, #16]
    1b70:	b29b      	uxth	r3, r3
    1b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1b76:	b29a      	uxth	r2, r3
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	821a      	strh	r2, [r3, #16]
  }
}
    1b7c:	370c      	adds	r7, #12
    1b7e:	46bd      	mov	sp, r7
    1b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b84:	4770      	bx	lr
    1b86:	bf00      	nop

00001b88 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1b88:	b480      	push	{r7}
    1b8a:	b083      	sub	sp, #12
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	6078      	str	r0, [r7, #4]
    1b90:	460b      	mov	r3, r1
    1b92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1b94:	887b      	ldrh	r3, [r7, #2]
    1b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1b9a:	b29a      	uxth	r2, r3
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	809a      	strh	r2, [r3, #4]
}
    1ba0:	370c      	adds	r7, #12
    1ba2:	46bd      	mov	sp, r7
    1ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop

00001bac <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bac:	b480      	push	{r7}
    1bae:	b083      	sub	sp, #12
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	889b      	ldrh	r3, [r3, #4]
    1bb8:	b29b      	uxth	r3, r3
    1bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bbe:	b29b      	uxth	r3, r3
}
    1bc0:	4618      	mov	r0, r3
    1bc2:	370c      	adds	r7, #12
    1bc4:	46bd      	mov	sp, r7
    1bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bca:	4770      	bx	lr

00001bcc <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bcc:	b480      	push	{r7}
    1bce:	b083      	sub	sp, #12
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	899b      	ldrh	r3, [r3, #12]
    1bd8:	b29b      	uxth	r3, r3
    1bda:	f043 0301 	orr.w	r3, r3, #1
    1bde:	b29a      	uxth	r2, r3
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	819a      	strh	r2, [r3, #12]
}
    1be4:	370c      	adds	r7, #12
    1be6:	46bd      	mov	sp, r7
    1be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop

00001bf0 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
    1bf8:	460b      	mov	r3, r1
    1bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	8b1b      	ldrh	r3, [r3, #24]
    1c00:	b29b      	uxth	r3, r3
    1c02:	b2db      	uxtb	r3, r3
    1c04:	b29a      	uxth	r2, r3
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	8b1b      	ldrh	r3, [r3, #24]
    1c0e:	b29a      	uxth	r2, r3
    1c10:	78fb      	ldrb	r3, [r7, #3]
    1c12:	b29b      	uxth	r3, r3
    1c14:	021b      	lsls	r3, r3, #8
    1c16:	b29b      	uxth	r3, r3
    1c18:	4313      	orrs	r3, r2
    1c1a:	b29a      	uxth	r2, r3
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	831a      	strh	r2, [r3, #24]
}
    1c20:	370c      	adds	r7, #12
    1c22:	46bd      	mov	sp, r7
    1c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop

00001c2c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    1c2c:	b480      	push	{r7}
    1c2e:	b083      	sub	sp, #12
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
    1c34:	460b      	mov	r3, r1
    1c36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	8b1b      	ldrh	r3, [r3, #24]
    1c3c:	b29b      	uxth	r3, r3
    1c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c42:	b29a      	uxth	r2, r3
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	8b1b      	ldrh	r3, [r3, #24]
    1c4c:	b29a      	uxth	r2, r3
    1c4e:	78fb      	ldrb	r3, [r7, #3]
    1c50:	b29b      	uxth	r3, r3
    1c52:	4313      	orrs	r3, r2
    1c54:	b29a      	uxth	r2, r3
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	831a      	strh	r2, [r3, #24]
}
    1c5a:	370c      	adds	r7, #12
    1c5c:	46bd      	mov	sp, r7
    1c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c62:	4770      	bx	lr

00001c64 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c64:	b480      	push	{r7}
    1c66:	b083      	sub	sp, #12
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
    1c6c:	460b      	mov	r3, r1
    1c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c70:	78fb      	ldrb	r3, [r7, #3]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d008      	beq.n	1c88 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	8a9b      	ldrh	r3, [r3, #20]
    1c7a:	b29b      	uxth	r3, r3
    1c7c:	f043 0320 	orr.w	r3, r3, #32
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	829a      	strh	r2, [r3, #20]
    1c86:	e007      	b.n	1c98 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	8a9b      	ldrh	r3, [r3, #20]
    1c8c:	b29b      	uxth	r3, r3
    1c8e:	f023 0320 	bic.w	r3, r3, #32
    1c92:	b29a      	uxth	r2, r3
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	829a      	strh	r2, [r3, #20]
  }
}
    1c98:	370c      	adds	r7, #12
    1c9a:	46bd      	mov	sp, r7
    1c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop

00001ca4 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ca4:	b480      	push	{r7}
    1ca6:	b083      	sub	sp, #12
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
    1cac:	460b      	mov	r3, r1
    1cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cb0:	78fb      	ldrb	r3, [r7, #3]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d008      	beq.n	1cc8 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	8a9b      	ldrh	r3, [r3, #20]
    1cba:	b29b      	uxth	r3, r3
    1cbc:	f043 0310 	orr.w	r3, r3, #16
    1cc0:	b29a      	uxth	r2, r3
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	829a      	strh	r2, [r3, #20]
    1cc6:	e007      	b.n	1cd8 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	8a9b      	ldrh	r3, [r3, #20]
    1ccc:	b29b      	uxth	r3, r3
    1cce:	f023 0310 	bic.w	r3, r3, #16
    1cd2:	b29a      	uxth	r2, r3
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	829a      	strh	r2, [r3, #20]
  }
}
    1cd8:	370c      	adds	r7, #12
    1cda:	46bd      	mov	sp, r7
    1cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ce0:	4770      	bx	lr
    1ce2:	bf00      	nop

00001ce4 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ce4:	b480      	push	{r7}
    1ce6:	b083      	sub	sp, #12
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    1cec:	460b      	mov	r3, r1
    1cee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1cf0:	78fb      	ldrb	r3, [r7, #3]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d008      	beq.n	1d08 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	8a9b      	ldrh	r3, [r3, #20]
    1cfa:	b29b      	uxth	r3, r3
    1cfc:	f043 0308 	orr.w	r3, r3, #8
    1d00:	b29a      	uxth	r2, r3
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	829a      	strh	r2, [r3, #20]
    1d06:	e007      	b.n	1d18 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	8a9b      	ldrh	r3, [r3, #20]
    1d0c:	b29b      	uxth	r3, r3
    1d0e:	f023 0308 	bic.w	r3, r3, #8
    1d12:	b29a      	uxth	r2, r3
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	829a      	strh	r2, [r3, #20]
  }
}
    1d18:	370c      	adds	r7, #12
    1d1a:	46bd      	mov	sp, r7
    1d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d20:	4770      	bx	lr
    1d22:	bf00      	nop

00001d24 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d24:	b480      	push	{r7}
    1d26:	b083      	sub	sp, #12
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
    1d2c:	460b      	mov	r3, r1
    1d2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1d30:	78fb      	ldrb	r3, [r7, #3]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d00a      	beq.n	1d4c <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	899b      	ldrh	r3, [r3, #12]
    1d3a:	b29b      	uxth	r3, r3
    1d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d44:	b29a      	uxth	r2, r3
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	819a      	strh	r2, [r3, #12]
    1d4a:	e007      	b.n	1d5c <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	899b      	ldrh	r3, [r3, #12]
    1d50:	b29b      	uxth	r3, r3
    1d52:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d56:	b29a      	uxth	r2, r3
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	819a      	strh	r2, [r3, #12]
  }
}
    1d5c:	370c      	adds	r7, #12
    1d5e:	46bd      	mov	sp, r7
    1d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d64:	4770      	bx	lr
    1d66:	bf00      	nop

00001d68 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d68:	b480      	push	{r7}
    1d6a:	b083      	sub	sp, #12
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
    1d70:	460b      	mov	r3, r1
    1d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1d74:	78fb      	ldrb	r3, [r7, #3]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d008      	beq.n	1d8c <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	8a9b      	ldrh	r3, [r3, #20]
    1d7e:	b29b      	uxth	r3, r3
    1d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1d84:	b29a      	uxth	r2, r3
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	829a      	strh	r2, [r3, #20]
    1d8a:	e007      	b.n	1d9c <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	8a9b      	ldrh	r3, [r3, #20]
    1d90:	b29b      	uxth	r3, r3
    1d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1d96:	b29a      	uxth	r2, r3
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	829a      	strh	r2, [r3, #20]
  }
}
    1d9c:	370c      	adds	r7, #12
    1d9e:	46bd      	mov	sp, r7
    1da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop

00001da8 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1da8:	b480      	push	{r7}
    1daa:	b083      	sub	sp, #12
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	460b      	mov	r3, r1
    1db2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	8a9b      	ldrh	r3, [r3, #20]
    1db8:	b29b      	uxth	r3, r3
    1dba:	f023 0304 	bic.w	r3, r3, #4
    1dbe:	b29a      	uxth	r2, r3
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	8a9b      	ldrh	r3, [r3, #20]
    1dc8:	b29a      	uxth	r2, r3
    1dca:	887b      	ldrh	r3, [r7, #2]
    1dcc:	4313      	orrs	r3, r2
    1dce:	b29a      	uxth	r2, r3
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	829a      	strh	r2, [r3, #20]
}
    1dd4:	370c      	adds	r7, #12
    1dd6:	46bd      	mov	sp, r7
    1dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ddc:	4770      	bx	lr
    1dde:	bf00      	nop

00001de0 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1de0:	b480      	push	{r7}
    1de2:	b083      	sub	sp, #12
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
    1de8:	460b      	mov	r3, r1
    1dea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    1dec:	78fb      	ldrb	r3, [r7, #3]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d008      	beq.n	1e04 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	8a9b      	ldrh	r3, [r3, #20]
    1df6:	b29b      	uxth	r3, r3
    1df8:	f043 0302 	orr.w	r3, r3, #2
    1dfc:	b29a      	uxth	r2, r3
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	829a      	strh	r2, [r3, #20]
    1e02:	e007      	b.n	1e14 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e04:	687b      	ldr	r3, [r7, #4]
    1e06:	8a9b      	ldrh	r3, [r3, #20]
    1e08:	b29b      	uxth	r3, r3
    1e0a:	f023 0302 	bic.w	r3, r3, #2
    1e0e:	b29a      	uxth	r2, r3
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	829a      	strh	r2, [r3, #20]
  }
}
    1e14:	370c      	adds	r7, #12
    1e16:	46bd      	mov	sp, r7
    1e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop

00001e20 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e20:	b480      	push	{r7}
    1e22:	b085      	sub	sp, #20
    1e24:	af00      	add	r7, sp, #0
    1e26:	6078      	str	r0, [r7, #4]
    1e28:	460b      	mov	r3, r1
    1e2a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e2c:	2300      	movs	r3, #0
    1e2e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	881b      	ldrh	r3, [r3, #0]
    1e34:	b29a      	uxth	r2, r3
    1e36:	887b      	ldrh	r3, [r7, #2]
    1e38:	4013      	ands	r3, r2
    1e3a:	b29b      	uxth	r3, r3
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d002      	beq.n	1e46 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e40:	2301      	movs	r3, #1
    1e42:	73fb      	strb	r3, [r7, #15]
    1e44:	e001      	b.n	1e4a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e46:	2300      	movs	r3, #0
    1e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e4a:	7bfb      	ldrb	r3, [r7, #15]
}
    1e4c:	4618      	mov	r0, r3
    1e4e:	3714      	adds	r7, #20
    1e50:	46bd      	mov	sp, r7
    1e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e56:	4770      	bx	lr

00001e58 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e58:	b480      	push	{r7}
    1e5a:	b083      	sub	sp, #12
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
    1e60:	460b      	mov	r3, r1
    1e62:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    1e64:	887b      	ldrh	r3, [r7, #2]
    1e66:	43db      	mvns	r3, r3
    1e68:	b29a      	uxth	r2, r3
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	801a      	strh	r2, [r3, #0]
}
    1e6e:	370c      	adds	r7, #12
    1e70:	46bd      	mov	sp, r7
    1e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e76:	4770      	bx	lr

00001e78 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1e78:	b480      	push	{r7}
    1e7a:	b087      	sub	sp, #28
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	6078      	str	r0, [r7, #4]
    1e80:	460b      	mov	r3, r1
    1e82:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1e84:	2300      	movs	r3, #0
    1e86:	60fb      	str	r3, [r7, #12]
    1e88:	2300      	movs	r3, #0
    1e8a:	617b      	str	r3, [r7, #20]
    1e8c:	2300      	movs	r3, #0
    1e8e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1e90:	2300      	movs	r3, #0
    1e92:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1e94:	887b      	ldrh	r3, [r7, #2]
    1e96:	b2db      	uxtb	r3, r3
    1e98:	095b      	lsrs	r3, r3, #5
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1e9e:	887b      	ldrh	r3, [r7, #2]
    1ea0:	f003 031f 	and.w	r3, r3, #31
    1ea4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ea6:	697b      	ldr	r3, [r7, #20]
    1ea8:	2201      	movs	r2, #1
    1eaa:	fa02 f303 	lsl.w	r3, r2, r3
    1eae:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1eb0:	68bb      	ldr	r3, [r7, #8]
    1eb2:	2b01      	cmp	r3, #1
    1eb4:	d106      	bne.n	1ec4 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	899b      	ldrh	r3, [r3, #12]
    1eba:	b29b      	uxth	r3, r3
    1ebc:	697a      	ldr	r2, [r7, #20]
    1ebe:	4013      	ands	r3, r2
    1ec0:	617b      	str	r3, [r7, #20]
    1ec2:	e00f      	b.n	1ee4 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ec4:	68bb      	ldr	r3, [r7, #8]
    1ec6:	2b02      	cmp	r3, #2
    1ec8:	d106      	bne.n	1ed8 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	8a1b      	ldrh	r3, [r3, #16]
    1ece:	b29b      	uxth	r3, r3
    1ed0:	697a      	ldr	r2, [r7, #20]
    1ed2:	4013      	ands	r3, r2
    1ed4:	617b      	str	r3, [r7, #20]
    1ed6:	e005      	b.n	1ee4 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1ed8:	687b      	ldr	r3, [r7, #4]
    1eda:	8a9b      	ldrh	r3, [r3, #20]
    1edc:	b29b      	uxth	r3, r3
    1ede:	697a      	ldr	r2, [r7, #20]
    1ee0:	4013      	ands	r3, r2
    1ee2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    1ee4:	887b      	ldrh	r3, [r7, #2]
    1ee6:	0a1b      	lsrs	r3, r3, #8
    1ee8:	b29b      	uxth	r3, r3
    1eea:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1eec:	68fb      	ldr	r3, [r7, #12]
    1eee:	2201      	movs	r2, #1
    1ef0:	fa02 f303 	lsl.w	r3, r2, r3
    1ef4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	881b      	ldrh	r3, [r3, #0]
    1efa:	b29b      	uxth	r3, r3
    1efc:	68fa      	ldr	r2, [r7, #12]
    1efe:	4013      	ands	r3, r2
    1f00:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f02:	697b      	ldr	r3, [r7, #20]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d005      	beq.n	1f14 <USART_GetITStatus+0x9c>
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d002      	beq.n	1f14 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f0e:	2301      	movs	r3, #1
    1f10:	74fb      	strb	r3, [r7, #19]
    1f12:	e001      	b.n	1f18 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f14:	2300      	movs	r3, #0
    1f16:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    1f18:	7cfb      	ldrb	r3, [r7, #19]
}
    1f1a:	4618      	mov	r0, r3
    1f1c:	371c      	adds	r7, #28
    1f1e:	46bd      	mov	sp, r7
    1f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f24:	4770      	bx	lr
    1f26:	bf00      	nop

00001f28 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f28:	b480      	push	{r7}
    1f2a:	b085      	sub	sp, #20
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
    1f30:	460b      	mov	r3, r1
    1f32:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f34:	2300      	movs	r3, #0
    1f36:	81fb      	strh	r3, [r7, #14]
    1f38:	2300      	movs	r3, #0
    1f3a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    1f3c:	887b      	ldrh	r3, [r7, #2]
    1f3e:	0a1b      	lsrs	r3, r3, #8
    1f40:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f42:	89fb      	ldrh	r3, [r7, #14]
    1f44:	2201      	movs	r2, #1
    1f46:	fa02 f303 	lsl.w	r3, r2, r3
    1f4a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f4c:	89bb      	ldrh	r3, [r7, #12]
    1f4e:	43db      	mvns	r3, r3
    1f50:	b29a      	uxth	r2, r3
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	801a      	strh	r2, [r3, #0]
}
    1f56:	3714      	adds	r7, #20
    1f58:	46bd      	mov	sp, r7
    1f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f5e:	4770      	bx	lr

00001f60 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f60:	b480      	push	{r7}
    1f62:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f64:	4b09      	ldr	r3, [pc, #36]	; (1f8c <EXTI_DeInit+0x2c>)
    1f66:	2200      	movs	r2, #0
    1f68:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f6a:	4b08      	ldr	r3, [pc, #32]	; (1f8c <EXTI_DeInit+0x2c>)
    1f6c:	2200      	movs	r2, #0
    1f6e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    1f70:	4b06      	ldr	r3, [pc, #24]	; (1f8c <EXTI_DeInit+0x2c>)
    1f72:	2200      	movs	r2, #0
    1f74:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <EXTI_DeInit+0x2c>)
    1f78:	2200      	movs	r2, #0
    1f7a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1f7c:	4b03      	ldr	r3, [pc, #12]	; (1f8c <EXTI_DeInit+0x2c>)
    1f7e:	4a04      	ldr	r2, [pc, #16]	; (1f90 <EXTI_DeInit+0x30>)
    1f80:	615a      	str	r2, [r3, #20]
}
    1f82:	46bd      	mov	sp, r7
    1f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f88:	4770      	bx	lr
    1f8a:	bf00      	nop
    1f8c:	40010400 	.word	0x40010400
    1f90:	000fffff 	.word	0x000fffff

00001f94 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1f94:	b480      	push	{r7}
    1f96:	b085      	sub	sp, #20
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1f9c:	2300      	movs	r3, #0
    1f9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fa0:	4b32      	ldr	r3, [pc, #200]	; (206c <EXTI_Init+0xd8>)
    1fa2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	799b      	ldrb	r3, [r3, #6]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d04d      	beq.n	2048 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1fac:	4b2f      	ldr	r3, [pc, #188]	; (206c <EXTI_Init+0xd8>)
    1fae:	4a2f      	ldr	r2, [pc, #188]	; (206c <EXTI_Init+0xd8>)
    1fb0:	6811      	ldr	r1, [r2, #0]
    1fb2:	687a      	ldr	r2, [r7, #4]
    1fb4:	6812      	ldr	r2, [r2, #0]
    1fb6:	43d2      	mvns	r2, r2
    1fb8:	400a      	ands	r2, r1
    1fba:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1fbc:	4b2b      	ldr	r3, [pc, #172]	; (206c <EXTI_Init+0xd8>)
    1fbe:	4a2b      	ldr	r2, [pc, #172]	; (206c <EXTI_Init+0xd8>)
    1fc0:	6851      	ldr	r1, [r2, #4]
    1fc2:	687a      	ldr	r2, [r7, #4]
    1fc4:	6812      	ldr	r2, [r2, #0]
    1fc6:	43d2      	mvns	r2, r2
    1fc8:	400a      	ands	r2, r1
    1fca:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	791b      	ldrb	r3, [r3, #4]
    1fd0:	68fa      	ldr	r2, [r7, #12]
    1fd2:	4413      	add	r3, r2
    1fd4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	68fa      	ldr	r2, [r7, #12]
    1fda:	6811      	ldr	r1, [r2, #0]
    1fdc:	687a      	ldr	r2, [r7, #4]
    1fde:	6812      	ldr	r2, [r2, #0]
    1fe0:	430a      	orrs	r2, r1
    1fe2:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    1fe4:	4b21      	ldr	r3, [pc, #132]	; (206c <EXTI_Init+0xd8>)
    1fe6:	4a21      	ldr	r2, [pc, #132]	; (206c <EXTI_Init+0xd8>)
    1fe8:	6891      	ldr	r1, [r2, #8]
    1fea:	687a      	ldr	r2, [r7, #4]
    1fec:	6812      	ldr	r2, [r2, #0]
    1fee:	43d2      	mvns	r2, r2
    1ff0:	400a      	ands	r2, r1
    1ff2:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    1ff4:	4b1d      	ldr	r3, [pc, #116]	; (206c <EXTI_Init+0xd8>)
    1ff6:	4a1d      	ldr	r2, [pc, #116]	; (206c <EXTI_Init+0xd8>)
    1ff8:	68d1      	ldr	r1, [r2, #12]
    1ffa:	687a      	ldr	r2, [r7, #4]
    1ffc:	6812      	ldr	r2, [r2, #0]
    1ffe:	43d2      	mvns	r2, r2
    2000:	400a      	ands	r2, r1
    2002:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	795b      	ldrb	r3, [r3, #5]
    2008:	2b10      	cmp	r3, #16
    200a:	d10e      	bne.n	202a <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    200c:	4b17      	ldr	r3, [pc, #92]	; (206c <EXTI_Init+0xd8>)
    200e:	4a17      	ldr	r2, [pc, #92]	; (206c <EXTI_Init+0xd8>)
    2010:	6891      	ldr	r1, [r2, #8]
    2012:	687a      	ldr	r2, [r7, #4]
    2014:	6812      	ldr	r2, [r2, #0]
    2016:	430a      	orrs	r2, r1
    2018:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    201a:	4b14      	ldr	r3, [pc, #80]	; (206c <EXTI_Init+0xd8>)
    201c:	4a13      	ldr	r2, [pc, #76]	; (206c <EXTI_Init+0xd8>)
    201e:	68d1      	ldr	r1, [r2, #12]
    2020:	687a      	ldr	r2, [r7, #4]
    2022:	6812      	ldr	r2, [r2, #0]
    2024:	430a      	orrs	r2, r1
    2026:	60da      	str	r2, [r3, #12]
    2028:	e01b      	b.n	2062 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    202a:	4b10      	ldr	r3, [pc, #64]	; (206c <EXTI_Init+0xd8>)
    202c:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	795b      	ldrb	r3, [r3, #5]
    2032:	68fa      	ldr	r2, [r7, #12]
    2034:	4413      	add	r3, r2
    2036:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2038:	68fb      	ldr	r3, [r7, #12]
    203a:	68fa      	ldr	r2, [r7, #12]
    203c:	6811      	ldr	r1, [r2, #0]
    203e:	687a      	ldr	r2, [r7, #4]
    2040:	6812      	ldr	r2, [r2, #0]
    2042:	430a      	orrs	r2, r1
    2044:	601a      	str	r2, [r3, #0]
    2046:	e00c      	b.n	2062 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	791b      	ldrb	r3, [r3, #4]
    204c:	68fa      	ldr	r2, [r7, #12]
    204e:	4413      	add	r3, r2
    2050:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2052:	68fb      	ldr	r3, [r7, #12]
    2054:	68fa      	ldr	r2, [r7, #12]
    2056:	6811      	ldr	r1, [r2, #0]
    2058:	687a      	ldr	r2, [r7, #4]
    205a:	6812      	ldr	r2, [r2, #0]
    205c:	43d2      	mvns	r2, r2
    205e:	400a      	ands	r2, r1
    2060:	601a      	str	r2, [r3, #0]
  }
}
    2062:	3714      	adds	r7, #20
    2064:	46bd      	mov	sp, r7
    2066:	f85d 7b04 	ldr.w	r7, [sp], #4
    206a:	4770      	bx	lr
    206c:	40010400 	.word	0x40010400

00002070 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2070:	b480      	push	{r7}
    2072:	b083      	sub	sp, #12
    2074:	af00      	add	r7, sp, #0
    2076:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	2200      	movs	r2, #0
    207c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	2200      	movs	r2, #0
    2082:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	220c      	movs	r2, #12
    2088:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	2200      	movs	r2, #0
    208e:	719a      	strb	r2, [r3, #6]
}
    2090:	370c      	adds	r7, #12
    2092:	46bd      	mov	sp, r7
    2094:	f85d 7b04 	ldr.w	r7, [sp], #4
    2098:	4770      	bx	lr
    209a:	bf00      	nop

0000209c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    209c:	b480      	push	{r7}
    209e:	b083      	sub	sp, #12
    20a0:	af00      	add	r7, sp, #0
    20a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    20a4:	4b05      	ldr	r3, [pc, #20]	; (20bc <EXTI_GenerateSWInterrupt+0x20>)
    20a6:	4a05      	ldr	r2, [pc, #20]	; (20bc <EXTI_GenerateSWInterrupt+0x20>)
    20a8:	6911      	ldr	r1, [r2, #16]
    20aa:	687a      	ldr	r2, [r7, #4]
    20ac:	430a      	orrs	r2, r1
    20ae:	611a      	str	r2, [r3, #16]
}
    20b0:	370c      	adds	r7, #12
    20b2:	46bd      	mov	sp, r7
    20b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	40010400 	.word	0x40010400

000020c0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    20c0:	b480      	push	{r7}
    20c2:	b085      	sub	sp, #20
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    20c8:	2300      	movs	r3, #0
    20ca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    20cc:	4b08      	ldr	r3, [pc, #32]	; (20f0 <EXTI_GetFlagStatus+0x30>)
    20ce:	695a      	ldr	r2, [r3, #20]
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	4013      	ands	r3, r2
    20d4:	2b00      	cmp	r3, #0
    20d6:	d002      	beq.n	20de <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
    20d8:	2301      	movs	r3, #1
    20da:	73fb      	strb	r3, [r7, #15]
    20dc:	e001      	b.n	20e2 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
    20de:	2300      	movs	r3, #0
    20e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    20e2:	7bfb      	ldrb	r3, [r7, #15]
}
    20e4:	4618      	mov	r0, r3
    20e6:	3714      	adds	r7, #20
    20e8:	46bd      	mov	sp, r7
    20ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ee:	4770      	bx	lr
    20f0:	40010400 	.word	0x40010400

000020f4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    20f4:	b480      	push	{r7}
    20f6:	b083      	sub	sp, #12
    20f8:	af00      	add	r7, sp, #0
    20fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    20fc:	4b03      	ldr	r3, [pc, #12]	; (210c <EXTI_ClearFlag+0x18>)
    20fe:	687a      	ldr	r2, [r7, #4]
    2100:	615a      	str	r2, [r3, #20]
}
    2102:	370c      	adds	r7, #12
    2104:	46bd      	mov	sp, r7
    2106:	f85d 7b04 	ldr.w	r7, [sp], #4
    210a:	4770      	bx	lr
    210c:	40010400 	.word	0x40010400

00002110 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2110:	b480      	push	{r7}
    2112:	b085      	sub	sp, #20
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2118:	2300      	movs	r3, #0
    211a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    211c:	2300      	movs	r3, #0
    211e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2120:	4b0c      	ldr	r3, [pc, #48]	; (2154 <EXTI_GetITStatus+0x44>)
    2122:	681a      	ldr	r2, [r3, #0]
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	4013      	ands	r3, r2
    2128:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <EXTI_GetITStatus+0x44>)
    212c:	695a      	ldr	r2, [r3, #20]
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	4013      	ands	r3, r2
    2132:	2b00      	cmp	r3, #0
    2134:	d005      	beq.n	2142 <EXTI_GetITStatus+0x32>
    2136:	68bb      	ldr	r3, [r7, #8]
    2138:	2b00      	cmp	r3, #0
    213a:	d002      	beq.n	2142 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
    213c:	2301      	movs	r3, #1
    213e:	73fb      	strb	r3, [r7, #15]
    2140:	e001      	b.n	2146 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
    2142:	2300      	movs	r3, #0
    2144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2146:	7bfb      	ldrb	r3, [r7, #15]
}
    2148:	4618      	mov	r0, r3
    214a:	3714      	adds	r7, #20
    214c:	46bd      	mov	sp, r7
    214e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2152:	4770      	bx	lr
    2154:	40010400 	.word	0x40010400

00002158 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2158:	b480      	push	{r7}
    215a:	b083      	sub	sp, #12
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <EXTI_ClearITPendingBit+0x18>)
    2162:	687a      	ldr	r2, [r7, #4]
    2164:	615a      	str	r2, [r3, #20]
}
    2166:	370c      	adds	r7, #12
    2168:	46bd      	mov	sp, r7
    216a:	f85d 7b04 	ldr.w	r7, [sp], #4
    216e:	4770      	bx	lr
    2170:	40010400 	.word	0x40010400

00002174 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2174:	b580      	push	{r7, lr}
    2176:	b082      	sub	sp, #8
    2178:	af00      	add	r7, sp, #0
    217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    217c:	687a      	ldr	r2, [r7, #4]
    217e:	4b17      	ldr	r3, [pc, #92]	; (21dc <ADC_DeInit+0x68>)
    2180:	429a      	cmp	r2, r3
    2182:	d10a      	bne.n	219a <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    2184:	f44f 7000 	mov.w	r0, #512	; 0x200
    2188:	2101      	movs	r1, #1
    218a:	f7fe fe99 	bl	ec0 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    218e:	f44f 7000 	mov.w	r0, #512	; 0x200
    2192:	2100      	movs	r1, #0
    2194:	f7fe fe94 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2198:	e01c      	b.n	21d4 <ADC_DeInit+0x60>
  }
  else if (ADCx == ADC2)
    219a:	687a      	ldr	r2, [r7, #4]
    219c:	4b10      	ldr	r3, [pc, #64]	; (21e0 <ADC_DeInit+0x6c>)
    219e:	429a      	cmp	r2, r3
    21a0:	d10a      	bne.n	21b8 <ADC_DeInit+0x44>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    21a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    21a6:	2101      	movs	r1, #1
    21a8:	f7fe fe8a 	bl	ec0 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    21ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
    21b0:	2100      	movs	r1, #0
    21b2:	f7fe fe85 	bl	ec0 <RCC_APB2PeriphResetCmd>
    21b6:	e00d      	b.n	21d4 <ADC_DeInit+0x60>
  }
  else
  {
    if (ADCx == ADC3)
    21b8:	687a      	ldr	r2, [r7, #4]
    21ba:	4b0a      	ldr	r3, [pc, #40]	; (21e4 <ADC_DeInit+0x70>)
    21bc:	429a      	cmp	r2, r3
    21be:	d109      	bne.n	21d4 <ADC_DeInit+0x60>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    21c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    21c4:	2101      	movs	r1, #1
    21c6:	f7fe fe7b 	bl	ec0 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    21ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    21ce:	2100      	movs	r1, #0
    21d0:	f7fe fe76 	bl	ec0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    21d4:	3708      	adds	r7, #8
    21d6:	46bd      	mov	sp, r7
    21d8:	bd80      	pop	{r7, pc}
    21da:	bf00      	nop
    21dc:	40012400 	.word	0x40012400
    21e0:	40012800 	.word	0x40012800
    21e4:	40013c00 	.word	0x40013c00

000021e8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    21e8:	b480      	push	{r7}
    21ea:	b085      	sub	sp, #20
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
    21f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    21f6:	2300      	movs	r3, #0
    21f8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	685b      	ldr	r3, [r3, #4]
    21fe:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    220a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    220c:	683b      	ldr	r3, [r7, #0]
    220e:	681a      	ldr	r2, [r3, #0]
    2210:	683b      	ldr	r3, [r7, #0]
    2212:	791b      	ldrb	r3, [r3, #4]
    2214:	021b      	lsls	r3, r3, #8
    2216:	4313      	orrs	r3, r2
    2218:	68fa      	ldr	r2, [r7, #12]
    221a:	4313      	orrs	r3, r2
    221c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	68fa      	ldr	r2, [r7, #12]
    2222:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	689b      	ldr	r3, [r3, #8]
    2228:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    222a:	68fa      	ldr	r2, [r7, #12]
    222c:	4b16      	ldr	r3, [pc, #88]	; (2288 <ADC_Init+0xa0>)
    222e:	4013      	ands	r3, r2
    2230:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2232:	683b      	ldr	r3, [r7, #0]
    2234:	68da      	ldr	r2, [r3, #12]
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	689b      	ldr	r3, [r3, #8]
    223a:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    223c:	683b      	ldr	r3, [r7, #0]
    223e:	795b      	ldrb	r3, [r3, #5]
    2240:	005b      	lsls	r3, r3, #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2242:	4313      	orrs	r3, r2
    2244:	68fa      	ldr	r2, [r7, #12]
    2246:	4313      	orrs	r3, r2
    2248:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	68fa      	ldr	r2, [r7, #12]
    224e:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2254:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2256:	68fb      	ldr	r3, [r7, #12]
    2258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    225c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    225e:	683b      	ldr	r3, [r7, #0]
    2260:	7c1b      	ldrb	r3, [r3, #16]
    2262:	3b01      	subs	r3, #1
    2264:	b2da      	uxtb	r2, r3
    2266:	7afb      	ldrb	r3, [r7, #11]
    2268:	4313      	orrs	r3, r2
    226a:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    226c:	7afb      	ldrb	r3, [r7, #11]
    226e:	051b      	lsls	r3, r3, #20
    2270:	68fa      	ldr	r2, [r7, #12]
    2272:	4313      	orrs	r3, r2
    2274:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	68fa      	ldr	r2, [r7, #12]
    227a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    227c:	3714      	adds	r7, #20
    227e:	46bd      	mov	sp, r7
    2280:	f85d 7b04 	ldr.w	r7, [sp], #4
    2284:	4770      	bx	lr
    2286:	bf00      	nop
    2288:	fff1f7fd 	.word	0xfff1f7fd

0000228c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    228c:	b480      	push	{r7}
    228e:	b083      	sub	sp, #12
    2290:	af00      	add	r7, sp, #0
    2292:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2200      	movs	r2, #0
    2298:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	2200      	movs	r2, #0
    229e:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	2200      	movs	r2, #0
    22a4:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	2200      	movs	r2, #0
    22aa:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	2200      	movs	r2, #0
    22b0:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	2201      	movs	r2, #1
    22b6:	741a      	strb	r2, [r3, #16]
}
    22b8:	370c      	adds	r7, #12
    22ba:	46bd      	mov	sp, r7
    22bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop

000022c4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    22c4:	b480      	push	{r7}
    22c6:	b083      	sub	sp, #12
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
    22cc:	460b      	mov	r3, r1
    22ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    22d0:	78fb      	ldrb	r3, [r7, #3]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d006      	beq.n	22e4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	689b      	ldr	r3, [r3, #8]
    22da:	f043 0201 	orr.w	r2, r3, #1
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	609a      	str	r2, [r3, #8]
    22e2:	e005      	b.n	22f0 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	689b      	ldr	r3, [r3, #8]
    22e8:	f023 0201 	bic.w	r2, r3, #1
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	609a      	str	r2, [r3, #8]
  }
}
    22f0:	370c      	adds	r7, #12
    22f2:	46bd      	mov	sp, r7
    22f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop

000022fc <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    22fc:	b480      	push	{r7}
    22fe:	b083      	sub	sp, #12
    2300:	af00      	add	r7, sp, #0
    2302:	6078      	str	r0, [r7, #4]
    2304:	460b      	mov	r3, r1
    2306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2308:	78fb      	ldrb	r3, [r7, #3]
    230a:	2b00      	cmp	r3, #0
    230c:	d006      	beq.n	231c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	689b      	ldr	r3, [r3, #8]
    2312:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	609a      	str	r2, [r3, #8]
    231a:	e005      	b.n	2328 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	689b      	ldr	r3, [r3, #8]
    2320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	609a      	str	r2, [r3, #8]
  }
}
    2328:	370c      	adds	r7, #12
    232a:	46bd      	mov	sp, r7
    232c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2330:	4770      	bx	lr
    2332:	bf00      	nop

00002334 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2334:	b480      	push	{r7}
    2336:	b085      	sub	sp, #20
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
    233c:	4613      	mov	r3, r2
    233e:	460a      	mov	r2, r1
    2340:	807a      	strh	r2, [r7, #2]
    2342:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2344:	2300      	movs	r3, #0
    2346:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2348:	887b      	ldrh	r3, [r7, #2]
    234a:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    234c:	787b      	ldrb	r3, [r7, #1]
    234e:	2b00      	cmp	r3, #0
    2350:	d006      	beq.n	2360 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	685a      	ldr	r2, [r3, #4]
    2356:	7bfb      	ldrb	r3, [r7, #15]
    2358:	431a      	orrs	r2, r3
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	605a      	str	r2, [r3, #4]
    235e:	e006      	b.n	236e <ADC_ITConfig+0x3a>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	685a      	ldr	r2, [r3, #4]
    2364:	7bfb      	ldrb	r3, [r7, #15]
    2366:	43db      	mvns	r3, r3
    2368:	401a      	ands	r2, r3
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	605a      	str	r2, [r3, #4]
  }
}
    236e:	3714      	adds	r7, #20
    2370:	46bd      	mov	sp, r7
    2372:	f85d 7b04 	ldr.w	r7, [sp], #4
    2376:	4770      	bx	lr

00002378 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    2378:	b480      	push	{r7}
    237a:	b083      	sub	sp, #12
    237c:	af00      	add	r7, sp, #0
    237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	689b      	ldr	r3, [r3, #8]
    2384:	f043 0208 	orr.w	r2, r3, #8
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	609a      	str	r2, [r3, #8]
}
    238c:	370c      	adds	r7, #12
    238e:	46bd      	mov	sp, r7
    2390:	f85d 7b04 	ldr.w	r7, [sp], #4
    2394:	4770      	bx	lr
    2396:	bf00      	nop

00002398 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2398:	b480      	push	{r7}
    239a:	b085      	sub	sp, #20
    239c:	af00      	add	r7, sp, #0
    239e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23a0:	2300      	movs	r3, #0
    23a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	f003 0308 	and.w	r3, r3, #8
    23ac:	2b00      	cmp	r3, #0
    23ae:	d002      	beq.n	23b6 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    23b0:	2301      	movs	r3, #1
    23b2:	73fb      	strb	r3, [r7, #15]
    23b4:	e001      	b.n	23ba <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    23b6:	2300      	movs	r3, #0
    23b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    23ba:	7bfb      	ldrb	r3, [r7, #15]
}
    23bc:	4618      	mov	r0, r3
    23be:	3714      	adds	r7, #20
    23c0:	46bd      	mov	sp, r7
    23c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    23c6:	4770      	bx	lr

000023c8 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    23c8:	b480      	push	{r7}
    23ca:	b083      	sub	sp, #12
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	689b      	ldr	r3, [r3, #8]
    23d4:	f043 0204 	orr.w	r2, r3, #4
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	609a      	str	r2, [r3, #8]
}
    23dc:	370c      	adds	r7, #12
    23de:	46bd      	mov	sp, r7
    23e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop

000023e8 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    23e8:	b480      	push	{r7}
    23ea:	b085      	sub	sp, #20
    23ec:	af00      	add	r7, sp, #0
    23ee:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23f0:	2300      	movs	r3, #0
    23f2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	689b      	ldr	r3, [r3, #8]
    23f8:	f003 0304 	and.w	r3, r3, #4
    23fc:	2b00      	cmp	r3, #0
    23fe:	d002      	beq.n	2406 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    2400:	2301      	movs	r3, #1
    2402:	73fb      	strb	r3, [r7, #15]
    2404:	e001      	b.n	240a <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    2406:	2300      	movs	r3, #0
    2408:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    240a:	7bfb      	ldrb	r3, [r7, #15]
}
    240c:	4618      	mov	r0, r3
    240e:	3714      	adds	r7, #20
    2410:	46bd      	mov	sp, r7
    2412:	f85d 7b04 	ldr.w	r7, [sp], #4
    2416:	4770      	bx	lr

00002418 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2418:	b480      	push	{r7}
    241a:	b083      	sub	sp, #12
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
    2420:	460b      	mov	r3, r1
    2422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2424:	78fb      	ldrb	r3, [r7, #3]
    2426:	2b00      	cmp	r3, #0
    2428:	d006      	beq.n	2438 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	689b      	ldr	r3, [r3, #8]
    242e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	609a      	str	r2, [r3, #8]
    2436:	e005      	b.n	2444 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    2438:	687b      	ldr	r3, [r7, #4]
    243a:	689b      	ldr	r3, [r3, #8]
    243c:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	609a      	str	r2, [r3, #8]
  }
}
    2444:	370c      	adds	r7, #12
    2446:	46bd      	mov	sp, r7
    2448:	f85d 7b04 	ldr.w	r7, [sp], #4
    244c:	4770      	bx	lr
    244e:	bf00      	nop

00002450 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    2450:	b480      	push	{r7}
    2452:	b085      	sub	sp, #20
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2458:	2300      	movs	r3, #0
    245a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	689b      	ldr	r3, [r3, #8]
    2460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2464:	2b00      	cmp	r3, #0
    2466:	d002      	beq.n	246e <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    2468:	2301      	movs	r3, #1
    246a:	73fb      	strb	r3, [r7, #15]
    246c:	e001      	b.n	2472 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    246e:	2300      	movs	r3, #0
    2470:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    2472:	7bfb      	ldrb	r3, [r7, #15]
}
    2474:	4618      	mov	r0, r3
    2476:	3714      	adds	r7, #20
    2478:	46bd      	mov	sp, r7
    247a:	f85d 7b04 	ldr.w	r7, [sp], #4
    247e:	4770      	bx	lr

00002480 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    2480:	b480      	push	{r7}
    2482:	b085      	sub	sp, #20
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
    2488:	460b      	mov	r3, r1
    248a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    248c:	2300      	movs	r3, #0
    248e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2490:	2300      	movs	r3, #0
    2492:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	685b      	ldr	r3, [r3, #4]
    2498:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    249a:	68fb      	ldr	r3, [r7, #12]
    249c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    24a0:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    24a2:	78fb      	ldrb	r3, [r7, #3]
    24a4:	3b01      	subs	r3, #1
    24a6:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    24a8:	68bb      	ldr	r3, [r7, #8]
    24aa:	035b      	lsls	r3, r3, #13
    24ac:	68fa      	ldr	r2, [r7, #12]
    24ae:	4313      	orrs	r3, r2
    24b0:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	68fa      	ldr	r2, [r7, #12]
    24b6:	605a      	str	r2, [r3, #4]
}
    24b8:	3714      	adds	r7, #20
    24ba:	46bd      	mov	sp, r7
    24bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c0:	4770      	bx	lr
    24c2:	bf00      	nop

000024c4 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    24c4:	b480      	push	{r7}
    24c6:	b083      	sub	sp, #12
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
    24cc:	460b      	mov	r3, r1
    24ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    24d0:	78fb      	ldrb	r3, [r7, #3]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d006      	beq.n	24e4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	685b      	ldr	r3, [r3, #4]
    24da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	605a      	str	r2, [r3, #4]
    24e2:	e005      	b.n	24f0 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	685b      	ldr	r3, [r3, #4]
    24e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    24ec:	687b      	ldr	r3, [r7, #4]
    24ee:	605a      	str	r2, [r3, #4]
  }
}
    24f0:	370c      	adds	r7, #12
    24f2:	46bd      	mov	sp, r7
    24f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24f8:	4770      	bx	lr
    24fa:	bf00      	nop

000024fc <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    24fc:	b480      	push	{r7}
    24fe:	b085      	sub	sp, #20
    2500:	af00      	add	r7, sp, #0
    2502:	6078      	str	r0, [r7, #4]
    2504:	70f9      	strb	r1, [r7, #3]
    2506:	70ba      	strb	r2, [r7, #2]
    2508:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    250a:	2300      	movs	r3, #0
    250c:	60fb      	str	r3, [r7, #12]
    250e:	2300      	movs	r3, #0
    2510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2512:	78fb      	ldrb	r3, [r7, #3]
    2514:	2b09      	cmp	r3, #9
    2516:	d923      	bls.n	2560 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	68db      	ldr	r3, [r3, #12]
    251c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    251e:	78fb      	ldrb	r3, [r7, #3]
    2520:	f1a3 020a 	sub.w	r2, r3, #10
    2524:	4613      	mov	r3, r2
    2526:	005b      	lsls	r3, r3, #1
    2528:	4413      	add	r3, r2
    252a:	2207      	movs	r2, #7
    252c:	fa02 f303 	lsl.w	r3, r2, r3
    2530:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2532:	68bb      	ldr	r3, [r7, #8]
    2534:	43db      	mvns	r3, r3
    2536:	68fa      	ldr	r2, [r7, #12]
    2538:	4013      	ands	r3, r2
    253a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    253c:	7879      	ldrb	r1, [r7, #1]
    253e:	78fb      	ldrb	r3, [r7, #3]
    2540:	f1a3 020a 	sub.w	r2, r3, #10
    2544:	4613      	mov	r3, r2
    2546:	005b      	lsls	r3, r3, #1
    2548:	4413      	add	r3, r2
    254a:	fa01 f303 	lsl.w	r3, r1, r3
    254e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2550:	68fa      	ldr	r2, [r7, #12]
    2552:	68bb      	ldr	r3, [r7, #8]
    2554:	4313      	orrs	r3, r2
    2556:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	68fa      	ldr	r2, [r7, #12]
    255c:	60da      	str	r2, [r3, #12]
    255e:	e01e      	b.n	259e <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	691b      	ldr	r3, [r3, #16]
    2564:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    2566:	78fa      	ldrb	r2, [r7, #3]
    2568:	4613      	mov	r3, r2
    256a:	005b      	lsls	r3, r3, #1
    256c:	4413      	add	r3, r2
    256e:	2207      	movs	r2, #7
    2570:	fa02 f303 	lsl.w	r3, r2, r3
    2574:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2576:	68bb      	ldr	r3, [r7, #8]
    2578:	43db      	mvns	r3, r3
    257a:	68fa      	ldr	r2, [r7, #12]
    257c:	4013      	ands	r3, r2
    257e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    2580:	7879      	ldrb	r1, [r7, #1]
    2582:	78fa      	ldrb	r2, [r7, #3]
    2584:	4613      	mov	r3, r2
    2586:	005b      	lsls	r3, r3, #1
    2588:	4413      	add	r3, r2
    258a:	fa01 f303 	lsl.w	r3, r1, r3
    258e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2590:	68fa      	ldr	r2, [r7, #12]
    2592:	68bb      	ldr	r3, [r7, #8]
    2594:	4313      	orrs	r3, r2
    2596:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	68fa      	ldr	r2, [r7, #12]
    259c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    259e:	78bb      	ldrb	r3, [r7, #2]
    25a0:	2b06      	cmp	r3, #6
    25a2:	d821      	bhi.n	25e8 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    25aa:	78bb      	ldrb	r3, [r7, #2]
    25ac:	1e5a      	subs	r2, r3, #1
    25ae:	4613      	mov	r3, r2
    25b0:	009b      	lsls	r3, r3, #2
    25b2:	4413      	add	r3, r2
    25b4:	221f      	movs	r2, #31
    25b6:	fa02 f303 	lsl.w	r3, r2, r3
    25ba:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    25bc:	68bb      	ldr	r3, [r7, #8]
    25be:	43db      	mvns	r3, r3
    25c0:	68fa      	ldr	r2, [r7, #12]
    25c2:	4013      	ands	r3, r2
    25c4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    25c6:	78f9      	ldrb	r1, [r7, #3]
    25c8:	78bb      	ldrb	r3, [r7, #2]
    25ca:	1e5a      	subs	r2, r3, #1
    25cc:	4613      	mov	r3, r2
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	4413      	add	r3, r2
    25d2:	fa01 f303 	lsl.w	r3, r1, r3
    25d6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    25d8:	68fa      	ldr	r2, [r7, #12]
    25da:	68bb      	ldr	r3, [r7, #8]
    25dc:	4313      	orrs	r3, r2
    25de:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	68fa      	ldr	r2, [r7, #12]
    25e4:	635a      	str	r2, [r3, #52]	; 0x34
    25e6:	e047      	b.n	2678 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
    25e8:	78bb      	ldrb	r3, [r7, #2]
    25ea:	2b0c      	cmp	r3, #12
    25ec:	d821      	bhi.n	2632 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    25ee:	687b      	ldr	r3, [r7, #4]
    25f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    25f2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    25f4:	78bb      	ldrb	r3, [r7, #2]
    25f6:	1fda      	subs	r2, r3, #7
    25f8:	4613      	mov	r3, r2
    25fa:	009b      	lsls	r3, r3, #2
    25fc:	4413      	add	r3, r2
    25fe:	221f      	movs	r2, #31
    2600:	fa02 f303 	lsl.w	r3, r2, r3
    2604:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2606:	68bb      	ldr	r3, [r7, #8]
    2608:	43db      	mvns	r3, r3
    260a:	68fa      	ldr	r2, [r7, #12]
    260c:	4013      	ands	r3, r2
    260e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    2610:	78f9      	ldrb	r1, [r7, #3]
    2612:	78bb      	ldrb	r3, [r7, #2]
    2614:	1fda      	subs	r2, r3, #7
    2616:	4613      	mov	r3, r2
    2618:	009b      	lsls	r3, r3, #2
    261a:	4413      	add	r3, r2
    261c:	fa01 f303 	lsl.w	r3, r1, r3
    2620:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2622:	68fa      	ldr	r2, [r7, #12]
    2624:	68bb      	ldr	r3, [r7, #8]
    2626:	4313      	orrs	r3, r2
    2628:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	68fa      	ldr	r2, [r7, #12]
    262e:	631a      	str	r2, [r3, #48]	; 0x30
    2630:	e022      	b.n	2678 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2636:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    2638:	78bb      	ldrb	r3, [r7, #2]
    263a:	f1a3 020d 	sub.w	r2, r3, #13
    263e:	4613      	mov	r3, r2
    2640:	009b      	lsls	r3, r3, #2
    2642:	4413      	add	r3, r2
    2644:	221f      	movs	r2, #31
    2646:	fa02 f303 	lsl.w	r3, r2, r3
    264a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    264c:	68bb      	ldr	r3, [r7, #8]
    264e:	43db      	mvns	r3, r3
    2650:	68fa      	ldr	r2, [r7, #12]
    2652:	4013      	ands	r3, r2
    2654:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    2656:	78f9      	ldrb	r1, [r7, #3]
    2658:	78bb      	ldrb	r3, [r7, #2]
    265a:	f1a3 020d 	sub.w	r2, r3, #13
    265e:	4613      	mov	r3, r2
    2660:	009b      	lsls	r3, r3, #2
    2662:	4413      	add	r3, r2
    2664:	fa01 f303 	lsl.w	r3, r1, r3
    2668:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    266a:	68fa      	ldr	r2, [r7, #12]
    266c:	68bb      	ldr	r3, [r7, #8]
    266e:	4313      	orrs	r3, r2
    2670:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	68fa      	ldr	r2, [r7, #12]
    2676:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
    2678:	3714      	adds	r7, #20
    267a:	46bd      	mov	sp, r7
    267c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2680:	4770      	bx	lr
    2682:	bf00      	nop

00002684 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2684:	b480      	push	{r7}
    2686:	b083      	sub	sp, #12
    2688:	af00      	add	r7, sp, #0
    268a:	6078      	str	r0, [r7, #4]
    268c:	460b      	mov	r3, r1
    268e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2690:	78fb      	ldrb	r3, [r7, #3]
    2692:	2b00      	cmp	r3, #0
    2694:	d006      	beq.n	26a4 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	689b      	ldr	r3, [r3, #8]
    269a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	609a      	str	r2, [r3, #8]
    26a2:	e005      	b.n	26b0 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	689b      	ldr	r3, [r3, #8]
    26a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	609a      	str	r2, [r3, #8]
  }
}
    26b0:	370c      	adds	r7, #12
    26b2:	46bd      	mov	sp, r7
    26b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop

000026bc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    26bc:	b480      	push	{r7}
    26be:	b083      	sub	sp, #12
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    26c8:	b29b      	uxth	r3, r3
}
    26ca:	4618      	mov	r0, r3
    26cc:	370c      	adds	r7, #12
    26ce:	46bd      	mov	sp, r7
    26d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop

000026d8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    26d8:	b480      	push	{r7}
    26da:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    26dc:	4b03      	ldr	r3, [pc, #12]	; (26ec <ADC_GetDualModeConversionValue+0x14>)
    26de:	681b      	ldr	r3, [r3, #0]
}
    26e0:	4618      	mov	r0, r3
    26e2:	46bd      	mov	sp, r7
    26e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	4001244c 	.word	0x4001244c

000026f0 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    26f0:	b480      	push	{r7}
    26f2:	b083      	sub	sp, #12
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
    26f8:	460b      	mov	r3, r1
    26fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    26fc:	78fb      	ldrb	r3, [r7, #3]
    26fe:	2b00      	cmp	r3, #0
    2700:	d006      	beq.n	2710 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	685b      	ldr	r3, [r3, #4]
    2706:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	605a      	str	r2, [r3, #4]
    270e:	e005      	b.n	271c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	685b      	ldr	r3, [r3, #4]
    2714:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	605a      	str	r2, [r3, #4]
  }
}
    271c:	370c      	adds	r7, #12
    271e:	46bd      	mov	sp, r7
    2720:	f85d 7b04 	ldr.w	r7, [sp], #4
    2724:	4770      	bx	lr
    2726:	bf00      	nop

00002728 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2728:	b480      	push	{r7}
    272a:	b083      	sub	sp, #12
    272c:	af00      	add	r7, sp, #0
    272e:	6078      	str	r0, [r7, #4]
    2730:	460b      	mov	r3, r1
    2732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2734:	78fb      	ldrb	r3, [r7, #3]
    2736:	2b00      	cmp	r3, #0
    2738:	d006      	beq.n	2748 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	685b      	ldr	r3, [r3, #4]
    273e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	605a      	str	r2, [r3, #4]
    2746:	e005      	b.n	2754 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	685b      	ldr	r3, [r3, #4]
    274c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	605a      	str	r2, [r3, #4]
  }
}
    2754:	370c      	adds	r7, #12
    2756:	46bd      	mov	sp, r7
    2758:	f85d 7b04 	ldr.w	r7, [sp], #4
    275c:	4770      	bx	lr
    275e:	bf00      	nop

00002760 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    2760:	b480      	push	{r7}
    2762:	b085      	sub	sp, #20
    2764:	af00      	add	r7, sp, #0
    2766:	6078      	str	r0, [r7, #4]
    2768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    276a:	2300      	movs	r3, #0
    276c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	689b      	ldr	r3, [r3, #8]
    2772:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    2774:	68fb      	ldr	r3, [r7, #12]
    2776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    277a:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    277c:	68fa      	ldr	r2, [r7, #12]
    277e:	683b      	ldr	r3, [r7, #0]
    2780:	4313      	orrs	r3, r2
    2782:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	68fa      	ldr	r2, [r7, #12]
    2788:	609a      	str	r2, [r3, #8]
}
    278a:	3714      	adds	r7, #20
    278c:	46bd      	mov	sp, r7
    278e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2792:	4770      	bx	lr

00002794 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2794:	b480      	push	{r7}
    2796:	b083      	sub	sp, #12
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
    279c:	460b      	mov	r3, r1
    279e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    27a0:	78fb      	ldrb	r3, [r7, #3]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d006      	beq.n	27b4 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	689b      	ldr	r3, [r3, #8]
    27aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	609a      	str	r2, [r3, #8]
    27b2:	e005      	b.n	27c0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	689b      	ldr	r3, [r3, #8]
    27b8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	609a      	str	r2, [r3, #8]
  }
}
    27c0:	370c      	adds	r7, #12
    27c2:	46bd      	mov	sp, r7
    27c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop

000027cc <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    27cc:	b480      	push	{r7}
    27ce:	b083      	sub	sp, #12
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
    27d4:	460b      	mov	r3, r1
    27d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    27d8:	78fb      	ldrb	r3, [r7, #3]
    27da:	2b00      	cmp	r3, #0
    27dc:	d006      	beq.n	27ec <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	689b      	ldr	r3, [r3, #8]
    27e2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	609a      	str	r2, [r3, #8]
    27ea:	e005      	b.n	27f8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	689b      	ldr	r3, [r3, #8]
    27f0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	609a      	str	r2, [r3, #8]
  }
}
    27f8:	370c      	adds	r7, #12
    27fa:	46bd      	mov	sp, r7
    27fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2800:	4770      	bx	lr
    2802:	bf00      	nop

00002804 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    2804:	b480      	push	{r7}
    2806:	b085      	sub	sp, #20
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    280c:	2300      	movs	r3, #0
    280e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	689b      	ldr	r3, [r3, #8]
    2814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    2818:	2b00      	cmp	r3, #0
    281a:	d002      	beq.n	2822 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    281c:	2301      	movs	r3, #1
    281e:	73fb      	strb	r3, [r7, #15]
    2820:	e001      	b.n	2826 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    2822:	2300      	movs	r3, #0
    2824:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    2826:	7bfb      	ldrb	r3, [r7, #15]
}
    2828:	4618      	mov	r0, r3
    282a:	3714      	adds	r7, #20
    282c:	46bd      	mov	sp, r7
    282e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2832:	4770      	bx	lr

00002834 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2834:	b480      	push	{r7}
    2836:	b087      	sub	sp, #28
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    283c:	70f9      	strb	r1, [r7, #3]
    283e:	70ba      	strb	r2, [r7, #2]
    2840:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    2842:	2300      	movs	r3, #0
    2844:	617b      	str	r3, [r7, #20]
    2846:	2300      	movs	r3, #0
    2848:	613b      	str	r3, [r7, #16]
    284a:	2300      	movs	r3, #0
    284c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    284e:	78fb      	ldrb	r3, [r7, #3]
    2850:	2b09      	cmp	r3, #9
    2852:	d923      	bls.n	289c <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	68db      	ldr	r3, [r3, #12]
    2858:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    285a:	78fb      	ldrb	r3, [r7, #3]
    285c:	f1a3 020a 	sub.w	r2, r3, #10
    2860:	4613      	mov	r3, r2
    2862:	005b      	lsls	r3, r3, #1
    2864:	4413      	add	r3, r2
    2866:	2207      	movs	r2, #7
    2868:	fa02 f303 	lsl.w	r3, r2, r3
    286c:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    286e:	693b      	ldr	r3, [r7, #16]
    2870:	43db      	mvns	r3, r3
    2872:	697a      	ldr	r2, [r7, #20]
    2874:	4013      	ands	r3, r2
    2876:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    2878:	7879      	ldrb	r1, [r7, #1]
    287a:	78fb      	ldrb	r3, [r7, #3]
    287c:	f1a3 020a 	sub.w	r2, r3, #10
    2880:	4613      	mov	r3, r2
    2882:	005b      	lsls	r3, r3, #1
    2884:	4413      	add	r3, r2
    2886:	fa01 f303 	lsl.w	r3, r1, r3
    288a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    288c:	697a      	ldr	r2, [r7, #20]
    288e:	693b      	ldr	r3, [r7, #16]
    2890:	4313      	orrs	r3, r2
    2892:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	697a      	ldr	r2, [r7, #20]
    2898:	60da      	str	r2, [r3, #12]
    289a:	e01e      	b.n	28da <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	691b      	ldr	r3, [r3, #16]
    28a0:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    28a2:	78fa      	ldrb	r2, [r7, #3]
    28a4:	4613      	mov	r3, r2
    28a6:	005b      	lsls	r3, r3, #1
    28a8:	4413      	add	r3, r2
    28aa:	2207      	movs	r2, #7
    28ac:	fa02 f303 	lsl.w	r3, r2, r3
    28b0:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    28b2:	693b      	ldr	r3, [r7, #16]
    28b4:	43db      	mvns	r3, r3
    28b6:	697a      	ldr	r2, [r7, #20]
    28b8:	4013      	ands	r3, r2
    28ba:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    28bc:	7879      	ldrb	r1, [r7, #1]
    28be:	78fa      	ldrb	r2, [r7, #3]
    28c0:	4613      	mov	r3, r2
    28c2:	005b      	lsls	r3, r3, #1
    28c4:	4413      	add	r3, r2
    28c6:	fa01 f303 	lsl.w	r3, r1, r3
    28ca:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    28cc:	697a      	ldr	r2, [r7, #20]
    28ce:	693b      	ldr	r3, [r7, #16]
    28d0:	4313      	orrs	r3, r2
    28d2:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	697a      	ldr	r2, [r7, #20]
    28d8:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28de:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    28e0:	697b      	ldr	r3, [r7, #20]
    28e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    28e6:	0d1b      	lsrs	r3, r3, #20
    28e8:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    28ea:	68fb      	ldr	r3, [r7, #12]
    28ec:	b2db      	uxtb	r3, r3
    28ee:	78ba      	ldrb	r2, [r7, #2]
    28f0:	1ad3      	subs	r3, r2, r3
    28f2:	b2db      	uxtb	r3, r3
    28f4:	3302      	adds	r3, #2
    28f6:	b2db      	uxtb	r3, r3
    28f8:	461a      	mov	r2, r3
    28fa:	4613      	mov	r3, r2
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	4413      	add	r3, r2
    2900:	221f      	movs	r2, #31
    2902:	fa02 f303 	lsl.w	r3, r2, r3
    2906:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    2908:	693b      	ldr	r3, [r7, #16]
    290a:	43db      	mvns	r3, r3
    290c:	697a      	ldr	r2, [r7, #20]
    290e:	4013      	ands	r3, r2
    2910:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    2912:	78f9      	ldrb	r1, [r7, #3]
    2914:	68fb      	ldr	r3, [r7, #12]
    2916:	b2db      	uxtb	r3, r3
    2918:	78ba      	ldrb	r2, [r7, #2]
    291a:	1ad3      	subs	r3, r2, r3
    291c:	b2db      	uxtb	r3, r3
    291e:	3302      	adds	r3, #2
    2920:	b2db      	uxtb	r3, r3
    2922:	461a      	mov	r2, r3
    2924:	4613      	mov	r3, r2
    2926:	009b      	lsls	r3, r3, #2
    2928:	4413      	add	r3, r2
    292a:	fa01 f303 	lsl.w	r3, r1, r3
    292e:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    2930:	697a      	ldr	r2, [r7, #20]
    2932:	693b      	ldr	r3, [r7, #16]
    2934:	4313      	orrs	r3, r2
    2936:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	697a      	ldr	r2, [r7, #20]
    293c:	639a      	str	r2, [r3, #56]	; 0x38
}
    293e:	371c      	adds	r7, #28
    2940:	46bd      	mov	sp, r7
    2942:	f85d 7b04 	ldr.w	r7, [sp], #4
    2946:	4770      	bx	lr

00002948 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    2948:	b480      	push	{r7}
    294a:	b085      	sub	sp, #20
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
    2950:	460b      	mov	r3, r1
    2952:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    2954:	2300      	movs	r3, #0
    2956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2958:	2300      	movs	r3, #0
    295a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2960:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    2962:	68fb      	ldr	r3, [r7, #12]
    2964:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    2968:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    296a:	78fb      	ldrb	r3, [r7, #3]
    296c:	3b01      	subs	r3, #1
    296e:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    2970:	68bb      	ldr	r3, [r7, #8]
    2972:	051b      	lsls	r3, r3, #20
    2974:	68fa      	ldr	r2, [r7, #12]
    2976:	4313      	orrs	r3, r2
    2978:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	68fa      	ldr	r2, [r7, #12]
    297e:	639a      	str	r2, [r3, #56]	; 0x38
}
    2980:	3714      	adds	r7, #20
    2982:	46bd      	mov	sp, r7
    2984:	f85d 7b04 	ldr.w	r7, [sp], #4
    2988:	4770      	bx	lr
    298a:	bf00      	nop

0000298c <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    298c:	b480      	push	{r7}
    298e:	b085      	sub	sp, #20
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
    2994:	4613      	mov	r3, r2
    2996:	460a      	mov	r2, r1
    2998:	70fa      	strb	r2, [r7, #3]
    299a:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    299c:	2300      	movs	r3, #0
    299e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    29a4:	78fa      	ldrb	r2, [r7, #3]
    29a6:	68fb      	ldr	r3, [r7, #12]
    29a8:	4413      	add	r3, r2
    29aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    29ac:	68fb      	ldr	r3, [r7, #12]
    29ae:	883a      	ldrh	r2, [r7, #0]
    29b0:	601a      	str	r2, [r3, #0]
}
    29b2:	3714      	adds	r7, #20
    29b4:	46bd      	mov	sp, r7
    29b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ba:	4770      	bx	lr

000029bc <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    29bc:	b480      	push	{r7}
    29be:	b085      	sub	sp, #20
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
    29c4:	460b      	mov	r3, r1
    29c6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    29c8:	2300      	movs	r3, #0
    29ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    29d0:	78fa      	ldrb	r2, [r7, #3]
    29d2:	68fb      	ldr	r3, [r7, #12]
    29d4:	4413      	add	r3, r2
    29d6:	3328      	adds	r3, #40	; 0x28
    29d8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    29da:	68fb      	ldr	r3, [r7, #12]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	b29b      	uxth	r3, r3
}
    29e0:	4618      	mov	r0, r3
    29e2:	3714      	adds	r7, #20
    29e4:	46bd      	mov	sp, r7
    29e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ea:	4770      	bx	lr

000029ec <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    29ec:	b480      	push	{r7}
    29ee:	b085      	sub	sp, #20
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    29f6:	2300      	movs	r3, #0
    29f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	685b      	ldr	r3, [r3, #4]
    29fe:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    2a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2a0a:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    2a0c:	68fa      	ldr	r2, [r7, #12]
    2a0e:	683b      	ldr	r3, [r7, #0]
    2a10:	4313      	orrs	r3, r2
    2a12:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	68fa      	ldr	r2, [r7, #12]
    2a18:	605a      	str	r2, [r3, #4]
}
    2a1a:	3714      	adds	r7, #20
    2a1c:	46bd      	mov	sp, r7
    2a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a22:	4770      	bx	lr

00002a24 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    2a24:	b480      	push	{r7}
    2a26:	b083      	sub	sp, #12
    2a28:	af00      	add	r7, sp, #0
    2a2a:	6078      	str	r0, [r7, #4]
    2a2c:	4613      	mov	r3, r2
    2a2e:	460a      	mov	r2, r1
    2a30:	807a      	strh	r2, [r7, #2]
    2a32:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    2a34:	887a      	ldrh	r2, [r7, #2]
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    2a3a:	883a      	ldrh	r2, [r7, #0]
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
    2a40:	370c      	adds	r7, #12
    2a42:	46bd      	mov	sp, r7
    2a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop

00002a4c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    2a4c:	b480      	push	{r7}
    2a4e:	b085      	sub	sp, #20
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
    2a54:	460b      	mov	r3, r1
    2a56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    2a58:	2300      	movs	r3, #0
    2a5a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	685b      	ldr	r3, [r3, #4]
    2a60:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	f023 031f 	bic.w	r3, r3, #31
    2a68:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    2a6a:	78fb      	ldrb	r3, [r7, #3]
    2a6c:	68fa      	ldr	r2, [r7, #12]
    2a6e:	4313      	orrs	r3, r2
    2a70:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	68fa      	ldr	r2, [r7, #12]
    2a76:	605a      	str	r2, [r3, #4]
}
    2a78:	3714      	adds	r7, #20
    2a7a:	46bd      	mov	sp, r7
    2a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop

00002a84 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    2a84:	b480      	push	{r7}
    2a86:	b083      	sub	sp, #12
    2a88:	af00      	add	r7, sp, #0
    2a8a:	4603      	mov	r3, r0
    2a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2a8e:	79fb      	ldrb	r3, [r7, #7]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d006      	beq.n	2aa2 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    2a94:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <ADC_TempSensorVrefintCmd+0x34>)
    2a96:	4a08      	ldr	r2, [pc, #32]	; (2ab8 <ADC_TempSensorVrefintCmd+0x34>)
    2a98:	6892      	ldr	r2, [r2, #8]
    2a9a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    2a9e:	609a      	str	r2, [r3, #8]
    2aa0:	e005      	b.n	2aae <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    2aa2:	4b05      	ldr	r3, [pc, #20]	; (2ab8 <ADC_TempSensorVrefintCmd+0x34>)
    2aa4:	4a04      	ldr	r2, [pc, #16]	; (2ab8 <ADC_TempSensorVrefintCmd+0x34>)
    2aa6:	6892      	ldr	r2, [r2, #8]
    2aa8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    2aac:	609a      	str	r2, [r3, #8]
  }
}
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr
    2ab8:	40012400 	.word	0x40012400

00002abc <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    2abc:	b480      	push	{r7}
    2abe:	b085      	sub	sp, #20
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
    2ac4:	460b      	mov	r3, r1
    2ac6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    2ac8:	2300      	movs	r3, #0
    2aca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	681a      	ldr	r2, [r3, #0]
    2ad0:	78fb      	ldrb	r3, [r7, #3]
    2ad2:	4013      	ands	r3, r2
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d002      	beq.n	2ade <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    2ad8:	2301      	movs	r3, #1
    2ada:	73fb      	strb	r3, [r7, #15]
    2adc:	e001      	b.n	2ae2 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    2ade:	2300      	movs	r3, #0
    2ae0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    2ae2:	7bfb      	ldrb	r3, [r7, #15]
}
    2ae4:	4618      	mov	r0, r3
    2ae6:	3714      	adds	r7, #20
    2ae8:	46bd      	mov	sp, r7
    2aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aee:	4770      	bx	lr

00002af0 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    2af0:	b480      	push	{r7}
    2af2:	b083      	sub	sp, #12
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
    2af8:	460b      	mov	r3, r1
    2afa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    2afc:	78fb      	ldrb	r3, [r7, #3]
    2afe:	43da      	mvns	r2, r3
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	601a      	str	r2, [r3, #0]
}
    2b04:	370c      	adds	r7, #12
    2b06:	46bd      	mov	sp, r7
    2b08:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop

00002b10 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    2b18:	460b      	mov	r3, r1
    2b1a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    2b1c:	2300      	movs	r3, #0
    2b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    2b20:	2300      	movs	r3, #0
    2b22:	613b      	str	r3, [r7, #16]
    2b24:	2300      	movs	r3, #0
    2b26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    2b28:	887b      	ldrh	r3, [r7, #2]
    2b2a:	0a1b      	lsrs	r3, r3, #8
    2b2c:	b29b      	uxth	r3, r3
    2b2e:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	685a      	ldr	r2, [r3, #4]
    2b34:	887b      	ldrh	r3, [r7, #2]
    2b36:	b2db      	uxtb	r3, r3
    2b38:	4013      	ands	r3, r2
    2b3a:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	681a      	ldr	r2, [r3, #0]
    2b40:	693b      	ldr	r3, [r7, #16]
    2b42:	4013      	ands	r3, r2
    2b44:	2b00      	cmp	r3, #0
    2b46:	d005      	beq.n	2b54 <ADC_GetITStatus+0x44>
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d002      	beq.n	2b54 <ADC_GetITStatus+0x44>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    2b4e:	2301      	movs	r3, #1
    2b50:	75fb      	strb	r3, [r7, #23]
    2b52:	e001      	b.n	2b58 <ADC_GetITStatus+0x48>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    2b54:	2300      	movs	r3, #0
    2b56:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    2b58:	7dfb      	ldrb	r3, [r7, #23]
}
    2b5a:	4618      	mov	r0, r3
    2b5c:	371c      	adds	r7, #28
    2b5e:	46bd      	mov	sp, r7
    2b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop

00002b68 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    2b68:	b480      	push	{r7}
    2b6a:	b085      	sub	sp, #20
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	6078      	str	r0, [r7, #4]
    2b70:	460b      	mov	r3, r1
    2b72:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    2b74:	2300      	movs	r3, #0
    2b76:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    2b78:	887b      	ldrh	r3, [r7, #2]
    2b7a:	0a1b      	lsrs	r3, r3, #8
    2b7c:	b29b      	uxth	r3, r3
    2b7e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    2b80:	7bfb      	ldrb	r3, [r7, #15]
    2b82:	43da      	mvns	r2, r3
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	601a      	str	r2, [r3, #0]
}
    2b88:	3714      	adds	r7, #20
    2b8a:	46bd      	mov	sp, r7
    2b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop

00002b94 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    2b94:	b580      	push	{r7, lr}
    2b96:	b082      	sub	sp, #8
    2b98:	af00      	add	r7, sp, #0
    2b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2b9c:	687a      	ldr	r2, [r7, #4]
    2b9e:	4b78      	ldr	r3, [pc, #480]	; (2d80 <TIM_DeInit+0x1ec>)
    2ba0:	429a      	cmp	r2, r3
    2ba2:	d10a      	bne.n	2bba <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    2ba4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2ba8:	2101      	movs	r1, #1
    2baa:	f7fe f989 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2bae:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2bb2:	2100      	movs	r1, #0
    2bb4:	f7fe f984 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2bb8:	e0de      	b.n	2d78 <TIM_DeInit+0x1e4>
  }     
  else if (TIMx == TIM2)
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    2bc0:	d108      	bne.n	2bd4 <TIM_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    2bc2:	2001      	movs	r0, #1
    2bc4:	2101      	movs	r1, #1
    2bc6:	f7fe f999 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    2bca:	2001      	movs	r0, #1
    2bcc:	2100      	movs	r1, #0
    2bce:	f7fe f995 	bl	efc <RCC_APB1PeriphResetCmd>
    2bd2:	e0d1      	b.n	2d78 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM3)
    2bd4:	687a      	ldr	r2, [r7, #4]
    2bd6:	4b6b      	ldr	r3, [pc, #428]	; (2d84 <TIM_DeInit+0x1f0>)
    2bd8:	429a      	cmp	r2, r3
    2bda:	d108      	bne.n	2bee <TIM_DeInit+0x5a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2bdc:	2002      	movs	r0, #2
    2bde:	2101      	movs	r1, #1
    2be0:	f7fe f98c 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    2be4:	2002      	movs	r0, #2
    2be6:	2100      	movs	r1, #0
    2be8:	f7fe f988 	bl	efc <RCC_APB1PeriphResetCmd>
    2bec:	e0c4      	b.n	2d78 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM4)
    2bee:	687a      	ldr	r2, [r7, #4]
    2bf0:	4b65      	ldr	r3, [pc, #404]	; (2d88 <TIM_DeInit+0x1f4>)
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d108      	bne.n	2c08 <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2bf6:	2004      	movs	r0, #4
    2bf8:	2101      	movs	r1, #1
    2bfa:	f7fe f97f 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    2bfe:	2004      	movs	r0, #4
    2c00:	2100      	movs	r1, #0
    2c02:	f7fe f97b 	bl	efc <RCC_APB1PeriphResetCmd>
    2c06:	e0b7      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM5)
    2c08:	687a      	ldr	r2, [r7, #4]
    2c0a:	4b60      	ldr	r3, [pc, #384]	; (2d8c <TIM_DeInit+0x1f8>)
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d108      	bne.n	2c22 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2c10:	2008      	movs	r0, #8
    2c12:	2101      	movs	r1, #1
    2c14:	f7fe f972 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    2c18:	2008      	movs	r0, #8
    2c1a:	2100      	movs	r1, #0
    2c1c:	f7fe f96e 	bl	efc <RCC_APB1PeriphResetCmd>
    2c20:	e0aa      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM6)
    2c22:	687a      	ldr	r2, [r7, #4]
    2c24:	4b5a      	ldr	r3, [pc, #360]	; (2d90 <TIM_DeInit+0x1fc>)
    2c26:	429a      	cmp	r2, r3
    2c28:	d108      	bne.n	2c3c <TIM_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    2c2a:	2010      	movs	r0, #16
    2c2c:	2101      	movs	r1, #1
    2c2e:	f7fe f965 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    2c32:	2010      	movs	r0, #16
    2c34:	2100      	movs	r1, #0
    2c36:	f7fe f961 	bl	efc <RCC_APB1PeriphResetCmd>
    2c3a:	e09d      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM7)
    2c3c:	687a      	ldr	r2, [r7, #4]
    2c3e:	4b55      	ldr	r3, [pc, #340]	; (2d94 <TIM_DeInit+0x200>)
    2c40:	429a      	cmp	r2, r3
    2c42:	d108      	bne.n	2c56 <TIM_DeInit+0xc2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    2c44:	2020      	movs	r0, #32
    2c46:	2101      	movs	r1, #1
    2c48:	f7fe f958 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    2c4c:	2020      	movs	r0, #32
    2c4e:	2100      	movs	r1, #0
    2c50:	f7fe f954 	bl	efc <RCC_APB1PeriphResetCmd>
    2c54:	e090      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM8)
    2c56:	687a      	ldr	r2, [r7, #4]
    2c58:	4b4f      	ldr	r3, [pc, #316]	; (2d98 <TIM_DeInit+0x204>)
    2c5a:	429a      	cmp	r2, r3
    2c5c:	d10a      	bne.n	2c74 <TIM_DeInit+0xe0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    2c5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    2c62:	2101      	movs	r1, #1
    2c64:	f7fe f92c 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    2c6c:	2100      	movs	r1, #0
    2c6e:	f7fe f927 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2c72:	e081      	b.n	2d78 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM9)
    2c74:	687a      	ldr	r2, [r7, #4]
    2c76:	4b49      	ldr	r3, [pc, #292]	; (2d9c <TIM_DeInit+0x208>)
    2c78:	429a      	cmp	r2, r3
    2c7a:	d10a      	bne.n	2c92 <TIM_DeInit+0xfe>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    2c7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2c80:	2101      	movs	r1, #1
    2c82:	f7fe f91d 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    2c86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2c8a:	2100      	movs	r1, #0
    2c8c:	f7fe f918 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2c90:	e072      	b.n	2d78 <TIM_DeInit+0x1e4>
   }  
  else if (TIMx == TIM10)
    2c92:	687a      	ldr	r2, [r7, #4]
    2c94:	4b42      	ldr	r3, [pc, #264]	; (2da0 <TIM_DeInit+0x20c>)
    2c96:	429a      	cmp	r2, r3
    2c98:	d10a      	bne.n	2cb0 <TIM_DeInit+0x11c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    2c9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2c9e:	2101      	movs	r1, #1
    2ca0:	f7fe f90e 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    2ca4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2ca8:	2100      	movs	r1, #0
    2caa:	f7fe f909 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2cae:	e063      	b.n	2d78 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM11) 
    2cb0:	687a      	ldr	r2, [r7, #4]
    2cb2:	4b3c      	ldr	r3, [pc, #240]	; (2da4 <TIM_DeInit+0x210>)
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d10a      	bne.n	2cce <TIM_DeInit+0x13a>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    2cb8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    2cbc:	2101      	movs	r1, #1
    2cbe:	f7fe f8ff 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    2cc2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    2cc6:	2100      	movs	r1, #0
    2cc8:	f7fe f8fa 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2ccc:	e054      	b.n	2d78 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM12)
    2cce:	687a      	ldr	r2, [r7, #4]
    2cd0:	4b35      	ldr	r3, [pc, #212]	; (2da8 <TIM_DeInit+0x214>)
    2cd2:	429a      	cmp	r2, r3
    2cd4:	d108      	bne.n	2ce8 <TIM_DeInit+0x154>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    2cd6:	2040      	movs	r0, #64	; 0x40
    2cd8:	2101      	movs	r1, #1
    2cda:	f7fe f90f 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    2cde:	2040      	movs	r0, #64	; 0x40
    2ce0:	2100      	movs	r1, #0
    2ce2:	f7fe f90b 	bl	efc <RCC_APB1PeriphResetCmd>
    2ce6:	e047      	b.n	2d78 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM13) 
    2ce8:	687a      	ldr	r2, [r7, #4]
    2cea:	4b30      	ldr	r3, [pc, #192]	; (2dac <TIM_DeInit+0x218>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d108      	bne.n	2d02 <TIM_DeInit+0x16e>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    2cf0:	2080      	movs	r0, #128	; 0x80
    2cf2:	2101      	movs	r1, #1
    2cf4:	f7fe f902 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    2cf8:	2080      	movs	r0, #128	; 0x80
    2cfa:	2100      	movs	r1, #0
    2cfc:	f7fe f8fe 	bl	efc <RCC_APB1PeriphResetCmd>
    2d00:	e03a      	b.n	2d78 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM14) 
    2d02:	687a      	ldr	r2, [r7, #4]
    2d04:	4b2a      	ldr	r3, [pc, #168]	; (2db0 <TIM_DeInit+0x21c>)
    2d06:	429a      	cmp	r2, r3
    2d08:	d10a      	bne.n	2d20 <TIM_DeInit+0x18c>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    2d0a:	f44f 7080 	mov.w	r0, #256	; 0x100
    2d0e:	2101      	movs	r1, #1
    2d10:	f7fe f8f4 	bl	efc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    2d14:	f44f 7080 	mov.w	r0, #256	; 0x100
    2d18:	2100      	movs	r1, #0
    2d1a:	f7fe f8ef 	bl	efc <RCC_APB1PeriphResetCmd>
    2d1e:	e02b      	b.n	2d78 <TIM_DeInit+0x1e4>
  }        
  else if (TIMx == TIM15)
    2d20:	687a      	ldr	r2, [r7, #4]
    2d22:	4b24      	ldr	r3, [pc, #144]	; (2db4 <TIM_DeInit+0x220>)
    2d24:	429a      	cmp	r2, r3
    2d26:	d10a      	bne.n	2d3e <TIM_DeInit+0x1aa>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    2d28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2d2c:	2101      	movs	r1, #1
    2d2e:	f7fe f8c7 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    2d32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2d36:	2100      	movs	r1, #0
    2d38:	f7fe f8c2 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2d3c:	e01c      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM16)
    2d3e:	687a      	ldr	r2, [r7, #4]
    2d40:	4b1d      	ldr	r3, [pc, #116]	; (2db8 <TIM_DeInit+0x224>)
    2d42:	429a      	cmp	r2, r3
    2d44:	d10a      	bne.n	2d5c <TIM_DeInit+0x1c8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    2d46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2d4a:	2101      	movs	r1, #1
    2d4c:	f7fe f8b8 	bl	ec0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    2d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2d54:	2100      	movs	r1, #0
    2d56:	f7fe f8b3 	bl	ec0 <RCC_APB2PeriphResetCmd>
    2d5a:	e00d      	b.n	2d78 <TIM_DeInit+0x1e4>
  } 
  else
  {
    if (TIMx == TIM17)
    2d5c:	687a      	ldr	r2, [r7, #4]
    2d5e:	4b17      	ldr	r3, [pc, #92]	; (2dbc <TIM_DeInit+0x228>)
    2d60:	429a      	cmp	r2, r3
    2d62:	d109      	bne.n	2d78 <TIM_DeInit+0x1e4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    2d64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2d68:	2101      	movs	r1, #1
    2d6a:	f7fe f8a9 	bl	ec0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    2d6e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2d72:	2100      	movs	r1, #0
    2d74:	f7fe f8a4 	bl	ec0 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2d78:	3708      	adds	r7, #8
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bd80      	pop	{r7, pc}
    2d7e:	bf00      	nop
    2d80:	40012c00 	.word	0x40012c00
    2d84:	40000400 	.word	0x40000400
    2d88:	40000800 	.word	0x40000800
    2d8c:	40000c00 	.word	0x40000c00
    2d90:	40001000 	.word	0x40001000
    2d94:	40001400 	.word	0x40001400
    2d98:	40013400 	.word	0x40013400
    2d9c:	40014c00 	.word	0x40014c00
    2da0:	40015000 	.word	0x40015000
    2da4:	40015400 	.word	0x40015400
    2da8:	40001800 	.word	0x40001800
    2dac:	40001c00 	.word	0x40001c00
    2db0:	40002000 	.word	0x40002000
    2db4:	40014000 	.word	0x40014000
    2db8:	40014400 	.word	0x40014400
    2dbc:	40014800 	.word	0x40014800

00002dc0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2dc0:	b480      	push	{r7}
    2dc2:	b085      	sub	sp, #20
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    2dca:	2300      	movs	r3, #0
    2dcc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	881b      	ldrh	r3, [r3, #0]
    2dd2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    2dd4:	687a      	ldr	r2, [r7, #4]
    2dd6:	4b2e      	ldr	r3, [pc, #184]	; (2e90 <TIM_TimeBaseInit+0xd0>)
    2dd8:	429a      	cmp	r2, r3
    2dda:	d013      	beq.n	2e04 <TIM_TimeBaseInit+0x44>
    2ddc:	687a      	ldr	r2, [r7, #4]
    2dde:	4b2d      	ldr	r3, [pc, #180]	; (2e94 <TIM_TimeBaseInit+0xd4>)
    2de0:	429a      	cmp	r2, r3
    2de2:	d00f      	beq.n	2e04 <TIM_TimeBaseInit+0x44>
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    2dea:	d00b      	beq.n	2e04 <TIM_TimeBaseInit+0x44>
    2dec:	687a      	ldr	r2, [r7, #4]
    2dee:	4b2a      	ldr	r3, [pc, #168]	; (2e98 <TIM_TimeBaseInit+0xd8>)
    2df0:	429a      	cmp	r2, r3
    2df2:	d007      	beq.n	2e04 <TIM_TimeBaseInit+0x44>
    2df4:	687a      	ldr	r2, [r7, #4]
    2df6:	4b29      	ldr	r3, [pc, #164]	; (2e9c <TIM_TimeBaseInit+0xdc>)
    2df8:	429a      	cmp	r2, r3
    2dfa:	d003      	beq.n	2e04 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    2dfc:	687a      	ldr	r2, [r7, #4]
    2dfe:	4b28      	ldr	r3, [pc, #160]	; (2ea0 <TIM_TimeBaseInit+0xe0>)
    2e00:	429a      	cmp	r2, r3
    2e02:	d108      	bne.n	2e16 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    2e04:	89fb      	ldrh	r3, [r7, #14]
    2e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    2e0a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    2e0c:	683b      	ldr	r3, [r7, #0]
    2e0e:	885a      	ldrh	r2, [r3, #2]
    2e10:	89fb      	ldrh	r3, [r7, #14]
    2e12:	4313      	orrs	r3, r2
    2e14:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    2e16:	687a      	ldr	r2, [r7, #4]
    2e18:	4b22      	ldr	r3, [pc, #136]	; (2ea4 <TIM_TimeBaseInit+0xe4>)
    2e1a:	429a      	cmp	r2, r3
    2e1c:	d00c      	beq.n	2e38 <TIM_TimeBaseInit+0x78>
    2e1e:	687a      	ldr	r2, [r7, #4]
    2e20:	4b21      	ldr	r3, [pc, #132]	; (2ea8 <TIM_TimeBaseInit+0xe8>)
    2e22:	429a      	cmp	r2, r3
    2e24:	d008      	beq.n	2e38 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    2e26:	89fb      	ldrh	r3, [r7, #14]
    2e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    2e2c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	88da      	ldrh	r2, [r3, #6]
    2e32:	89fb      	ldrh	r3, [r7, #14]
    2e34:	4313      	orrs	r3, r2
    2e36:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	89fa      	ldrh	r2, [r7, #14]
    2e3c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    2e3e:	683b      	ldr	r3, [r7, #0]
    2e40:	889a      	ldrh	r2, [r3, #4]
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	881a      	ldrh	r2, [r3, #0]
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    2e4e:	687a      	ldr	r2, [r7, #4]
    2e50:	4b0f      	ldr	r3, [pc, #60]	; (2e90 <TIM_TimeBaseInit+0xd0>)
    2e52:	429a      	cmp	r2, r3
    2e54:	d00f      	beq.n	2e76 <TIM_TimeBaseInit+0xb6>
    2e56:	687a      	ldr	r2, [r7, #4]
    2e58:	4b0e      	ldr	r3, [pc, #56]	; (2e94 <TIM_TimeBaseInit+0xd4>)
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d00b      	beq.n	2e76 <TIM_TimeBaseInit+0xb6>
    2e5e:	687a      	ldr	r2, [r7, #4]
    2e60:	4b12      	ldr	r3, [pc, #72]	; (2eac <TIM_TimeBaseInit+0xec>)
    2e62:	429a      	cmp	r2, r3
    2e64:	d007      	beq.n	2e76 <TIM_TimeBaseInit+0xb6>
    2e66:	687a      	ldr	r2, [r7, #4]
    2e68:	4b11      	ldr	r3, [pc, #68]	; (2eb0 <TIM_TimeBaseInit+0xf0>)
    2e6a:	429a      	cmp	r2, r3
    2e6c:	d003      	beq.n	2e76 <TIM_TimeBaseInit+0xb6>
    2e6e:	687a      	ldr	r2, [r7, #4]
    2e70:	4b10      	ldr	r3, [pc, #64]	; (2eb4 <TIM_TimeBaseInit+0xf4>)
    2e72:	429a      	cmp	r2, r3
    2e74:	d104      	bne.n	2e80 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	7a1b      	ldrb	r3, [r3, #8]
    2e7a:	461a      	mov	r2, r3
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	2201      	movs	r2, #1
    2e84:	829a      	strh	r2, [r3, #20]
}
    2e86:	3714      	adds	r7, #20
    2e88:	46bd      	mov	sp, r7
    2e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e8e:	4770      	bx	lr
    2e90:	40012c00 	.word	0x40012c00
    2e94:	40013400 	.word	0x40013400
    2e98:	40000400 	.word	0x40000400
    2e9c:	40000800 	.word	0x40000800
    2ea0:	40000c00 	.word	0x40000c00
    2ea4:	40001000 	.word	0x40001000
    2ea8:	40001400 	.word	0x40001400
    2eac:	40014000 	.word	0x40014000
    2eb0:	40014400 	.word	0x40014400
    2eb4:	40014800 	.word	0x40014800

00002eb8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2eb8:	b480      	push	{r7}
    2eba:	b085      	sub	sp, #20
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
    2ec0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2ec2:	2300      	movs	r3, #0
    2ec4:	817b      	strh	r3, [r7, #10]
    2ec6:	2300      	movs	r3, #0
    2ec8:	81fb      	strh	r3, [r7, #14]
    2eca:	2300      	movs	r3, #0
    2ecc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	8c1b      	ldrh	r3, [r3, #32]
    2ed2:	b29b      	uxth	r3, r3
    2ed4:	f023 0301 	bic.w	r3, r3, #1
    2ed8:	b29a      	uxth	r2, r3
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	8c1b      	ldrh	r3, [r3, #32]
    2ee2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	889b      	ldrh	r3, [r3, #4]
    2ee8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	8b1b      	ldrh	r3, [r3, #24]
    2eee:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    2ef0:	897b      	ldrh	r3, [r7, #10]
    2ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    2ef6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    2ef8:	897b      	ldrh	r3, [r7, #10]
    2efa:	f023 0303 	bic.w	r3, r3, #3
    2efe:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	881a      	ldrh	r2, [r3, #0]
    2f04:	897b      	ldrh	r3, [r7, #10]
    2f06:	4313      	orrs	r3, r2
    2f08:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    2f0a:	89fb      	ldrh	r3, [r7, #14]
    2f0c:	f023 0302 	bic.w	r3, r3, #2
    2f10:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2f12:	683b      	ldr	r3, [r7, #0]
    2f14:	891a      	ldrh	r2, [r3, #8]
    2f16:	89fb      	ldrh	r3, [r7, #14]
    2f18:	4313      	orrs	r3, r2
    2f1a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2f1c:	683b      	ldr	r3, [r7, #0]
    2f1e:	885a      	ldrh	r2, [r3, #2]
    2f20:	89fb      	ldrh	r3, [r7, #14]
    2f22:	4313      	orrs	r3, r2
    2f24:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    2f26:	687a      	ldr	r2, [r7, #4]
    2f28:	4b24      	ldr	r3, [pc, #144]	; (2fbc <TIM_OC1Init+0x104>)
    2f2a:	429a      	cmp	r2, r3
    2f2c:	d00f      	beq.n	2f4e <TIM_OC1Init+0x96>
    2f2e:	687a      	ldr	r2, [r7, #4]
    2f30:	4b23      	ldr	r3, [pc, #140]	; (2fc0 <TIM_OC1Init+0x108>)
    2f32:	429a      	cmp	r2, r3
    2f34:	d00b      	beq.n	2f4e <TIM_OC1Init+0x96>
    2f36:	687a      	ldr	r2, [r7, #4]
    2f38:	4b22      	ldr	r3, [pc, #136]	; (2fc4 <TIM_OC1Init+0x10c>)
    2f3a:	429a      	cmp	r2, r3
    2f3c:	d007      	beq.n	2f4e <TIM_OC1Init+0x96>
    2f3e:	687a      	ldr	r2, [r7, #4]
    2f40:	4b21      	ldr	r3, [pc, #132]	; (2fc8 <TIM_OC1Init+0x110>)
    2f42:	429a      	cmp	r2, r3
    2f44:	d003      	beq.n	2f4e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
    2f46:	687a      	ldr	r2, [r7, #4]
    2f48:	4b20      	ldr	r3, [pc, #128]	; (2fcc <TIM_OC1Init+0x114>)
    2f4a:	429a      	cmp	r2, r3
    2f4c:	d123      	bne.n	2f96 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    2f4e:	89fb      	ldrh	r3, [r7, #14]
    2f50:	f023 0308 	bic.w	r3, r3, #8
    2f54:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2f56:	683b      	ldr	r3, [r7, #0]
    2f58:	895a      	ldrh	r2, [r3, #10]
    2f5a:	89fb      	ldrh	r3, [r7, #14]
    2f5c:	4313      	orrs	r3, r2
    2f5e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    2f60:	89fb      	ldrh	r3, [r7, #14]
    2f62:	f023 0304 	bic.w	r3, r3, #4
    2f66:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    2f68:	683b      	ldr	r3, [r7, #0]
    2f6a:	889a      	ldrh	r2, [r3, #4]
    2f6c:	89fb      	ldrh	r3, [r7, #14]
    2f6e:	4313      	orrs	r3, r2
    2f70:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    2f72:	89bb      	ldrh	r3, [r7, #12]
    2f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2f78:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    2f7a:	89bb      	ldrh	r3, [r7, #12]
    2f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2f80:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2f82:	683b      	ldr	r3, [r7, #0]
    2f84:	899a      	ldrh	r2, [r3, #12]
    2f86:	89bb      	ldrh	r3, [r7, #12]
    2f88:	4313      	orrs	r3, r2
    2f8a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2f8c:	683b      	ldr	r3, [r7, #0]
    2f8e:	89da      	ldrh	r2, [r3, #14]
    2f90:	89bb      	ldrh	r3, [r7, #12]
    2f92:	4313      	orrs	r3, r2
    2f94:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	89ba      	ldrh	r2, [r7, #12]
    2f9a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	897a      	ldrh	r2, [r7, #10]
    2fa0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    2fa2:	683b      	ldr	r3, [r7, #0]
    2fa4:	88da      	ldrh	r2, [r3, #6]
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	89fa      	ldrh	r2, [r7, #14]
    2fae:	841a      	strh	r2, [r3, #32]
}
    2fb0:	3714      	adds	r7, #20
    2fb2:	46bd      	mov	sp, r7
    2fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fb8:	4770      	bx	lr
    2fba:	bf00      	nop
    2fbc:	40012c00 	.word	0x40012c00
    2fc0:	40013400 	.word	0x40013400
    2fc4:	40014000 	.word	0x40014000
    2fc8:	40014400 	.word	0x40014400
    2fcc:	40014800 	.word	0x40014800

00002fd0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2fd0:	b480      	push	{r7}
    2fd2:	b085      	sub	sp, #20
    2fd4:	af00      	add	r7, sp, #0
    2fd6:	6078      	str	r0, [r7, #4]
    2fd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2fda:	2300      	movs	r3, #0
    2fdc:	817b      	strh	r3, [r7, #10]
    2fde:	2300      	movs	r3, #0
    2fe0:	81fb      	strh	r3, [r7, #14]
    2fe2:	2300      	movs	r3, #0
    2fe4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	8c1b      	ldrh	r3, [r3, #32]
    2fea:	b29b      	uxth	r3, r3
    2fec:	f023 0310 	bic.w	r3, r3, #16
    2ff0:	b29a      	uxth	r2, r3
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	8c1b      	ldrh	r3, [r3, #32]
    2ffa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	889b      	ldrh	r3, [r3, #4]
    3000:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	8b1b      	ldrh	r3, [r3, #24]
    3006:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    3008:	897b      	ldrh	r3, [r7, #10]
    300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    300e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    3010:	897b      	ldrh	r3, [r7, #10]
    3012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3016:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	881b      	ldrh	r3, [r3, #0]
    301c:	021b      	lsls	r3, r3, #8
    301e:	b29a      	uxth	r2, r3
    3020:	897b      	ldrh	r3, [r7, #10]
    3022:	4313      	orrs	r3, r2
    3024:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    3026:	89fb      	ldrh	r3, [r7, #14]
    3028:	f023 0320 	bic.w	r3, r3, #32
    302c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    302e:	683b      	ldr	r3, [r7, #0]
    3030:	891b      	ldrh	r3, [r3, #8]
    3032:	011b      	lsls	r3, r3, #4
    3034:	b29a      	uxth	r2, r3
    3036:	89fb      	ldrh	r3, [r7, #14]
    3038:	4313      	orrs	r3, r2
    303a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    303c:	683b      	ldr	r3, [r7, #0]
    303e:	885b      	ldrh	r3, [r3, #2]
    3040:	011b      	lsls	r3, r3, #4
    3042:	b29a      	uxth	r2, r3
    3044:	89fb      	ldrh	r3, [r7, #14]
    3046:	4313      	orrs	r3, r2
    3048:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    304a:	687a      	ldr	r2, [r7, #4]
    304c:	4b22      	ldr	r3, [pc, #136]	; (30d8 <TIM_OC2Init+0x108>)
    304e:	429a      	cmp	r2, r3
    3050:	d003      	beq.n	305a <TIM_OC2Init+0x8a>
    3052:	687a      	ldr	r2, [r7, #4]
    3054:	4b21      	ldr	r3, [pc, #132]	; (30dc <TIM_OC2Init+0x10c>)
    3056:	429a      	cmp	r2, r3
    3058:	d12b      	bne.n	30b2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    305a:	89fb      	ldrh	r3, [r7, #14]
    305c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3060:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    3062:	683b      	ldr	r3, [r7, #0]
    3064:	895b      	ldrh	r3, [r3, #10]
    3066:	011b      	lsls	r3, r3, #4
    3068:	b29a      	uxth	r2, r3
    306a:	89fb      	ldrh	r3, [r7, #14]
    306c:	4313      	orrs	r3, r2
    306e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    3070:	89fb      	ldrh	r3, [r7, #14]
    3072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3076:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    3078:	683b      	ldr	r3, [r7, #0]
    307a:	889b      	ldrh	r3, [r3, #4]
    307c:	011b      	lsls	r3, r3, #4
    307e:	b29a      	uxth	r2, r3
    3080:	89fb      	ldrh	r3, [r7, #14]
    3082:	4313      	orrs	r3, r2
    3084:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    3086:	89bb      	ldrh	r3, [r7, #12]
    3088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    308c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    308e:	89bb      	ldrh	r3, [r7, #12]
    3090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3094:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    3096:	683b      	ldr	r3, [r7, #0]
    3098:	899b      	ldrh	r3, [r3, #12]
    309a:	009b      	lsls	r3, r3, #2
    309c:	b29a      	uxth	r2, r3
    309e:	89bb      	ldrh	r3, [r7, #12]
    30a0:	4313      	orrs	r3, r2
    30a2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    30a4:	683b      	ldr	r3, [r7, #0]
    30a6:	89db      	ldrh	r3, [r3, #14]
    30a8:	009b      	lsls	r3, r3, #2
    30aa:	b29a      	uxth	r2, r3
    30ac:	89bb      	ldrh	r3, [r7, #12]
    30ae:	4313      	orrs	r3, r2
    30b0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	89ba      	ldrh	r2, [r7, #12]
    30b6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	897a      	ldrh	r2, [r7, #10]
    30bc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    30be:	683b      	ldr	r3, [r7, #0]
    30c0:	88da      	ldrh	r2, [r3, #6]
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    30c6:	687b      	ldr	r3, [r7, #4]
    30c8:	89fa      	ldrh	r2, [r7, #14]
    30ca:	841a      	strh	r2, [r3, #32]
}
    30cc:	3714      	adds	r7, #20
    30ce:	46bd      	mov	sp, r7
    30d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30d4:	4770      	bx	lr
    30d6:	bf00      	nop
    30d8:	40012c00 	.word	0x40012c00
    30dc:	40013400 	.word	0x40013400

000030e0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    30e0:	b480      	push	{r7}
    30e2:	b085      	sub	sp, #20
    30e4:	af00      	add	r7, sp, #0
    30e6:	6078      	str	r0, [r7, #4]
    30e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    30ea:	2300      	movs	r3, #0
    30ec:	817b      	strh	r3, [r7, #10]
    30ee:	2300      	movs	r3, #0
    30f0:	81fb      	strh	r3, [r7, #14]
    30f2:	2300      	movs	r3, #0
    30f4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	8c1b      	ldrh	r3, [r3, #32]
    30fa:	b29b      	uxth	r3, r3
    30fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3100:	b29a      	uxth	r2, r3
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	8c1b      	ldrh	r3, [r3, #32]
    310a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	889b      	ldrh	r3, [r3, #4]
    3110:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	8b9b      	ldrh	r3, [r3, #28]
    3116:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    3118:	897b      	ldrh	r3, [r7, #10]
    311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    311e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    3120:	897b      	ldrh	r3, [r7, #10]
    3122:	f023 0303 	bic.w	r3, r3, #3
    3126:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3128:	683b      	ldr	r3, [r7, #0]
    312a:	881a      	ldrh	r2, [r3, #0]
    312c:	897b      	ldrh	r3, [r7, #10]
    312e:	4313      	orrs	r3, r2
    3130:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    3132:	89fb      	ldrh	r3, [r7, #14]
    3134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3138:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    313a:	683b      	ldr	r3, [r7, #0]
    313c:	891b      	ldrh	r3, [r3, #8]
    313e:	021b      	lsls	r3, r3, #8
    3140:	b29a      	uxth	r2, r3
    3142:	89fb      	ldrh	r3, [r7, #14]
    3144:	4313      	orrs	r3, r2
    3146:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    3148:	683b      	ldr	r3, [r7, #0]
    314a:	885b      	ldrh	r3, [r3, #2]
    314c:	021b      	lsls	r3, r3, #8
    314e:	b29a      	uxth	r2, r3
    3150:	89fb      	ldrh	r3, [r7, #14]
    3152:	4313      	orrs	r3, r2
    3154:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3156:	687a      	ldr	r2, [r7, #4]
    3158:	4b22      	ldr	r3, [pc, #136]	; (31e4 <TIM_OC3Init+0x104>)
    315a:	429a      	cmp	r2, r3
    315c:	d003      	beq.n	3166 <TIM_OC3Init+0x86>
    315e:	687a      	ldr	r2, [r7, #4]
    3160:	4b21      	ldr	r3, [pc, #132]	; (31e8 <TIM_OC3Init+0x108>)
    3162:	429a      	cmp	r2, r3
    3164:	d12b      	bne.n	31be <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    3166:	89fb      	ldrh	r3, [r7, #14]
    3168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    316c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    316e:	683b      	ldr	r3, [r7, #0]
    3170:	895b      	ldrh	r3, [r3, #10]
    3172:	021b      	lsls	r3, r3, #8
    3174:	b29a      	uxth	r2, r3
    3176:	89fb      	ldrh	r3, [r7, #14]
    3178:	4313      	orrs	r3, r2
    317a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    317c:	89fb      	ldrh	r3, [r7, #14]
    317e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3182:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    3184:	683b      	ldr	r3, [r7, #0]
    3186:	889b      	ldrh	r3, [r3, #4]
    3188:	021b      	lsls	r3, r3, #8
    318a:	b29a      	uxth	r2, r3
    318c:	89fb      	ldrh	r3, [r7, #14]
    318e:	4313      	orrs	r3, r2
    3190:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    3192:	89bb      	ldrh	r3, [r7, #12]
    3194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3198:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    319a:	89bb      	ldrh	r3, [r7, #12]
    319c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    31a0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    31a2:	683b      	ldr	r3, [r7, #0]
    31a4:	899b      	ldrh	r3, [r3, #12]
    31a6:	011b      	lsls	r3, r3, #4
    31a8:	b29a      	uxth	r2, r3
    31aa:	89bb      	ldrh	r3, [r7, #12]
    31ac:	4313      	orrs	r3, r2
    31ae:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	89db      	ldrh	r3, [r3, #14]
    31b4:	011b      	lsls	r3, r3, #4
    31b6:	b29a      	uxth	r2, r3
    31b8:	89bb      	ldrh	r3, [r7, #12]
    31ba:	4313      	orrs	r3, r2
    31bc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	89ba      	ldrh	r2, [r7, #12]
    31c2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	897a      	ldrh	r2, [r7, #10]
    31c8:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    31ca:	683b      	ldr	r3, [r7, #0]
    31cc:	88da      	ldrh	r2, [r3, #6]
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	89fa      	ldrh	r2, [r7, #14]
    31d6:	841a      	strh	r2, [r3, #32]
}
    31d8:	3714      	adds	r7, #20
    31da:	46bd      	mov	sp, r7
    31dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    31e0:	4770      	bx	lr
    31e2:	bf00      	nop
    31e4:	40012c00 	.word	0x40012c00
    31e8:	40013400 	.word	0x40013400

000031ec <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    31ec:	b480      	push	{r7}
    31ee:	b085      	sub	sp, #20
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
    31f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    31f6:	2300      	movs	r3, #0
    31f8:	81bb      	strh	r3, [r7, #12]
    31fa:	2300      	movs	r3, #0
    31fc:	817b      	strh	r3, [r7, #10]
    31fe:	2300      	movs	r3, #0
    3200:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	8c1b      	ldrh	r3, [r3, #32]
    3206:	b29b      	uxth	r3, r3
    3208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    320c:	b29a      	uxth	r2, r3
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	8c1b      	ldrh	r3, [r3, #32]
    3216:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	889b      	ldrh	r3, [r3, #4]
    321c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	8b9b      	ldrh	r3, [r3, #28]
    3222:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    3224:	89bb      	ldrh	r3, [r7, #12]
    3226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    322a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    322c:	89bb      	ldrh	r3, [r7, #12]
    322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3232:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3234:	683b      	ldr	r3, [r7, #0]
    3236:	881b      	ldrh	r3, [r3, #0]
    3238:	021b      	lsls	r3, r3, #8
    323a:	b29a      	uxth	r2, r3
    323c:	89bb      	ldrh	r3, [r7, #12]
    323e:	4313      	orrs	r3, r2
    3240:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    3242:	897b      	ldrh	r3, [r7, #10]
    3244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3248:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    324a:	683b      	ldr	r3, [r7, #0]
    324c:	891b      	ldrh	r3, [r3, #8]
    324e:	031b      	lsls	r3, r3, #12
    3250:	b29a      	uxth	r2, r3
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	4313      	orrs	r3, r2
    3256:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    3258:	683b      	ldr	r3, [r7, #0]
    325a:	885b      	ldrh	r3, [r3, #2]
    325c:	031b      	lsls	r3, r3, #12
    325e:	b29a      	uxth	r2, r3
    3260:	897b      	ldrh	r3, [r7, #10]
    3262:	4313      	orrs	r3, r2
    3264:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3266:	687a      	ldr	r2, [r7, #4]
    3268:	4b12      	ldr	r3, [pc, #72]	; (32b4 <TIM_OC4Init+0xc8>)
    326a:	429a      	cmp	r2, r3
    326c:	d003      	beq.n	3276 <TIM_OC4Init+0x8a>
    326e:	687a      	ldr	r2, [r7, #4]
    3270:	4b11      	ldr	r3, [pc, #68]	; (32b8 <TIM_OC4Init+0xcc>)
    3272:	429a      	cmp	r2, r3
    3274:	d10a      	bne.n	328c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    3276:	89fb      	ldrh	r3, [r7, #14]
    3278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    327c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    327e:	683b      	ldr	r3, [r7, #0]
    3280:	899b      	ldrh	r3, [r3, #12]
    3282:	019b      	lsls	r3, r3, #6
    3284:	b29a      	uxth	r2, r3
    3286:	89fb      	ldrh	r3, [r7, #14]
    3288:	4313      	orrs	r3, r2
    328a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	89fa      	ldrh	r2, [r7, #14]
    3290:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	89ba      	ldrh	r2, [r7, #12]
    3296:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    3298:	683b      	ldr	r3, [r7, #0]
    329a:	88da      	ldrh	r2, [r3, #6]
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	897a      	ldrh	r2, [r7, #10]
    32a6:	841a      	strh	r2, [r3, #32]
}
    32a8:	3714      	adds	r7, #20
    32aa:	46bd      	mov	sp, r7
    32ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop
    32b4:	40012c00 	.word	0x40012c00
    32b8:	40013400 	.word	0x40013400

000032bc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b082      	sub	sp, #8
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
    32c4:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    32c6:	683b      	ldr	r3, [r7, #0]
    32c8:	881b      	ldrh	r3, [r3, #0]
    32ca:	2b00      	cmp	r3, #0
    32cc:	d10f      	bne.n	32ee <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    32ce:	683b      	ldr	r3, [r7, #0]
    32d0:	8859      	ldrh	r1, [r3, #2]
    32d2:	683b      	ldr	r3, [r7, #0]
    32d4:	889a      	ldrh	r2, [r3, #4]
    32d6:	683b      	ldr	r3, [r7, #0]
    32d8:	891b      	ldrh	r3, [r3, #8]
    32da:	6878      	ldr	r0, [r7, #4]
    32dc:	f001 f966 	bl	45ac <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    32e0:	683b      	ldr	r3, [r7, #0]
    32e2:	88db      	ldrh	r3, [r3, #6]
    32e4:	6878      	ldr	r0, [r7, #4]
    32e6:	4619      	mov	r1, r3
    32e8:	f001 f816 	bl	4318 <TIM_SetIC1Prescaler>
    32ec:	e036      	b.n	335c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    32ee:	683b      	ldr	r3, [r7, #0]
    32f0:	881b      	ldrh	r3, [r3, #0]
    32f2:	2b04      	cmp	r3, #4
    32f4:	d10f      	bne.n	3316 <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    32f6:	683b      	ldr	r3, [r7, #0]
    32f8:	8859      	ldrh	r1, [r3, #2]
    32fa:	683b      	ldr	r3, [r7, #0]
    32fc:	889a      	ldrh	r2, [r3, #4]
    32fe:	683b      	ldr	r3, [r7, #0]
    3300:	891b      	ldrh	r3, [r3, #8]
    3302:	6878      	ldr	r0, [r7, #4]
    3304:	f001 f9bc 	bl	4680 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3308:	683b      	ldr	r3, [r7, #0]
    330a:	88db      	ldrh	r3, [r3, #6]
    330c:	6878      	ldr	r0, [r7, #4]
    330e:	4619      	mov	r1, r3
    3310:	f001 f81e 	bl	4350 <TIM_SetIC2Prescaler>
    3314:	e022      	b.n	335c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    3316:	683b      	ldr	r3, [r7, #0]
    3318:	881b      	ldrh	r3, [r3, #0]
    331a:	2b08      	cmp	r3, #8
    331c:	d10f      	bne.n	333e <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	8859      	ldrh	r1, [r3, #2]
    3322:	683b      	ldr	r3, [r7, #0]
    3324:	889a      	ldrh	r2, [r3, #4]
    3326:	683b      	ldr	r3, [r7, #0]
    3328:	891b      	ldrh	r3, [r3, #8]
    332a:	6878      	ldr	r0, [r7, #4]
    332c:	f001 fa1c 	bl	4768 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3330:	683b      	ldr	r3, [r7, #0]
    3332:	88db      	ldrh	r3, [r3, #6]
    3334:	6878      	ldr	r0, [r7, #4]
    3336:	4619      	mov	r1, r3
    3338:	f001 f828 	bl	438c <TIM_SetIC3Prescaler>
    333c:	e00e      	b.n	335c <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    333e:	683b      	ldr	r3, [r7, #0]
    3340:	8859      	ldrh	r1, [r3, #2]
    3342:	683b      	ldr	r3, [r7, #0]
    3344:	889a      	ldrh	r2, [r3, #4]
    3346:	683b      	ldr	r3, [r7, #0]
    3348:	891b      	ldrh	r3, [r3, #8]
    334a:	6878      	ldr	r0, [r7, #4]
    334c:	f001 fa7c 	bl	4848 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3350:	683b      	ldr	r3, [r7, #0]
    3352:	88db      	ldrh	r3, [r3, #6]
    3354:	6878      	ldr	r0, [r7, #4]
    3356:	4619      	mov	r1, r3
    3358:	f001 f834 	bl	43c4 <TIM_SetIC4Prescaler>
  }
}
    335c:	3708      	adds	r7, #8
    335e:	46bd      	mov	sp, r7
    3360:	bd80      	pop	{r7, pc}
    3362:	bf00      	nop

00003364 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3364:	b580      	push	{r7, lr}
    3366:	b084      	sub	sp, #16
    3368:	af00      	add	r7, sp, #0
    336a:	6078      	str	r0, [r7, #4]
    336c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    336e:	2300      	movs	r3, #0
    3370:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    3372:	2301      	movs	r3, #1
    3374:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	885b      	ldrh	r3, [r3, #2]
    337a:	2b00      	cmp	r3, #0
    337c:	d102      	bne.n	3384 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    337e:	2302      	movs	r3, #2
    3380:	81fb      	strh	r3, [r7, #14]
    3382:	e001      	b.n	3388 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    3384:	2300      	movs	r3, #0
    3386:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	889b      	ldrh	r3, [r3, #4]
    338c:	2b01      	cmp	r3, #1
    338e:	d102      	bne.n	3396 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    3390:	2302      	movs	r3, #2
    3392:	81bb      	strh	r3, [r7, #12]
    3394:	e001      	b.n	339a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    3396:	2301      	movs	r3, #1
    3398:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    339a:	683b      	ldr	r3, [r7, #0]
    339c:	881b      	ldrh	r3, [r3, #0]
    339e:	2b00      	cmp	r3, #0
    33a0:	d11c      	bne.n	33dc <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    33a2:	683b      	ldr	r3, [r7, #0]
    33a4:	8859      	ldrh	r1, [r3, #2]
    33a6:	683b      	ldr	r3, [r7, #0]
    33a8:	889a      	ldrh	r2, [r3, #4]
    33aa:	683b      	ldr	r3, [r7, #0]
    33ac:	891b      	ldrh	r3, [r3, #8]
    33ae:	6878      	ldr	r0, [r7, #4]
    33b0:	f001 f8fc 	bl	45ac <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    33b4:	683b      	ldr	r3, [r7, #0]
    33b6:	88db      	ldrh	r3, [r3, #6]
    33b8:	6878      	ldr	r0, [r7, #4]
    33ba:	4619      	mov	r1, r3
    33bc:	f000 ffac 	bl	4318 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    33c0:	683b      	ldr	r3, [r7, #0]
    33c2:	891b      	ldrh	r3, [r3, #8]
    33c4:	89f9      	ldrh	r1, [r7, #14]
    33c6:	89ba      	ldrh	r2, [r7, #12]
    33c8:	6878      	ldr	r0, [r7, #4]
    33ca:	f001 f959 	bl	4680 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    33ce:	683b      	ldr	r3, [r7, #0]
    33d0:	88db      	ldrh	r3, [r3, #6]
    33d2:	6878      	ldr	r0, [r7, #4]
    33d4:	4619      	mov	r1, r3
    33d6:	f000 ffbb 	bl	4350 <TIM_SetIC2Prescaler>
    33da:	e01b      	b.n	3414 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    33dc:	683b      	ldr	r3, [r7, #0]
    33de:	8859      	ldrh	r1, [r3, #2]
    33e0:	683b      	ldr	r3, [r7, #0]
    33e2:	889a      	ldrh	r2, [r3, #4]
    33e4:	683b      	ldr	r3, [r7, #0]
    33e6:	891b      	ldrh	r3, [r3, #8]
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f001 f949 	bl	4680 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    33ee:	683b      	ldr	r3, [r7, #0]
    33f0:	88db      	ldrh	r3, [r3, #6]
    33f2:	6878      	ldr	r0, [r7, #4]
    33f4:	4619      	mov	r1, r3
    33f6:	f000 ffab 	bl	4350 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    33fa:	683b      	ldr	r3, [r7, #0]
    33fc:	891b      	ldrh	r3, [r3, #8]
    33fe:	89f9      	ldrh	r1, [r7, #14]
    3400:	89ba      	ldrh	r2, [r7, #12]
    3402:	6878      	ldr	r0, [r7, #4]
    3404:	f001 f8d2 	bl	45ac <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3408:	683b      	ldr	r3, [r7, #0]
    340a:	88db      	ldrh	r3, [r3, #6]
    340c:	6878      	ldr	r0, [r7, #4]
    340e:	4619      	mov	r1, r3
    3410:	f000 ff82 	bl	4318 <TIM_SetIC1Prescaler>
  }
}
    3414:	3710      	adds	r7, #16
    3416:	46bd      	mov	sp, r7
    3418:	bd80      	pop	{r7, pc}
    341a:	bf00      	nop

0000341c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    341c:	b480      	push	{r7}
    341e:	b083      	sub	sp, #12
    3420:	af00      	add	r7, sp, #0
    3422:	6078      	str	r0, [r7, #4]
    3424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	881a      	ldrh	r2, [r3, #0]
    342a:	683b      	ldr	r3, [r7, #0]
    342c:	885b      	ldrh	r3, [r3, #2]
    342e:	4313      	orrs	r3, r2
    3430:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3432:	683b      	ldr	r3, [r7, #0]
    3434:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3436:	4313      	orrs	r3, r2
    3438:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    343a:	683b      	ldr	r3, [r7, #0]
    343c:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    343e:	4313      	orrs	r3, r2
    3440:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3442:	683b      	ldr	r3, [r7, #0]
    3444:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3446:	4313      	orrs	r3, r2
    3448:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    344a:	683b      	ldr	r3, [r7, #0]
    344c:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    344e:	4313      	orrs	r3, r2
    3450:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    3452:	683b      	ldr	r3, [r7, #0]
    3454:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3456:	4313      	orrs	r3, r2
    3458:	b29a      	uxth	r2, r3
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    3460:	370c      	adds	r7, #12
    3462:	46bd      	mov	sp, r7
    3464:	f85d 7b04 	ldr.w	r7, [sp], #4
    3468:	4770      	bx	lr
    346a:	bf00      	nop

0000346c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    346c:	b480      	push	{r7}
    346e:	b083      	sub	sp, #12
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	f64f 72ff 	movw	r2, #65535	; 0xffff
    347a:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	2200      	movs	r2, #0
    3480:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    3482:	687b      	ldr	r3, [r7, #4]
    3484:	2200      	movs	r2, #0
    3486:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	2200      	movs	r2, #0
    348c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	2200      	movs	r2, #0
    3492:	721a      	strb	r2, [r3, #8]
}
    3494:	370c      	adds	r7, #12
    3496:	46bd      	mov	sp, r7
    3498:	f85d 7b04 	ldr.w	r7, [sp], #4
    349c:	4770      	bx	lr
    349e:	bf00      	nop

000034a0 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    34a0:	b480      	push	{r7}
    34a2:	b083      	sub	sp, #12
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	2200      	movs	r2, #0
    34ac:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    34ae:	687b      	ldr	r3, [r7, #4]
    34b0:	2200      	movs	r2, #0
    34b2:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	2200      	movs	r2, #0
    34b8:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	2200      	movs	r2, #0
    34be:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	2200      	movs	r2, #0
    34c4:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	2200      	movs	r2, #0
    34ca:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	2200      	movs	r2, #0
    34d0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	2200      	movs	r2, #0
    34d6:	81da      	strh	r2, [r3, #14]
}
    34d8:	370c      	adds	r7, #12
    34da:	46bd      	mov	sp, r7
    34dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop

000034e4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    34e4:	b480      	push	{r7}
    34e6:	b083      	sub	sp, #12
    34e8:	af00      	add	r7, sp, #0
    34ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	2200      	movs	r2, #0
    34f0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	2200      	movs	r2, #0
    34f6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	2201      	movs	r2, #1
    34fc:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	2200      	movs	r2, #0
    3502:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	2200      	movs	r2, #0
    3508:	811a      	strh	r2, [r3, #8]
}
    350a:	370c      	adds	r7, #12
    350c:	46bd      	mov	sp, r7
    350e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3512:	4770      	bx	lr

00003514 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    3514:	b480      	push	{r7}
    3516:	b083      	sub	sp, #12
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	2200      	movs	r2, #0
    3520:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	2200      	movs	r2, #0
    3526:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	2200      	movs	r2, #0
    352c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	2200      	movs	r2, #0
    3532:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	2200      	movs	r2, #0
    3538:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	2200      	movs	r2, #0
    353e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	2200      	movs	r2, #0
    3544:	819a      	strh	r2, [r3, #12]
}
    3546:	370c      	adds	r7, #12
    3548:	46bd      	mov	sp, r7
    354a:	f85d 7b04 	ldr.w	r7, [sp], #4
    354e:	4770      	bx	lr

00003550 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3550:	b480      	push	{r7}
    3552:	b083      	sub	sp, #12
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
    3558:	460b      	mov	r3, r1
    355a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    355c:	78fb      	ldrb	r3, [r7, #3]
    355e:	2b00      	cmp	r3, #0
    3560:	d008      	beq.n	3574 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	881b      	ldrh	r3, [r3, #0]
    3566:	b29b      	uxth	r3, r3
    3568:	f043 0301 	orr.w	r3, r3, #1
    356c:	b29a      	uxth	r2, r3
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	801a      	strh	r2, [r3, #0]
    3572:	e007      	b.n	3584 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	881b      	ldrh	r3, [r3, #0]
    3578:	b29b      	uxth	r3, r3
    357a:	f023 0301 	bic.w	r3, r3, #1
    357e:	b29a      	uxth	r2, r3
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	801a      	strh	r2, [r3, #0]
  }
}
    3584:	370c      	adds	r7, #12
    3586:	46bd      	mov	sp, r7
    3588:	f85d 7b04 	ldr.w	r7, [sp], #4
    358c:	4770      	bx	lr
    358e:	bf00      	nop

00003590 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3590:	b480      	push	{r7}
    3592:	b083      	sub	sp, #12
    3594:	af00      	add	r7, sp, #0
    3596:	6078      	str	r0, [r7, #4]
    3598:	460b      	mov	r3, r1
    359a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    359c:	78fb      	ldrb	r3, [r7, #3]
    359e:	2b00      	cmp	r3, #0
    35a0:	d00c      	beq.n	35bc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    35a8:	b29b      	uxth	r3, r3
    35aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    35ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    35b2:	b29a      	uxth	r2, r3
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    35ba:	e009      	b.n	35d0 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    35c2:	b29b      	uxth	r3, r3
    35c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
    35c8:	b29a      	uxth	r2, r3
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
    35d0:	370c      	adds	r7, #12
    35d2:	46bd      	mov	sp, r7
    35d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d8:	4770      	bx	lr
    35da:	bf00      	nop

000035dc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    35dc:	b480      	push	{r7}
    35de:	b083      	sub	sp, #12
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
    35e4:	4613      	mov	r3, r2
    35e6:	460a      	mov	r2, r1
    35e8:	807a      	strh	r2, [r7, #2]
    35ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    35ec:	787b      	ldrb	r3, [r7, #1]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d008      	beq.n	3604 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	899b      	ldrh	r3, [r3, #12]
    35f6:	b29a      	uxth	r2, r3
    35f8:	887b      	ldrh	r3, [r7, #2]
    35fa:	4313      	orrs	r3, r2
    35fc:	b29a      	uxth	r2, r3
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	819a      	strh	r2, [r3, #12]
    3602:	e009      	b.n	3618 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	899b      	ldrh	r3, [r3, #12]
    3608:	b29a      	uxth	r2, r3
    360a:	887b      	ldrh	r3, [r7, #2]
    360c:	43db      	mvns	r3, r3
    360e:	b29b      	uxth	r3, r3
    3610:	4013      	ands	r3, r2
    3612:	b29a      	uxth	r2, r3
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	819a      	strh	r2, [r3, #12]
  }
}
    3618:	370c      	adds	r7, #12
    361a:	46bd      	mov	sp, r7
    361c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3620:	4770      	bx	lr
    3622:	bf00      	nop

00003624 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3624:	b480      	push	{r7}
    3626:	b083      	sub	sp, #12
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	460b      	mov	r3, r1
    362e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	887a      	ldrh	r2, [r7, #2]
    3634:	829a      	strh	r2, [r3, #20]
}
    3636:	370c      	adds	r7, #12
    3638:	46bd      	mov	sp, r7
    363a:	f85d 7b04 	ldr.w	r7, [sp], #4
    363e:	4770      	bx	lr

00003640 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3640:	b480      	push	{r7}
    3642:	b083      	sub	sp, #12
    3644:	af00      	add	r7, sp, #0
    3646:	6078      	str	r0, [r7, #4]
    3648:	4613      	mov	r3, r2
    364a:	460a      	mov	r2, r1
    364c:	807a      	strh	r2, [r7, #2]
    364e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3650:	887a      	ldrh	r2, [r7, #2]
    3652:	883b      	ldrh	r3, [r7, #0]
    3654:	4313      	orrs	r3, r2
    3656:	b29a      	uxth	r2, r3
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    365e:	370c      	adds	r7, #12
    3660:	46bd      	mov	sp, r7
    3662:	f85d 7b04 	ldr.w	r7, [sp], #4
    3666:	4770      	bx	lr

00003668 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3668:	b480      	push	{r7}
    366a:	b083      	sub	sp, #12
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
    3670:	4613      	mov	r3, r2
    3672:	460a      	mov	r2, r1
    3674:	807a      	strh	r2, [r7, #2]
    3676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3678:	787b      	ldrb	r3, [r7, #1]
    367a:	2b00      	cmp	r3, #0
    367c:	d008      	beq.n	3690 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	899b      	ldrh	r3, [r3, #12]
    3682:	b29a      	uxth	r2, r3
    3684:	887b      	ldrh	r3, [r7, #2]
    3686:	4313      	orrs	r3, r2
    3688:	b29a      	uxth	r2, r3
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	819a      	strh	r2, [r3, #12]
    368e:	e009      	b.n	36a4 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	899b      	ldrh	r3, [r3, #12]
    3694:	b29a      	uxth	r2, r3
    3696:	887b      	ldrh	r3, [r7, #2]
    3698:	43db      	mvns	r3, r3
    369a:	b29b      	uxth	r3, r3
    369c:	4013      	ands	r3, r2
    369e:	b29a      	uxth	r2, r3
    36a0:	687b      	ldr	r3, [r7, #4]
    36a2:	819a      	strh	r2, [r3, #12]
  }
}
    36a4:	370c      	adds	r7, #12
    36a6:	46bd      	mov	sp, r7
    36a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop

000036b0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    36b0:	b480      	push	{r7}
    36b2:	b083      	sub	sp, #12
    36b4:	af00      	add	r7, sp, #0
    36b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	891b      	ldrh	r3, [r3, #8]
    36bc:	b29b      	uxth	r3, r3
    36be:	f023 0307 	bic.w	r3, r3, #7
    36c2:	b29a      	uxth	r2, r3
    36c4:	687b      	ldr	r3, [r7, #4]
    36c6:	811a      	strh	r2, [r3, #8]
}
    36c8:	370c      	adds	r7, #12
    36ca:	46bd      	mov	sp, r7
    36cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop

000036d4 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    36d4:	b580      	push	{r7, lr}
    36d6:	b082      	sub	sp, #8
    36d8:	af00      	add	r7, sp, #0
    36da:	6078      	str	r0, [r7, #4]
    36dc:	460b      	mov	r3, r1
    36de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    36e0:	887b      	ldrh	r3, [r7, #2]
    36e2:	6878      	ldr	r0, [r7, #4]
    36e4:	4619      	mov	r1, r3
    36e6:	f000 f8c9 	bl	387c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	891b      	ldrh	r3, [r3, #8]
    36ee:	b29b      	uxth	r3, r3
    36f0:	f043 0307 	orr.w	r3, r3, #7
    36f4:	b29a      	uxth	r2, r3
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	811a      	strh	r2, [r3, #8]
}
    36fa:	3708      	adds	r7, #8
    36fc:	46bd      	mov	sp, r7
    36fe:	bd80      	pop	{r7, pc}

00003700 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    3700:	b580      	push	{r7, lr}
    3702:	b084      	sub	sp, #16
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	8179      	strh	r1, [r7, #10]
    370a:	813a      	strh	r2, [r7, #8]
    370c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    370e:	897b      	ldrh	r3, [r7, #10]
    3710:	2b60      	cmp	r3, #96	; 0x60
    3712:	d107      	bne.n	3724 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3714:	893a      	ldrh	r2, [r7, #8]
    3716:	88fb      	ldrh	r3, [r7, #6]
    3718:	68f8      	ldr	r0, [r7, #12]
    371a:	4611      	mov	r1, r2
    371c:	2201      	movs	r2, #1
    371e:	f000 ffaf 	bl	4680 <TI2_Config>
    3722:	e006      	b.n	3732 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3724:	893a      	ldrh	r2, [r7, #8]
    3726:	88fb      	ldrh	r3, [r7, #6]
    3728:	68f8      	ldr	r0, [r7, #12]
    372a:	4611      	mov	r1, r2
    372c:	2201      	movs	r2, #1
    372e:	f000 ff3d 	bl	45ac <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3732:	897b      	ldrh	r3, [r7, #10]
    3734:	68f8      	ldr	r0, [r7, #12]
    3736:	4619      	mov	r1, r3
    3738:	f000 f8a0 	bl	387c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    373c:	68fb      	ldr	r3, [r7, #12]
    373e:	891b      	ldrh	r3, [r3, #8]
    3740:	b29b      	uxth	r3, r3
    3742:	f043 0307 	orr.w	r3, r3, #7
    3746:	b29a      	uxth	r2, r3
    3748:	68fb      	ldr	r3, [r7, #12]
    374a:	811a      	strh	r2, [r3, #8]
}
    374c:	3710      	adds	r7, #16
    374e:	46bd      	mov	sp, r7
    3750:	bd80      	pop	{r7, pc}
    3752:	bf00      	nop

00003754 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3754:	b580      	push	{r7, lr}
    3756:	b086      	sub	sp, #24
    3758:	af00      	add	r7, sp, #0
    375a:	60f8      	str	r0, [r7, #12]
    375c:	8179      	strh	r1, [r7, #10]
    375e:	813a      	strh	r2, [r7, #8]
    3760:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3762:	2300      	movs	r3, #0
    3764:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3766:	8979      	ldrh	r1, [r7, #10]
    3768:	893a      	ldrh	r2, [r7, #8]
    376a:	88fb      	ldrh	r3, [r7, #6]
    376c:	68f8      	ldr	r0, [r7, #12]
    376e:	f000 f831 	bl	37d4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3772:	68fb      	ldr	r3, [r7, #12]
    3774:	891b      	ldrh	r3, [r3, #8]
    3776:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    3778:	8afb      	ldrh	r3, [r7, #22]
    377a:	f023 0307 	bic.w	r3, r3, #7
    377e:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    3780:	8afb      	ldrh	r3, [r7, #22]
    3782:	f043 0307 	orr.w	r3, r3, #7
    3786:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    3788:	8afb      	ldrh	r3, [r7, #22]
    378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    378e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    3790:	8afb      	ldrh	r3, [r7, #22]
    3792:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    3796:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	8afa      	ldrh	r2, [r7, #22]
    379c:	811a      	strh	r2, [r3, #8]
}
    379e:	3718      	adds	r7, #24
    37a0:	46bd      	mov	sp, r7
    37a2:	bd80      	pop	{r7, pc}

000037a4 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	b084      	sub	sp, #16
    37a8:	af00      	add	r7, sp, #0
    37aa:	60f8      	str	r0, [r7, #12]
    37ac:	8179      	strh	r1, [r7, #10]
    37ae:	813a      	strh	r2, [r7, #8]
    37b0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    37b2:	8979      	ldrh	r1, [r7, #10]
    37b4:	893a      	ldrh	r2, [r7, #8]
    37b6:	88fb      	ldrh	r3, [r7, #6]
    37b8:	68f8      	ldr	r0, [r7, #12]
    37ba:	f000 f80b 	bl	37d4 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    37be:	68fb      	ldr	r3, [r7, #12]
    37c0:	891b      	ldrh	r3, [r3, #8]
    37c2:	b29b      	uxth	r3, r3
    37c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    37c8:	b29a      	uxth	r2, r3
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	811a      	strh	r2, [r3, #8]
}
    37ce:	3710      	adds	r7, #16
    37d0:	46bd      	mov	sp, r7
    37d2:	bd80      	pop	{r7, pc}

000037d4 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    37d4:	b480      	push	{r7}
    37d6:	b087      	sub	sp, #28
    37d8:	af00      	add	r7, sp, #0
    37da:	60f8      	str	r0, [r7, #12]
    37dc:	8179      	strh	r1, [r7, #10]
    37de:	813a      	strh	r2, [r7, #8]
    37e0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    37e2:	2300      	movs	r3, #0
    37e4:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    37e6:	68fb      	ldr	r3, [r7, #12]
    37e8:	891b      	ldrh	r3, [r3, #8]
    37ea:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    37ec:	8afb      	ldrh	r3, [r7, #22]
    37ee:	b2db      	uxtb	r3, r3
    37f0:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    37f2:	88fb      	ldrh	r3, [r7, #6]
    37f4:	021b      	lsls	r3, r3, #8
    37f6:	b29a      	uxth	r2, r3
    37f8:	893b      	ldrh	r3, [r7, #8]
    37fa:	4313      	orrs	r3, r2
    37fc:	b29a      	uxth	r2, r3
    37fe:	897b      	ldrh	r3, [r7, #10]
    3800:	4313      	orrs	r3, r2
    3802:	b29a      	uxth	r2, r3
    3804:	8afb      	ldrh	r3, [r7, #22]
    3806:	4313      	orrs	r3, r2
    3808:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    380a:	68fb      	ldr	r3, [r7, #12]
    380c:	8afa      	ldrh	r2, [r7, #22]
    380e:	811a      	strh	r2, [r3, #8]
}
    3810:	371c      	adds	r7, #28
    3812:	46bd      	mov	sp, r7
    3814:	f85d 7b04 	ldr.w	r7, [sp], #4
    3818:	4770      	bx	lr
    381a:	bf00      	nop

0000381c <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    381c:	b480      	push	{r7}
    381e:	b083      	sub	sp, #12
    3820:	af00      	add	r7, sp, #0
    3822:	6078      	str	r0, [r7, #4]
    3824:	4613      	mov	r3, r2
    3826:	460a      	mov	r2, r1
    3828:	807a      	strh	r2, [r7, #2]
    382a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	887a      	ldrh	r2, [r7, #2]
    3830:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	883a      	ldrh	r2, [r7, #0]
    3836:	829a      	strh	r2, [r3, #20]
}
    3838:	370c      	adds	r7, #12
    383a:	46bd      	mov	sp, r7
    383c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3840:	4770      	bx	lr
    3842:	bf00      	nop

00003844 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    3844:	b480      	push	{r7}
    3846:	b085      	sub	sp, #20
    3848:	af00      	add	r7, sp, #0
    384a:	6078      	str	r0, [r7, #4]
    384c:	460b      	mov	r3, r1
    384e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    3850:	2300      	movs	r3, #0
    3852:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	881b      	ldrh	r3, [r3, #0]
    3858:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    385a:	89fb      	ldrh	r3, [r7, #14]
    385c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3860:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    3862:	89fa      	ldrh	r2, [r7, #14]
    3864:	887b      	ldrh	r3, [r7, #2]
    3866:	4313      	orrs	r3, r2
    3868:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	89fa      	ldrh	r2, [r7, #14]
    386e:	801a      	strh	r2, [r3, #0]
}
    3870:	3714      	adds	r7, #20
    3872:	46bd      	mov	sp, r7
    3874:	f85d 7b04 	ldr.w	r7, [sp], #4
    3878:	4770      	bx	lr
    387a:	bf00      	nop

0000387c <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
    3884:	460b      	mov	r3, r1
    3886:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    3888:	2300      	movs	r3, #0
    388a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	891b      	ldrh	r3, [r3, #8]
    3890:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    3892:	89fb      	ldrh	r3, [r7, #14]
    3894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3898:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    389a:	89fa      	ldrh	r2, [r7, #14]
    389c:	887b      	ldrh	r3, [r7, #2]
    389e:	4313      	orrs	r3, r2
    38a0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	89fa      	ldrh	r2, [r7, #14]
    38a6:	811a      	strh	r2, [r3, #8]
}
    38a8:	3714      	adds	r7, #20
    38aa:	46bd      	mov	sp, r7
    38ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b0:	4770      	bx	lr
    38b2:	bf00      	nop

000038b4 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    38b4:	b480      	push	{r7}
    38b6:	b087      	sub	sp, #28
    38b8:	af00      	add	r7, sp, #0
    38ba:	60f8      	str	r0, [r7, #12]
    38bc:	8179      	strh	r1, [r7, #10]
    38be:	813a      	strh	r2, [r7, #8]
    38c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    38c2:	2300      	movs	r3, #0
    38c4:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    38c6:	2300      	movs	r3, #0
    38c8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    38ca:	2300      	movs	r3, #0
    38cc:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    38ce:	68fb      	ldr	r3, [r7, #12]
    38d0:	891b      	ldrh	r3, [r3, #8]
    38d2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	8b1b      	ldrh	r3, [r3, #24]
    38d8:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	8c1b      	ldrh	r3, [r3, #32]
    38de:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    38e0:	8afb      	ldrh	r3, [r7, #22]
    38e2:	f023 0307 	bic.w	r3, r3, #7
    38e6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    38e8:	8afa      	ldrh	r2, [r7, #22]
    38ea:	897b      	ldrh	r3, [r7, #10]
    38ec:	4313      	orrs	r3, r2
    38ee:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    38f0:	8abb      	ldrh	r3, [r7, #20]
    38f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    38f6:	f023 0303 	bic.w	r3, r3, #3
    38fa:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    38fc:	8abb      	ldrh	r3, [r7, #20]
    38fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3902:	f043 0301 	orr.w	r3, r3, #1
    3906:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    3908:	8a7b      	ldrh	r3, [r7, #18]
    390a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    390e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3910:	88fb      	ldrh	r3, [r7, #6]
    3912:	011b      	lsls	r3, r3, #4
    3914:	b29a      	uxth	r2, r3
    3916:	893b      	ldrh	r3, [r7, #8]
    3918:	4313      	orrs	r3, r2
    391a:	b29a      	uxth	r2, r3
    391c:	8a7b      	ldrh	r3, [r7, #18]
    391e:	4313      	orrs	r3, r2
    3920:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3922:	68fb      	ldr	r3, [r7, #12]
    3924:	8afa      	ldrh	r2, [r7, #22]
    3926:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3928:	68fb      	ldr	r3, [r7, #12]
    392a:	8aba      	ldrh	r2, [r7, #20]
    392c:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	8a7a      	ldrh	r2, [r7, #18]
    3932:	841a      	strh	r2, [r3, #32]
}
    3934:	371c      	adds	r7, #28
    3936:	46bd      	mov	sp, r7
    3938:	f85d 7b04 	ldr.w	r7, [sp], #4
    393c:	4770      	bx	lr
    393e:	bf00      	nop

00003940 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3940:	b480      	push	{r7}
    3942:	b085      	sub	sp, #20
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	460b      	mov	r3, r1
    394a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    394c:	2300      	movs	r3, #0
    394e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	8b1b      	ldrh	r3, [r3, #24]
    3954:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    3956:	89fb      	ldrh	r3, [r7, #14]
    3958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    395c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    395e:	89fa      	ldrh	r2, [r7, #14]
    3960:	887b      	ldrh	r3, [r7, #2]
    3962:	4313      	orrs	r3, r2
    3964:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	89fa      	ldrh	r2, [r7, #14]
    396a:	831a      	strh	r2, [r3, #24]
}
    396c:	3714      	adds	r7, #20
    396e:	46bd      	mov	sp, r7
    3970:	f85d 7b04 	ldr.w	r7, [sp], #4
    3974:	4770      	bx	lr
    3976:	bf00      	nop

00003978 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3978:	b480      	push	{r7}
    397a:	b085      	sub	sp, #20
    397c:	af00      	add	r7, sp, #0
    397e:	6078      	str	r0, [r7, #4]
    3980:	460b      	mov	r3, r1
    3982:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3984:	2300      	movs	r3, #0
    3986:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	8b1b      	ldrh	r3, [r3, #24]
    398c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    398e:	89fb      	ldrh	r3, [r7, #14]
    3990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3994:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3996:	887b      	ldrh	r3, [r7, #2]
    3998:	021b      	lsls	r3, r3, #8
    399a:	b29a      	uxth	r2, r3
    399c:	89fb      	ldrh	r3, [r7, #14]
    399e:	4313      	orrs	r3, r2
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	89fa      	ldrh	r2, [r7, #14]
    39a6:	831a      	strh	r2, [r3, #24]
}
    39a8:	3714      	adds	r7, #20
    39aa:	46bd      	mov	sp, r7
    39ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop

000039b4 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    39b4:	b480      	push	{r7}
    39b6:	b085      	sub	sp, #20
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
    39bc:	460b      	mov	r3, r1
    39be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    39c0:	2300      	movs	r3, #0
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	8b9b      	ldrh	r3, [r3, #28]
    39c8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    39ca:	89fb      	ldrh	r3, [r7, #14]
    39cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    39d0:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    39d2:	89fa      	ldrh	r2, [r7, #14]
    39d4:	887b      	ldrh	r3, [r7, #2]
    39d6:	4313      	orrs	r3, r2
    39d8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39da:	687b      	ldr	r3, [r7, #4]
    39dc:	89fa      	ldrh	r2, [r7, #14]
    39de:	839a      	strh	r2, [r3, #28]
}
    39e0:	3714      	adds	r7, #20
    39e2:	46bd      	mov	sp, r7
    39e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop

000039ec <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    39ec:	b480      	push	{r7}
    39ee:	b085      	sub	sp, #20
    39f0:	af00      	add	r7, sp, #0
    39f2:	6078      	str	r0, [r7, #4]
    39f4:	460b      	mov	r3, r1
    39f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    39f8:	2300      	movs	r3, #0
    39fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	8b9b      	ldrh	r3, [r3, #28]
    3a00:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    3a02:	89fb      	ldrh	r3, [r7, #14]
    3a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3a08:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3a0a:	887b      	ldrh	r3, [r7, #2]
    3a0c:	021b      	lsls	r3, r3, #8
    3a0e:	b29a      	uxth	r2, r3
    3a10:	89fb      	ldrh	r3, [r7, #14]
    3a12:	4313      	orrs	r3, r2
    3a14:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	89fa      	ldrh	r2, [r7, #14]
    3a1a:	839a      	strh	r2, [r3, #28]
}
    3a1c:	3714      	adds	r7, #20
    3a1e:	46bd      	mov	sp, r7
    3a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a24:	4770      	bx	lr
    3a26:	bf00      	nop

00003a28 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3a28:	b480      	push	{r7}
    3a2a:	b083      	sub	sp, #12
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	6078      	str	r0, [r7, #4]
    3a30:	460b      	mov	r3, r1
    3a32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3a34:	78fb      	ldrb	r3, [r7, #3]
    3a36:	2b00      	cmp	r3, #0
    3a38:	d008      	beq.n	3a4c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	881b      	ldrh	r3, [r3, #0]
    3a3e:	b29b      	uxth	r3, r3
    3a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3a44:	b29a      	uxth	r2, r3
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	801a      	strh	r2, [r3, #0]
    3a4a:	e007      	b.n	3a5c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	881b      	ldrh	r3, [r3, #0]
    3a50:	b29b      	uxth	r3, r3
    3a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3a56:	b29a      	uxth	r2, r3
    3a58:	687b      	ldr	r3, [r7, #4]
    3a5a:	801a      	strh	r2, [r3, #0]
  }
}
    3a5c:	370c      	adds	r7, #12
    3a5e:	46bd      	mov	sp, r7
    3a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop

00003a68 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3a68:	b480      	push	{r7}
    3a6a:	b083      	sub	sp, #12
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
    3a70:	460b      	mov	r3, r1
    3a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3a74:	78fb      	ldrb	r3, [r7, #3]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d008      	beq.n	3a8c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	889b      	ldrh	r3, [r3, #4]
    3a7e:	b29b      	uxth	r3, r3
    3a80:	f043 0304 	orr.w	r3, r3, #4
    3a84:	b29a      	uxth	r2, r3
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	809a      	strh	r2, [r3, #4]
    3a8a:	e007      	b.n	3a9c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	889b      	ldrh	r3, [r3, #4]
    3a90:	b29b      	uxth	r3, r3
    3a92:	f023 0304 	bic.w	r3, r3, #4
    3a96:	b29a      	uxth	r2, r3
    3a98:	687b      	ldr	r3, [r7, #4]
    3a9a:	809a      	strh	r2, [r3, #4]
  }
}
    3a9c:	370c      	adds	r7, #12
    3a9e:	46bd      	mov	sp, r7
    3aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa4:	4770      	bx	lr
    3aa6:	bf00      	nop

00003aa8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3aa8:	b480      	push	{r7}
    3aaa:	b083      	sub	sp, #12
    3aac:	af00      	add	r7, sp, #0
    3aae:	6078      	str	r0, [r7, #4]
    3ab0:	460b      	mov	r3, r1
    3ab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3ab4:	78fb      	ldrb	r3, [r7, #3]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d008      	beq.n	3acc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	889b      	ldrh	r3, [r3, #4]
    3abe:	b29b      	uxth	r3, r3
    3ac0:	f043 0308 	orr.w	r3, r3, #8
    3ac4:	b29a      	uxth	r2, r3
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	809a      	strh	r2, [r3, #4]
    3aca:	e007      	b.n	3adc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	889b      	ldrh	r3, [r3, #4]
    3ad0:	b29b      	uxth	r3, r3
    3ad2:	f023 0308 	bic.w	r3, r3, #8
    3ad6:	b29a      	uxth	r2, r3
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	809a      	strh	r2, [r3, #4]
  }
}
    3adc:	370c      	adds	r7, #12
    3ade:	46bd      	mov	sp, r7
    3ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop

00003ae8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3ae8:	b480      	push	{r7}
    3aea:	b083      	sub	sp, #12
    3aec:	af00      	add	r7, sp, #0
    3aee:	6078      	str	r0, [r7, #4]
    3af0:	460b      	mov	r3, r1
    3af2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3af4:	78fb      	ldrb	r3, [r7, #3]
    3af6:	2b00      	cmp	r3, #0
    3af8:	d008      	beq.n	3b0c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    3afa:	687b      	ldr	r3, [r7, #4]
    3afc:	889b      	ldrh	r3, [r3, #4]
    3afe:	b29b      	uxth	r3, r3
    3b00:	f043 0301 	orr.w	r3, r3, #1
    3b04:	b29a      	uxth	r2, r3
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	809a      	strh	r2, [r3, #4]
    3b0a:	e007      	b.n	3b1c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	889b      	ldrh	r3, [r3, #4]
    3b10:	b29b      	uxth	r3, r3
    3b12:	f023 0301 	bic.w	r3, r3, #1
    3b16:	b29a      	uxth	r2, r3
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	809a      	strh	r2, [r3, #4]
  }
}
    3b1c:	370c      	adds	r7, #12
    3b1e:	46bd      	mov	sp, r7
    3b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop

00003b28 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3b28:	b480      	push	{r7}
    3b2a:	b085      	sub	sp, #20
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
    3b30:	460b      	mov	r3, r1
    3b32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3b34:	2300      	movs	r3, #0
    3b36:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	8b1b      	ldrh	r3, [r3, #24]
    3b3c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	f023 0308 	bic.w	r3, r3, #8
    3b44:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3b46:	89fa      	ldrh	r2, [r7, #14]
    3b48:	887b      	ldrh	r3, [r7, #2]
    3b4a:	4313      	orrs	r3, r2
    3b4c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	89fa      	ldrh	r2, [r7, #14]
    3b52:	831a      	strh	r2, [r3, #24]
}
    3b54:	3714      	adds	r7, #20
    3b56:	46bd      	mov	sp, r7
    3b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop

00003b60 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3b60:	b480      	push	{r7}
    3b62:	b085      	sub	sp, #20
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
    3b68:	460b      	mov	r3, r1
    3b6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3b6c:	2300      	movs	r3, #0
    3b6e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	8b1b      	ldrh	r3, [r3, #24]
    3b74:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    3b76:	89fb      	ldrh	r3, [r7, #14]
    3b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b7c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3b7e:	887b      	ldrh	r3, [r7, #2]
    3b80:	021b      	lsls	r3, r3, #8
    3b82:	b29a      	uxth	r2, r3
    3b84:	89fb      	ldrh	r3, [r7, #14]
    3b86:	4313      	orrs	r3, r2
    3b88:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	89fa      	ldrh	r2, [r7, #14]
    3b8e:	831a      	strh	r2, [r3, #24]
}
    3b90:	3714      	adds	r7, #20
    3b92:	46bd      	mov	sp, r7
    3b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop

00003b9c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3b9c:	b480      	push	{r7}
    3b9e:	b085      	sub	sp, #20
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
    3ba4:	460b      	mov	r3, r1
    3ba6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3ba8:	2300      	movs	r3, #0
    3baa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3bac:	687b      	ldr	r3, [r7, #4]
    3bae:	8b9b      	ldrh	r3, [r3, #28]
    3bb0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    3bb2:	89fb      	ldrh	r3, [r7, #14]
    3bb4:	f023 0308 	bic.w	r3, r3, #8
    3bb8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3bba:	89fa      	ldrh	r2, [r7, #14]
    3bbc:	887b      	ldrh	r3, [r7, #2]
    3bbe:	4313      	orrs	r3, r2
    3bc0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	89fa      	ldrh	r2, [r7, #14]
    3bc6:	839a      	strh	r2, [r3, #28]
}
    3bc8:	3714      	adds	r7, #20
    3bca:	46bd      	mov	sp, r7
    3bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd0:	4770      	bx	lr
    3bd2:	bf00      	nop

00003bd4 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3bd4:	b480      	push	{r7}
    3bd6:	b085      	sub	sp, #20
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
    3bdc:	460b      	mov	r3, r1
    3bde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3be0:	2300      	movs	r3, #0
    3be2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	8b9b      	ldrh	r3, [r3, #28]
    3be8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    3bea:	89fb      	ldrh	r3, [r7, #14]
    3bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3bf0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    3bf2:	887b      	ldrh	r3, [r7, #2]
    3bf4:	021b      	lsls	r3, r3, #8
    3bf6:	b29a      	uxth	r2, r3
    3bf8:	89fb      	ldrh	r3, [r7, #14]
    3bfa:	4313      	orrs	r3, r2
    3bfc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	89fa      	ldrh	r2, [r7, #14]
    3c02:	839a      	strh	r2, [r3, #28]
}
    3c04:	3714      	adds	r7, #20
    3c06:	46bd      	mov	sp, r7
    3c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop

00003c10 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3c10:	b480      	push	{r7}
    3c12:	b085      	sub	sp, #20
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
    3c18:	460b      	mov	r3, r1
    3c1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3c1c:	2300      	movs	r3, #0
    3c1e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	8b1b      	ldrh	r3, [r3, #24]
    3c24:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    3c26:	89fb      	ldrh	r3, [r7, #14]
    3c28:	f023 0304 	bic.w	r3, r3, #4
    3c2c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    3c2e:	89fa      	ldrh	r2, [r7, #14]
    3c30:	887b      	ldrh	r3, [r7, #2]
    3c32:	4313      	orrs	r3, r2
    3c34:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	89fa      	ldrh	r2, [r7, #14]
    3c3a:	831a      	strh	r2, [r3, #24]
}
    3c3c:	3714      	adds	r7, #20
    3c3e:	46bd      	mov	sp, r7
    3c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop

00003c48 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3c48:	b480      	push	{r7}
    3c4a:	b085      	sub	sp, #20
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    3c50:	460b      	mov	r3, r1
    3c52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3c54:	2300      	movs	r3, #0
    3c56:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    3c58:	687b      	ldr	r3, [r7, #4]
    3c5a:	8b1b      	ldrh	r3, [r3, #24]
    3c5c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    3c5e:	89fb      	ldrh	r3, [r7, #14]
    3c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3c64:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3c66:	887b      	ldrh	r3, [r7, #2]
    3c68:	021b      	lsls	r3, r3, #8
    3c6a:	b29a      	uxth	r2, r3
    3c6c:	89fb      	ldrh	r3, [r7, #14]
    3c6e:	4313      	orrs	r3, r2
    3c70:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	89fa      	ldrh	r2, [r7, #14]
    3c76:	831a      	strh	r2, [r3, #24]
}
    3c78:	3714      	adds	r7, #20
    3c7a:	46bd      	mov	sp, r7
    3c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c80:	4770      	bx	lr
    3c82:	bf00      	nop

00003c84 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3c84:	b480      	push	{r7}
    3c86:	b085      	sub	sp, #20
    3c88:	af00      	add	r7, sp, #0
    3c8a:	6078      	str	r0, [r7, #4]
    3c8c:	460b      	mov	r3, r1
    3c8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3c90:	2300      	movs	r3, #0
    3c92:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	8b9b      	ldrh	r3, [r3, #28]
    3c98:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    3c9a:	89fb      	ldrh	r3, [r7, #14]
    3c9c:	f023 0304 	bic.w	r3, r3, #4
    3ca0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3ca2:	89fa      	ldrh	r2, [r7, #14]
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	4313      	orrs	r3, r2
    3ca8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	89fa      	ldrh	r2, [r7, #14]
    3cae:	839a      	strh	r2, [r3, #28]
}
    3cb0:	3714      	adds	r7, #20
    3cb2:	46bd      	mov	sp, r7
    3cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cb8:	4770      	bx	lr
    3cba:	bf00      	nop

00003cbc <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3cbc:	b480      	push	{r7}
    3cbe:	b085      	sub	sp, #20
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
    3cc4:	460b      	mov	r3, r1
    3cc6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3cc8:	2300      	movs	r3, #0
    3cca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	8b9b      	ldrh	r3, [r3, #28]
    3cd0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    3cd2:	89fb      	ldrh	r3, [r7, #14]
    3cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3cd8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    3cda:	887b      	ldrh	r3, [r7, #2]
    3cdc:	021b      	lsls	r3, r3, #8
    3cde:	b29a      	uxth	r2, r3
    3ce0:	89fb      	ldrh	r3, [r7, #14]
    3ce2:	4313      	orrs	r3, r2
    3ce4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	89fa      	ldrh	r2, [r7, #14]
    3cea:	839a      	strh	r2, [r3, #28]
}
    3cec:	3714      	adds	r7, #20
    3cee:	46bd      	mov	sp, r7
    3cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf4:	4770      	bx	lr
    3cf6:	bf00      	nop

00003cf8 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3cf8:	b480      	push	{r7}
    3cfa:	b085      	sub	sp, #20
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	460b      	mov	r3, r1
    3d02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3d04:	2300      	movs	r3, #0
    3d06:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	8b1b      	ldrh	r3, [r3, #24]
    3d0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    3d0e:	89fb      	ldrh	r3, [r7, #14]
    3d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3d14:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    3d16:	89fa      	ldrh	r2, [r7, #14]
    3d18:	887b      	ldrh	r3, [r7, #2]
    3d1a:	4313      	orrs	r3, r2
    3d1c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	89fa      	ldrh	r2, [r7, #14]
    3d22:	831a      	strh	r2, [r3, #24]
}
    3d24:	3714      	adds	r7, #20
    3d26:	46bd      	mov	sp, r7
    3d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2c:	4770      	bx	lr
    3d2e:	bf00      	nop

00003d30 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3d30:	b480      	push	{r7}
    3d32:	b085      	sub	sp, #20
    3d34:	af00      	add	r7, sp, #0
    3d36:	6078      	str	r0, [r7, #4]
    3d38:	460b      	mov	r3, r1
    3d3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3d3c:	2300      	movs	r3, #0
    3d3e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	8b1b      	ldrh	r3, [r3, #24]
    3d44:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    3d46:	89fb      	ldrh	r3, [r7, #14]
    3d48:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3d4c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3d4e:	887b      	ldrh	r3, [r7, #2]
    3d50:	021b      	lsls	r3, r3, #8
    3d52:	b29a      	uxth	r2, r3
    3d54:	89fb      	ldrh	r3, [r7, #14]
    3d56:	4313      	orrs	r3, r2
    3d58:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	89fa      	ldrh	r2, [r7, #14]
    3d5e:	831a      	strh	r2, [r3, #24]
}
    3d60:	3714      	adds	r7, #20
    3d62:	46bd      	mov	sp, r7
    3d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop

00003d6c <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3d6c:	b480      	push	{r7}
    3d6e:	b085      	sub	sp, #20
    3d70:	af00      	add	r7, sp, #0
    3d72:	6078      	str	r0, [r7, #4]
    3d74:	460b      	mov	r3, r1
    3d76:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3d78:	2300      	movs	r3, #0
    3d7a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	8b9b      	ldrh	r3, [r3, #28]
    3d80:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    3d82:	89fb      	ldrh	r3, [r7, #14]
    3d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3d88:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3d8a:	89fa      	ldrh	r2, [r7, #14]
    3d8c:	887b      	ldrh	r3, [r7, #2]
    3d8e:	4313      	orrs	r3, r2
    3d90:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	89fa      	ldrh	r2, [r7, #14]
    3d96:	839a      	strh	r2, [r3, #28]
}
    3d98:	3714      	adds	r7, #20
    3d9a:	46bd      	mov	sp, r7
    3d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da0:	4770      	bx	lr
    3da2:	bf00      	nop

00003da4 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3da4:	b480      	push	{r7}
    3da6:	b085      	sub	sp, #20
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
    3dac:	460b      	mov	r3, r1
    3dae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3db0:	2300      	movs	r3, #0
    3db2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	8b9b      	ldrh	r3, [r3, #28]
    3db8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    3dba:	89fb      	ldrh	r3, [r7, #14]
    3dbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3dc0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    3dc2:	887b      	ldrh	r3, [r7, #2]
    3dc4:	021b      	lsls	r3, r3, #8
    3dc6:	b29a      	uxth	r2, r3
    3dc8:	89fb      	ldrh	r3, [r7, #14]
    3dca:	4313      	orrs	r3, r2
    3dcc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	89fa      	ldrh	r2, [r7, #14]
    3dd2:	839a      	strh	r2, [r3, #28]
}
    3dd4:	3714      	adds	r7, #20
    3dd6:	46bd      	mov	sp, r7
    3dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ddc:	4770      	bx	lr
    3dde:	bf00      	nop

00003de0 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3de0:	b480      	push	{r7}
    3de2:	b085      	sub	sp, #20
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
    3de8:	460b      	mov	r3, r1
    3dea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3dec:	2300      	movs	r3, #0
    3dee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	8c1b      	ldrh	r3, [r3, #32]
    3df4:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    3df6:	89fb      	ldrh	r3, [r7, #14]
    3df8:	f023 0302 	bic.w	r3, r3, #2
    3dfc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    3dfe:	89fa      	ldrh	r2, [r7, #14]
    3e00:	887b      	ldrh	r3, [r7, #2]
    3e02:	4313      	orrs	r3, r2
    3e04:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	89fa      	ldrh	r2, [r7, #14]
    3e0a:	841a      	strh	r2, [r3, #32]
}
    3e0c:	3714      	adds	r7, #20
    3e0e:	46bd      	mov	sp, r7
    3e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop

00003e18 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3e18:	b480      	push	{r7}
    3e1a:	b085      	sub	sp, #20
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3e24:	2300      	movs	r3, #0
    3e26:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	8c1b      	ldrh	r3, [r3, #32]
    3e2c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    3e2e:	89fb      	ldrh	r3, [r7, #14]
    3e30:	f023 0308 	bic.w	r3, r3, #8
    3e34:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3e36:	89fa      	ldrh	r2, [r7, #14]
    3e38:	887b      	ldrh	r3, [r7, #2]
    3e3a:	4313      	orrs	r3, r2
    3e3c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	89fa      	ldrh	r2, [r7, #14]
    3e42:	841a      	strh	r2, [r3, #32]
}
    3e44:	3714      	adds	r7, #20
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop

00003e50 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3e50:	b480      	push	{r7}
    3e52:	b085      	sub	sp, #20
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    3e58:	460b      	mov	r3, r1
    3e5a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3e5c:	2300      	movs	r3, #0
    3e5e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	8c1b      	ldrh	r3, [r3, #32]
    3e64:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    3e66:	89fb      	ldrh	r3, [r7, #14]
    3e68:	f023 0320 	bic.w	r3, r3, #32
    3e6c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3e6e:	887b      	ldrh	r3, [r7, #2]
    3e70:	011b      	lsls	r3, r3, #4
    3e72:	b29a      	uxth	r2, r3
    3e74:	89fb      	ldrh	r3, [r7, #14]
    3e76:	4313      	orrs	r3, r2
    3e78:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	89fa      	ldrh	r2, [r7, #14]
    3e7e:	841a      	strh	r2, [r3, #32]
}
    3e80:	3714      	adds	r7, #20
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3e8c:	b480      	push	{r7}
    3e8e:	b085      	sub	sp, #20
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    3e94:	460b      	mov	r3, r1
    3e96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3e98:	2300      	movs	r3, #0
    3e9a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	8c1b      	ldrh	r3, [r3, #32]
    3ea0:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    3ea2:	89fb      	ldrh	r3, [r7, #14]
    3ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3ea8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3eaa:	887b      	ldrh	r3, [r7, #2]
    3eac:	011b      	lsls	r3, r3, #4
    3eae:	b29a      	uxth	r2, r3
    3eb0:	89fb      	ldrh	r3, [r7, #14]
    3eb2:	4313      	orrs	r3, r2
    3eb4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	89fa      	ldrh	r2, [r7, #14]
    3eba:	841a      	strh	r2, [r3, #32]
}
    3ebc:	3714      	adds	r7, #20
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    3ed0:	460b      	mov	r3, r1
    3ed2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ed4:	2300      	movs	r3, #0
    3ed6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	8c1b      	ldrh	r3, [r3, #32]
    3edc:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    3ede:	89fb      	ldrh	r3, [r7, #14]
    3ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3ee4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3ee6:	887b      	ldrh	r3, [r7, #2]
    3ee8:	021b      	lsls	r3, r3, #8
    3eea:	b29a      	uxth	r2, r3
    3eec:	89fb      	ldrh	r3, [r7, #14]
    3eee:	4313      	orrs	r3, r2
    3ef0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	89fa      	ldrh	r2, [r7, #14]
    3ef6:	841a      	strh	r2, [r3, #32]
}
    3ef8:	3714      	adds	r7, #20
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3f04:	b480      	push	{r7}
    3f06:	b085      	sub	sp, #20
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    3f0c:	460b      	mov	r3, r1
    3f0e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3f10:	2300      	movs	r3, #0
    3f12:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	8c1b      	ldrh	r3, [r3, #32]
    3f18:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    3f1a:	89fb      	ldrh	r3, [r7, #14]
    3f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3f20:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3f22:	887b      	ldrh	r3, [r7, #2]
    3f24:	021b      	lsls	r3, r3, #8
    3f26:	b29a      	uxth	r2, r3
    3f28:	89fb      	ldrh	r3, [r7, #14]
    3f2a:	4313      	orrs	r3, r2
    3f2c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	89fa      	ldrh	r2, [r7, #14]
    3f32:	841a      	strh	r2, [r3, #32]
}
    3f34:	3714      	adds	r7, #20
    3f36:	46bd      	mov	sp, r7
    3f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop

00003f40 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3f40:	b480      	push	{r7}
    3f42:	b085      	sub	sp, #20
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	460b      	mov	r3, r1
    3f4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3f4c:	2300      	movs	r3, #0
    3f4e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	8c1b      	ldrh	r3, [r3, #32]
    3f54:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    3f56:	89fb      	ldrh	r3, [r7, #14]
    3f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3f5c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3f5e:	887b      	ldrh	r3, [r7, #2]
    3f60:	031b      	lsls	r3, r3, #12
    3f62:	b29a      	uxth	r2, r3
    3f64:	89fb      	ldrh	r3, [r7, #14]
    3f66:	4313      	orrs	r3, r2
    3f68:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	89fa      	ldrh	r2, [r7, #14]
    3f6e:	841a      	strh	r2, [r3, #32]
}
    3f70:	3714      	adds	r7, #20
    3f72:	46bd      	mov	sp, r7
    3f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop

00003f7c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b085      	sub	sp, #20
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	4613      	mov	r3, r2
    3f86:	460a      	mov	r2, r1
    3f88:	807a      	strh	r2, [r7, #2]
    3f8a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3f8c:	2300      	movs	r3, #0
    3f8e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3f90:	887b      	ldrh	r3, [r7, #2]
    3f92:	2201      	movs	r2, #1
    3f94:	fa02 f303 	lsl.w	r3, r2, r3
    3f98:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	8c1b      	ldrh	r3, [r3, #32]
    3f9e:	b29a      	uxth	r2, r3
    3fa0:	89fb      	ldrh	r3, [r7, #14]
    3fa2:	43db      	mvns	r3, r3
    3fa4:	b29b      	uxth	r3, r3
    3fa6:	4013      	ands	r3, r2
    3fa8:	b29a      	uxth	r2, r3
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	8c1b      	ldrh	r3, [r3, #32]
    3fb2:	b29a      	uxth	r2, r3
    3fb4:	8839      	ldrh	r1, [r7, #0]
    3fb6:	887b      	ldrh	r3, [r7, #2]
    3fb8:	fa01 f303 	lsl.w	r3, r1, r3
    3fbc:	b29b      	uxth	r3, r3
    3fbe:	4313      	orrs	r3, r2
    3fc0:	b29a      	uxth	r2, r3
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	841a      	strh	r2, [r3, #32]
}
    3fc6:	3714      	adds	r7, #20
    3fc8:	46bd      	mov	sp, r7
    3fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fce:	4770      	bx	lr

00003fd0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3fd0:	b480      	push	{r7}
    3fd2:	b085      	sub	sp, #20
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
    3fd8:	4613      	mov	r3, r2
    3fda:	460a      	mov	r2, r1
    3fdc:	807a      	strh	r2, [r7, #2]
    3fde:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3fe0:	2300      	movs	r3, #0
    3fe2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3fe4:	887b      	ldrh	r3, [r7, #2]
    3fe6:	2204      	movs	r2, #4
    3fe8:	fa02 f303 	lsl.w	r3, r2, r3
    3fec:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	8c1b      	ldrh	r3, [r3, #32]
    3ff2:	b29a      	uxth	r2, r3
    3ff4:	89fb      	ldrh	r3, [r7, #14]
    3ff6:	43db      	mvns	r3, r3
    3ff8:	b29b      	uxth	r3, r3
    3ffa:	4013      	ands	r3, r2
    3ffc:	b29a      	uxth	r2, r3
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	8c1b      	ldrh	r3, [r3, #32]
    4006:	b29a      	uxth	r2, r3
    4008:	8839      	ldrh	r1, [r7, #0]
    400a:	887b      	ldrh	r3, [r7, #2]
    400c:	fa01 f303 	lsl.w	r3, r1, r3
    4010:	b29b      	uxth	r3, r3
    4012:	4313      	orrs	r3, r2
    4014:	b29a      	uxth	r2, r3
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	841a      	strh	r2, [r3, #32]
}
    401a:	3714      	adds	r7, #20
    401c:	46bd      	mov	sp, r7
    401e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4022:	4770      	bx	lr

00004024 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    4024:	b480      	push	{r7}
    4026:	b085      	sub	sp, #20
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    402c:	4613      	mov	r3, r2
    402e:	460a      	mov	r2, r1
    4030:	807a      	strh	r2, [r7, #2]
    4032:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    4034:	2300      	movs	r3, #0
    4036:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    4038:	2300      	movs	r3, #0
    403a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	3318      	adds	r3, #24
    4044:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    4046:	887b      	ldrh	r3, [r7, #2]
    4048:	2201      	movs	r2, #1
    404a:	fa02 f303 	lsl.w	r3, r2, r3
    404e:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	8c1b      	ldrh	r3, [r3, #32]
    4054:	b29a      	uxth	r2, r3
    4056:	897b      	ldrh	r3, [r7, #10]
    4058:	43db      	mvns	r3, r3
    405a:	b29b      	uxth	r3, r3
    405c:	4013      	ands	r3, r2
    405e:	b29a      	uxth	r2, r3
    4060:	687b      	ldr	r3, [r7, #4]
    4062:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    4064:	887b      	ldrh	r3, [r7, #2]
    4066:	2b00      	cmp	r3, #0
    4068:	d002      	beq.n	4070 <TIM_SelectOCxM+0x4c>
    406a:	887b      	ldrh	r3, [r7, #2]
    406c:	2b08      	cmp	r3, #8
    406e:	d112      	bne.n	4096 <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
    4070:	887b      	ldrh	r3, [r7, #2]
    4072:	085b      	lsrs	r3, r3, #1
    4074:	b29b      	uxth	r3, r3
    4076:	68fa      	ldr	r2, [r7, #12]
    4078:	4413      	add	r3, r2
    407a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    407c:	68fb      	ldr	r3, [r7, #12]
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	6812      	ldr	r2, [r2, #0]
    4082:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    4086:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	68fa      	ldr	r2, [r7, #12]
    408c:	6811      	ldr	r1, [r2, #0]
    408e:	883a      	ldrh	r2, [r7, #0]
    4090:	430a      	orrs	r2, r1
    4092:	601a      	str	r2, [r3, #0]
    4094:	e015      	b.n	40c2 <TIM_SelectOCxM+0x9e>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    4096:	887b      	ldrh	r3, [r7, #2]
    4098:	3b04      	subs	r3, #4
    409a:	b29b      	uxth	r3, r3
    409c:	085b      	lsrs	r3, r3, #1
    409e:	b29b      	uxth	r3, r3
    40a0:	68fa      	ldr	r2, [r7, #12]
    40a2:	4413      	add	r3, r2
    40a4:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    40a6:	68fb      	ldr	r3, [r7, #12]
    40a8:	68fa      	ldr	r2, [r7, #12]
    40aa:	6812      	ldr	r2, [r2, #0]
    40ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    40b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    40b2:	68fb      	ldr	r3, [r7, #12]
    40b4:	68fa      	ldr	r2, [r7, #12]
    40b6:	6811      	ldr	r1, [r2, #0]
    40b8:	883a      	ldrh	r2, [r7, #0]
    40ba:	0212      	lsls	r2, r2, #8
    40bc:	b292      	uxth	r2, r2
    40be:	430a      	orrs	r2, r1
    40c0:	601a      	str	r2, [r3, #0]
  }
}
    40c2:	3714      	adds	r7, #20
    40c4:	46bd      	mov	sp, r7
    40c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ca:	4770      	bx	lr

000040cc <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    40cc:	b480      	push	{r7}
    40ce:	b083      	sub	sp, #12
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
    40d4:	460b      	mov	r3, r1
    40d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    40d8:	78fb      	ldrb	r3, [r7, #3]
    40da:	2b00      	cmp	r3, #0
    40dc:	d008      	beq.n	40f0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	881b      	ldrh	r3, [r3, #0]
    40e2:	b29b      	uxth	r3, r3
    40e4:	f043 0302 	orr.w	r3, r3, #2
    40e8:	b29a      	uxth	r2, r3
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	801a      	strh	r2, [r3, #0]
    40ee:	e007      	b.n	4100 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	881b      	ldrh	r3, [r3, #0]
    40f4:	b29b      	uxth	r3, r3
    40f6:	f023 0302 	bic.w	r3, r3, #2
    40fa:	b29a      	uxth	r2, r3
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	801a      	strh	r2, [r3, #0]
  }
}
    4100:	370c      	adds	r7, #12
    4102:	46bd      	mov	sp, r7
    4104:	f85d 7b04 	ldr.w	r7, [sp], #4
    4108:	4770      	bx	lr
    410a:	bf00      	nop

0000410c <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    410c:	b480      	push	{r7}
    410e:	b083      	sub	sp, #12
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    4114:	460b      	mov	r3, r1
    4116:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    4118:	887b      	ldrh	r3, [r7, #2]
    411a:	2b00      	cmp	r3, #0
    411c:	d008      	beq.n	4130 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	881b      	ldrh	r3, [r3, #0]
    4122:	b29b      	uxth	r3, r3
    4124:	f043 0304 	orr.w	r3, r3, #4
    4128:	b29a      	uxth	r2, r3
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	801a      	strh	r2, [r3, #0]
    412e:	e007      	b.n	4140 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	881b      	ldrh	r3, [r3, #0]
    4134:	b29b      	uxth	r3, r3
    4136:	f023 0304 	bic.w	r3, r3, #4
    413a:	b29a      	uxth	r2, r3
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	801a      	strh	r2, [r3, #0]
  }
}
    4140:	370c      	adds	r7, #12
    4142:	46bd      	mov	sp, r7
    4144:	f85d 7b04 	ldr.w	r7, [sp], #4
    4148:	4770      	bx	lr
    414a:	bf00      	nop

0000414c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    414c:	b480      	push	{r7}
    414e:	b083      	sub	sp, #12
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
    4154:	460b      	mov	r3, r1
    4156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4158:	78fb      	ldrb	r3, [r7, #3]
    415a:	2b00      	cmp	r3, #0
    415c:	d008      	beq.n	4170 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	889b      	ldrh	r3, [r3, #4]
    4162:	b29b      	uxth	r3, r3
    4164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4168:	b29a      	uxth	r2, r3
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	809a      	strh	r2, [r3, #4]
    416e:	e007      	b.n	4180 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	889b      	ldrh	r3, [r3, #4]
    4174:	b29b      	uxth	r3, r3
    4176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    417a:	b29a      	uxth	r2, r3
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	809a      	strh	r2, [r3, #4]
  }
}
    4180:	370c      	adds	r7, #12
    4182:	46bd      	mov	sp, r7
    4184:	f85d 7b04 	ldr.w	r7, [sp], #4
    4188:	4770      	bx	lr
    418a:	bf00      	nop

0000418c <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    418c:	b480      	push	{r7}
    418e:	b083      	sub	sp, #12
    4190:	af00      	add	r7, sp, #0
    4192:	6078      	str	r0, [r7, #4]
    4194:	460b      	mov	r3, r1
    4196:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	881b      	ldrh	r3, [r3, #0]
    419c:	b29b      	uxth	r3, r3
    419e:	f023 0308 	bic.w	r3, r3, #8
    41a2:	b29a      	uxth	r2, r3
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	881b      	ldrh	r3, [r3, #0]
    41ac:	b29a      	uxth	r2, r3
    41ae:	887b      	ldrh	r3, [r7, #2]
    41b0:	4313      	orrs	r3, r2
    41b2:	b29a      	uxth	r2, r3
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	801a      	strh	r2, [r3, #0]
}
    41b8:	370c      	adds	r7, #12
    41ba:	46bd      	mov	sp, r7
    41bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop

000041c4 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    41c4:	b480      	push	{r7}
    41c6:	b083      	sub	sp, #12
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	460b      	mov	r3, r1
    41ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	889b      	ldrh	r3, [r3, #4]
    41d4:	b29b      	uxth	r3, r3
    41d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    41da:	b29a      	uxth	r2, r3
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	889b      	ldrh	r3, [r3, #4]
    41e4:	b29a      	uxth	r2, r3
    41e6:	887b      	ldrh	r3, [r7, #2]
    41e8:	4313      	orrs	r3, r2
    41ea:	b29a      	uxth	r2, r3
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	809a      	strh	r2, [r3, #4]
}
    41f0:	370c      	adds	r7, #12
    41f2:	46bd      	mov	sp, r7
    41f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    41f8:	4770      	bx	lr
    41fa:	bf00      	nop

000041fc <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    41fc:	b480      	push	{r7}
    41fe:	b083      	sub	sp, #12
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
    4204:	460b      	mov	r3, r1
    4206:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	891b      	ldrh	r3, [r3, #8]
    420c:	b29b      	uxth	r3, r3
    420e:	f023 0307 	bic.w	r3, r3, #7
    4212:	b29a      	uxth	r2, r3
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	891b      	ldrh	r3, [r3, #8]
    421c:	b29a      	uxth	r2, r3
    421e:	887b      	ldrh	r3, [r7, #2]
    4220:	4313      	orrs	r3, r2
    4222:	b29a      	uxth	r2, r3
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	811a      	strh	r2, [r3, #8]
}
    4228:	370c      	adds	r7, #12
    422a:	46bd      	mov	sp, r7
    422c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4230:	4770      	bx	lr
    4232:	bf00      	nop

00004234 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    4234:	b480      	push	{r7}
    4236:	b083      	sub	sp, #12
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
    423c:	460b      	mov	r3, r1
    423e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	891b      	ldrh	r3, [r3, #8]
    4244:	b29b      	uxth	r3, r3
    4246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    424a:	b29a      	uxth	r2, r3
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	891b      	ldrh	r3, [r3, #8]
    4254:	b29a      	uxth	r2, r3
    4256:	887b      	ldrh	r3, [r7, #2]
    4258:	4313      	orrs	r3, r2
    425a:	b29a      	uxth	r2, r3
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	811a      	strh	r2, [r3, #8]
}
    4260:	370c      	adds	r7, #12
    4262:	46bd      	mov	sp, r7
    4264:	f85d 7b04 	ldr.w	r7, [sp], #4
    4268:	4770      	bx	lr
    426a:	bf00      	nop

0000426c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    426c:	b480      	push	{r7}
    426e:	b083      	sub	sp, #12
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
    4274:	460b      	mov	r3, r1
    4276:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	887a      	ldrh	r2, [r7, #2]
    427c:	849a      	strh	r2, [r3, #36]	; 0x24
}
    427e:	370c      	adds	r7, #12
    4280:	46bd      	mov	sp, r7
    4282:	f85d 7b04 	ldr.w	r7, [sp], #4
    4286:	4770      	bx	lr

00004288 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    4288:	b480      	push	{r7}
    428a:	b083      	sub	sp, #12
    428c:	af00      	add	r7, sp, #0
    428e:	6078      	str	r0, [r7, #4]
    4290:	460b      	mov	r3, r1
    4292:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	887a      	ldrh	r2, [r7, #2]
    4298:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    429a:	370c      	adds	r7, #12
    429c:	46bd      	mov	sp, r7
    429e:	f85d 7b04 	ldr.w	r7, [sp], #4
    42a2:	4770      	bx	lr

000042a4 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    42a4:	b480      	push	{r7}
    42a6:	b083      	sub	sp, #12
    42a8:	af00      	add	r7, sp, #0
    42aa:	6078      	str	r0, [r7, #4]
    42ac:	460b      	mov	r3, r1
    42ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	887a      	ldrh	r2, [r7, #2]
    42b4:	869a      	strh	r2, [r3, #52]	; 0x34
}
    42b6:	370c      	adds	r7, #12
    42b8:	46bd      	mov	sp, r7
    42ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    42be:	4770      	bx	lr

000042c0 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    42c0:	b480      	push	{r7}
    42c2:	b083      	sub	sp, #12
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	460b      	mov	r3, r1
    42ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	887a      	ldrh	r2, [r7, #2]
    42d0:	871a      	strh	r2, [r3, #56]	; 0x38
}
    42d2:	370c      	adds	r7, #12
    42d4:	46bd      	mov	sp, r7
    42d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42da:	4770      	bx	lr

000042dc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    42dc:	b480      	push	{r7}
    42de:	b083      	sub	sp, #12
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
    42e4:	460b      	mov	r3, r1
    42e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	887a      	ldrh	r2, [r7, #2]
    42ec:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    42ee:	370c      	adds	r7, #12
    42f0:	46bd      	mov	sp, r7
    42f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f6:	4770      	bx	lr

000042f8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    42f8:	b480      	push	{r7}
    42fa:	b083      	sub	sp, #12
    42fc:	af00      	add	r7, sp, #0
    42fe:	6078      	str	r0, [r7, #4]
    4300:	460b      	mov	r3, r1
    4302:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	887a      	ldrh	r2, [r7, #2]
    4308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    430c:	370c      	adds	r7, #12
    430e:	46bd      	mov	sp, r7
    4310:	f85d 7b04 	ldr.w	r7, [sp], #4
    4314:	4770      	bx	lr
    4316:	bf00      	nop

00004318 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4318:	b480      	push	{r7}
    431a:	b083      	sub	sp, #12
    431c:	af00      	add	r7, sp, #0
    431e:	6078      	str	r0, [r7, #4]
    4320:	460b      	mov	r3, r1
    4322:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	8b1b      	ldrh	r3, [r3, #24]
    4328:	b29b      	uxth	r3, r3
    432a:	f023 030c 	bic.w	r3, r3, #12
    432e:	b29a      	uxth	r2, r3
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	8b1b      	ldrh	r3, [r3, #24]
    4338:	b29a      	uxth	r2, r3
    433a:	887b      	ldrh	r3, [r7, #2]
    433c:	4313      	orrs	r3, r2
    433e:	b29a      	uxth	r2, r3
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	831a      	strh	r2, [r3, #24]
}
    4344:	370c      	adds	r7, #12
    4346:	46bd      	mov	sp, r7
    4348:	f85d 7b04 	ldr.w	r7, [sp], #4
    434c:	4770      	bx	lr
    434e:	bf00      	nop

00004350 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4350:	b480      	push	{r7}
    4352:	b083      	sub	sp, #12
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	460b      	mov	r3, r1
    435a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	8b1b      	ldrh	r3, [r3, #24]
    4360:	b29b      	uxth	r3, r3
    4362:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4366:	b29a      	uxth	r2, r3
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	8b1b      	ldrh	r3, [r3, #24]
    4370:	b29a      	uxth	r2, r3
    4372:	887b      	ldrh	r3, [r7, #2]
    4374:	021b      	lsls	r3, r3, #8
    4376:	b29b      	uxth	r3, r3
    4378:	4313      	orrs	r3, r2
    437a:	b29a      	uxth	r2, r3
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	831a      	strh	r2, [r3, #24]
}
    4380:	370c      	adds	r7, #12
    4382:	46bd      	mov	sp, r7
    4384:	f85d 7b04 	ldr.w	r7, [sp], #4
    4388:	4770      	bx	lr
    438a:	bf00      	nop

0000438c <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    438c:	b480      	push	{r7}
    438e:	b083      	sub	sp, #12
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
    4394:	460b      	mov	r3, r1
    4396:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	8b9b      	ldrh	r3, [r3, #28]
    439c:	b29b      	uxth	r3, r3
    439e:	f023 030c 	bic.w	r3, r3, #12
    43a2:	b29a      	uxth	r2, r3
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	8b9b      	ldrh	r3, [r3, #28]
    43ac:	b29a      	uxth	r2, r3
    43ae:	887b      	ldrh	r3, [r7, #2]
    43b0:	4313      	orrs	r3, r2
    43b2:	b29a      	uxth	r2, r3
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	839a      	strh	r2, [r3, #28]
}
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop

000043c4 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    43c4:	b480      	push	{r7}
    43c6:	b083      	sub	sp, #12
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    43cc:	460b      	mov	r3, r1
    43ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	8b9b      	ldrh	r3, [r3, #28]
    43d4:	b29b      	uxth	r3, r3
    43d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    43da:	b29a      	uxth	r2, r3
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	8b9b      	ldrh	r3, [r3, #28]
    43e4:	b29a      	uxth	r2, r3
    43e6:	887b      	ldrh	r3, [r7, #2]
    43e8:	021b      	lsls	r3, r3, #8
    43ea:	b29b      	uxth	r3, r3
    43ec:	4313      	orrs	r3, r2
    43ee:	b29a      	uxth	r2, r3
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	839a      	strh	r2, [r3, #28]
}
    43f4:	370c      	adds	r7, #12
    43f6:	46bd      	mov	sp, r7
    43f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43fc:	4770      	bx	lr
    43fe:	bf00      	nop

00004400 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    4400:	b480      	push	{r7}
    4402:	b083      	sub	sp, #12
    4404:	af00      	add	r7, sp, #0
    4406:	6078      	str	r0, [r7, #4]
    4408:	460b      	mov	r3, r1
    440a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	881b      	ldrh	r3, [r3, #0]
    4410:	b29b      	uxth	r3, r3
    4412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4416:	b29a      	uxth	r2, r3
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	881b      	ldrh	r3, [r3, #0]
    4420:	b29a      	uxth	r2, r3
    4422:	887b      	ldrh	r3, [r7, #2]
    4424:	4313      	orrs	r3, r2
    4426:	b29a      	uxth	r2, r3
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	801a      	strh	r2, [r3, #0]
}
    442c:	370c      	adds	r7, #12
    442e:	46bd      	mov	sp, r7
    4430:	f85d 7b04 	ldr.w	r7, [sp], #4
    4434:	4770      	bx	lr
    4436:	bf00      	nop

00004438 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4438:	b480      	push	{r7}
    443a:	b083      	sub	sp, #12
    443c:	af00      	add	r7, sp, #0
    443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4444:	b29b      	uxth	r3, r3
}
    4446:	4618      	mov	r0, r3
    4448:	370c      	adds	r7, #12
    444a:	46bd      	mov	sp, r7
    444c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4450:	4770      	bx	lr
    4452:	bf00      	nop

00004454 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    4454:	b480      	push	{r7}
    4456:	b083      	sub	sp, #12
    4458:	af00      	add	r7, sp, #0
    445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    445c:	687b      	ldr	r3, [r7, #4]
    445e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4460:	b29b      	uxth	r3, r3
}
    4462:	4618      	mov	r0, r3
    4464:	370c      	adds	r7, #12
    4466:	46bd      	mov	sp, r7
    4468:	f85d 7b04 	ldr.w	r7, [sp], #4
    446c:	4770      	bx	lr
    446e:	bf00      	nop

00004470 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4470:	b480      	push	{r7}
    4472:	b083      	sub	sp, #12
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    447c:	b29b      	uxth	r3, r3
}
    447e:	4618      	mov	r0, r3
    4480:	370c      	adds	r7, #12
    4482:	46bd      	mov	sp, r7
    4484:	f85d 7b04 	ldr.w	r7, [sp], #4
    4488:	4770      	bx	lr
    448a:	bf00      	nop

0000448c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    448c:	b480      	push	{r7}
    448e:	b083      	sub	sp, #12
    4490:	af00      	add	r7, sp, #0
    4492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    449a:	b29b      	uxth	r3, r3
}
    449c:	4618      	mov	r0, r3
    449e:	370c      	adds	r7, #12
    44a0:	46bd      	mov	sp, r7
    44a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a6:	4770      	bx	lr

000044a8 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    44a8:	b480      	push	{r7}
    44aa:	b083      	sub	sp, #12
    44ac:	af00      	add	r7, sp, #0
    44ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    44b4:	b29b      	uxth	r3, r3
}
    44b6:	4618      	mov	r0, r3
    44b8:	370c      	adds	r7, #12
    44ba:	46bd      	mov	sp, r7
    44bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c0:	4770      	bx	lr
    44c2:	bf00      	nop

000044c4 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    44c4:	b480      	push	{r7}
    44c6:	b083      	sub	sp, #12
    44c8:	af00      	add	r7, sp, #0
    44ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    44d0:	b29b      	uxth	r3, r3
}
    44d2:	4618      	mov	r0, r3
    44d4:	370c      	adds	r7, #12
    44d6:	46bd      	mov	sp, r7
    44d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44dc:	4770      	bx	lr
    44de:	bf00      	nop

000044e0 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    44e0:	b480      	push	{r7}
    44e2:	b085      	sub	sp, #20
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
    44e8:	460b      	mov	r3, r1
    44ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    44ec:	2300      	movs	r3, #0
    44ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	8a1b      	ldrh	r3, [r3, #16]
    44f4:	b29a      	uxth	r2, r3
    44f6:	887b      	ldrh	r3, [r7, #2]
    44f8:	4013      	ands	r3, r2
    44fa:	b29b      	uxth	r3, r3
    44fc:	2b00      	cmp	r3, #0
    44fe:	d002      	beq.n	4506 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    4500:	2301      	movs	r3, #1
    4502:	73fb      	strb	r3, [r7, #15]
    4504:	e001      	b.n	450a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    4506:	2300      	movs	r3, #0
    4508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    450a:	7bfb      	ldrb	r3, [r7, #15]
}
    450c:	4618      	mov	r0, r3
    450e:	3714      	adds	r7, #20
    4510:	46bd      	mov	sp, r7
    4512:	f85d 7b04 	ldr.w	r7, [sp], #4
    4516:	4770      	bx	lr

00004518 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    4518:	b480      	push	{r7}
    451a:	b083      	sub	sp, #12
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
    4520:	460b      	mov	r3, r1
    4522:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4524:	887b      	ldrh	r3, [r7, #2]
    4526:	43db      	mvns	r3, r3
    4528:	b29a      	uxth	r2, r3
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	821a      	strh	r2, [r3, #16]
}
    452e:	370c      	adds	r7, #12
    4530:	46bd      	mov	sp, r7
    4532:	f85d 7b04 	ldr.w	r7, [sp], #4
    4536:	4770      	bx	lr

00004538 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4538:	b480      	push	{r7}
    453a:	b085      	sub	sp, #20
    453c:	af00      	add	r7, sp, #0
    453e:	6078      	str	r0, [r7, #4]
    4540:	460b      	mov	r3, r1
    4542:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4544:	2300      	movs	r3, #0
    4546:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    4548:	2300      	movs	r3, #0
    454a:	81bb      	strh	r3, [r7, #12]
    454c:	2300      	movs	r3, #0
    454e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	8a1b      	ldrh	r3, [r3, #16]
    4554:	b29a      	uxth	r2, r3
    4556:	887b      	ldrh	r3, [r7, #2]
    4558:	4013      	ands	r3, r2
    455a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	899b      	ldrh	r3, [r3, #12]
    4560:	b29a      	uxth	r2, r3
    4562:	887b      	ldrh	r3, [r7, #2]
    4564:	4013      	ands	r3, r2
    4566:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4568:	89bb      	ldrh	r3, [r7, #12]
    456a:	2b00      	cmp	r3, #0
    456c:	d005      	beq.n	457a <TIM_GetITStatus+0x42>
    456e:	897b      	ldrh	r3, [r7, #10]
    4570:	2b00      	cmp	r3, #0
    4572:	d002      	beq.n	457a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
    4574:	2301      	movs	r3, #1
    4576:	73fb      	strb	r3, [r7, #15]
    4578:	e001      	b.n	457e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    457a:	2300      	movs	r3, #0
    457c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    457e:	7bfb      	ldrb	r3, [r7, #15]
}
    4580:	4618      	mov	r0, r3
    4582:	3714      	adds	r7, #20
    4584:	46bd      	mov	sp, r7
    4586:	f85d 7b04 	ldr.w	r7, [sp], #4
    458a:	4770      	bx	lr

0000458c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    458c:	b480      	push	{r7}
    458e:	b083      	sub	sp, #12
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	460b      	mov	r3, r1
    4596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    4598:	887b      	ldrh	r3, [r7, #2]
    459a:	43db      	mvns	r3, r3
    459c:	b29a      	uxth	r2, r3
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	821a      	strh	r2, [r3, #16]
}
    45a2:	370c      	adds	r7, #12
    45a4:	46bd      	mov	sp, r7
    45a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45aa:	4770      	bx	lr

000045ac <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    45ac:	b480      	push	{r7}
    45ae:	b087      	sub	sp, #28
    45b0:	af00      	add	r7, sp, #0
    45b2:	60f8      	str	r0, [r7, #12]
    45b4:	8179      	strh	r1, [r7, #10]
    45b6:	813a      	strh	r2, [r7, #8]
    45b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    45ba:	2300      	movs	r3, #0
    45bc:	82bb      	strh	r3, [r7, #20]
    45be:	2300      	movs	r3, #0
    45c0:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	8c1b      	ldrh	r3, [r3, #32]
    45c6:	b29b      	uxth	r3, r3
    45c8:	f023 0301 	bic.w	r3, r3, #1
    45cc:	b29a      	uxth	r2, r3
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	8b1b      	ldrh	r3, [r3, #24]
    45d6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	8c1b      	ldrh	r3, [r3, #32]
    45dc:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    45de:	8abb      	ldrh	r3, [r7, #20]
    45e0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    45e4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    45e6:	88fb      	ldrh	r3, [r7, #6]
    45e8:	011b      	lsls	r3, r3, #4
    45ea:	b29a      	uxth	r2, r3
    45ec:	893b      	ldrh	r3, [r7, #8]
    45ee:	4313      	orrs	r3, r2
    45f0:	b29a      	uxth	r2, r3
    45f2:	8abb      	ldrh	r3, [r7, #20]
    45f4:	4313      	orrs	r3, r2
    45f6:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    45f8:	68fa      	ldr	r2, [r7, #12]
    45fa:	4b1c      	ldr	r3, [pc, #112]	; (466c <TI1_Config+0xc0>)
    45fc:	429a      	cmp	r2, r3
    45fe:	d013      	beq.n	4628 <TI1_Config+0x7c>
    4600:	68fa      	ldr	r2, [r7, #12]
    4602:	4b1b      	ldr	r3, [pc, #108]	; (4670 <TI1_Config+0xc4>)
    4604:	429a      	cmp	r2, r3
    4606:	d00f      	beq.n	4628 <TI1_Config+0x7c>
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    460e:	d00b      	beq.n	4628 <TI1_Config+0x7c>
    4610:	68fa      	ldr	r2, [r7, #12]
    4612:	4b18      	ldr	r3, [pc, #96]	; (4674 <TI1_Config+0xc8>)
    4614:	429a      	cmp	r2, r3
    4616:	d007      	beq.n	4628 <TI1_Config+0x7c>
    4618:	68fa      	ldr	r2, [r7, #12]
    461a:	4b17      	ldr	r3, [pc, #92]	; (4678 <TI1_Config+0xcc>)
    461c:	429a      	cmp	r2, r3
    461e:	d003      	beq.n	4628 <TI1_Config+0x7c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4620:	68fa      	ldr	r2, [r7, #12]
    4622:	4b16      	ldr	r3, [pc, #88]	; (467c <TI1_Config+0xd0>)
    4624:	429a      	cmp	r2, r3
    4626:	d10b      	bne.n	4640 <TI1_Config+0x94>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    4628:	8afb      	ldrh	r3, [r7, #22]
    462a:	f023 0302 	bic.w	r3, r3, #2
    462e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4630:	897a      	ldrh	r2, [r7, #10]
    4632:	8afb      	ldrh	r3, [r7, #22]
    4634:	4313      	orrs	r3, r2
    4636:	b29b      	uxth	r3, r3
    4638:	f043 0301 	orr.w	r3, r3, #1
    463c:	82fb      	strh	r3, [r7, #22]
    463e:	e00a      	b.n	4656 <TI1_Config+0xaa>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    4640:	8afb      	ldrh	r3, [r7, #22]
    4642:	f023 030a 	bic.w	r3, r3, #10
    4646:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4648:	897a      	ldrh	r2, [r7, #10]
    464a:	8afb      	ldrh	r3, [r7, #22]
    464c:	4313      	orrs	r3, r2
    464e:	b29b      	uxth	r3, r3
    4650:	f043 0301 	orr.w	r3, r3, #1
    4654:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	8aba      	ldrh	r2, [r7, #20]
    465a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    465c:	68fb      	ldr	r3, [r7, #12]
    465e:	8afa      	ldrh	r2, [r7, #22]
    4660:	841a      	strh	r2, [r3, #32]
}
    4662:	371c      	adds	r7, #28
    4664:	46bd      	mov	sp, r7
    4666:	f85d 7b04 	ldr.w	r7, [sp], #4
    466a:	4770      	bx	lr
    466c:	40012c00 	.word	0x40012c00
    4670:	40013400 	.word	0x40013400
    4674:	40000400 	.word	0x40000400
    4678:	40000800 	.word	0x40000800
    467c:	40000c00 	.word	0x40000c00

00004680 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4680:	b480      	push	{r7}
    4682:	b087      	sub	sp, #28
    4684:	af00      	add	r7, sp, #0
    4686:	60f8      	str	r0, [r7, #12]
    4688:	8179      	strh	r1, [r7, #10]
    468a:	813a      	strh	r2, [r7, #8]
    468c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    468e:	2300      	movs	r3, #0
    4690:	82bb      	strh	r3, [r7, #20]
    4692:	2300      	movs	r3, #0
    4694:	82fb      	strh	r3, [r7, #22]
    4696:	2300      	movs	r3, #0
    4698:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	8c1b      	ldrh	r3, [r3, #32]
    469e:	b29b      	uxth	r3, r3
    46a0:	f023 0310 	bic.w	r3, r3, #16
    46a4:	b29a      	uxth	r2, r3
    46a6:	68fb      	ldr	r3, [r7, #12]
    46a8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    46aa:	68fb      	ldr	r3, [r7, #12]
    46ac:	8b1b      	ldrh	r3, [r3, #24]
    46ae:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	8c1b      	ldrh	r3, [r3, #32]
    46b4:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    46b6:	897b      	ldrh	r3, [r7, #10]
    46b8:	011b      	lsls	r3, r3, #4
    46ba:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    46bc:	8abb      	ldrh	r3, [r7, #20]
    46be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    46c2:	051b      	lsls	r3, r3, #20
    46c4:	0d1b      	lsrs	r3, r3, #20
    46c6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    46c8:	88fb      	ldrh	r3, [r7, #6]
    46ca:	031b      	lsls	r3, r3, #12
    46cc:	b29a      	uxth	r2, r3
    46ce:	8abb      	ldrh	r3, [r7, #20]
    46d0:	4313      	orrs	r3, r2
    46d2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    46d4:	893b      	ldrh	r3, [r7, #8]
    46d6:	021b      	lsls	r3, r3, #8
    46d8:	b29a      	uxth	r2, r3
    46da:	8abb      	ldrh	r3, [r7, #20]
    46dc:	4313      	orrs	r3, r2
    46de:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    46e0:	68fa      	ldr	r2, [r7, #12]
    46e2:	4b1c      	ldr	r3, [pc, #112]	; (4754 <TI2_Config+0xd4>)
    46e4:	429a      	cmp	r2, r3
    46e6:	d013      	beq.n	4710 <TI2_Config+0x90>
    46e8:	68fa      	ldr	r2, [r7, #12]
    46ea:	4b1b      	ldr	r3, [pc, #108]	; (4758 <TI2_Config+0xd8>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d00f      	beq.n	4710 <TI2_Config+0x90>
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    46f6:	d00b      	beq.n	4710 <TI2_Config+0x90>
    46f8:	68fa      	ldr	r2, [r7, #12]
    46fa:	4b18      	ldr	r3, [pc, #96]	; (475c <TI2_Config+0xdc>)
    46fc:	429a      	cmp	r2, r3
    46fe:	d007      	beq.n	4710 <TI2_Config+0x90>
    4700:	68fa      	ldr	r2, [r7, #12]
    4702:	4b17      	ldr	r3, [pc, #92]	; (4760 <TI2_Config+0xe0>)
    4704:	429a      	cmp	r2, r3
    4706:	d003      	beq.n	4710 <TI2_Config+0x90>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4708:	68fa      	ldr	r2, [r7, #12]
    470a:	4b16      	ldr	r3, [pc, #88]	; (4764 <TI2_Config+0xe4>)
    470c:	429a      	cmp	r2, r3
    470e:	d10b      	bne.n	4728 <TI2_Config+0xa8>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    4710:	8afb      	ldrh	r3, [r7, #22]
    4712:	f023 0320 	bic.w	r3, r3, #32
    4716:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    4718:	8a7a      	ldrh	r2, [r7, #18]
    471a:	8afb      	ldrh	r3, [r7, #22]
    471c:	4313      	orrs	r3, r2
    471e:	b29b      	uxth	r3, r3
    4720:	f043 0310 	orr.w	r3, r3, #16
    4724:	82fb      	strh	r3, [r7, #22]
    4726:	e00a      	b.n	473e <TI2_Config+0xbe>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    4728:	8afb      	ldrh	r3, [r7, #22]
    472a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    472e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    4730:	897a      	ldrh	r2, [r7, #10]
    4732:	8afb      	ldrh	r3, [r7, #22]
    4734:	4313      	orrs	r3, r2
    4736:	b29b      	uxth	r3, r3
    4738:	f043 0310 	orr.w	r3, r3, #16
    473c:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	8aba      	ldrh	r2, [r7, #20]
    4742:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    4744:	68fb      	ldr	r3, [r7, #12]
    4746:	8afa      	ldrh	r2, [r7, #22]
    4748:	841a      	strh	r2, [r3, #32]
}
    474a:	371c      	adds	r7, #28
    474c:	46bd      	mov	sp, r7
    474e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4752:	4770      	bx	lr
    4754:	40012c00 	.word	0x40012c00
    4758:	40013400 	.word	0x40013400
    475c:	40000400 	.word	0x40000400
    4760:	40000800 	.word	0x40000800
    4764:	40000c00 	.word	0x40000c00

00004768 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4768:	b480      	push	{r7}
    476a:	b087      	sub	sp, #28
    476c:	af00      	add	r7, sp, #0
    476e:	60f8      	str	r0, [r7, #12]
    4770:	8179      	strh	r1, [r7, #10]
    4772:	813a      	strh	r2, [r7, #8]
    4774:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    4776:	2300      	movs	r3, #0
    4778:	82bb      	strh	r3, [r7, #20]
    477a:	2300      	movs	r3, #0
    477c:	82fb      	strh	r3, [r7, #22]
    477e:	2300      	movs	r3, #0
    4780:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	8c1b      	ldrh	r3, [r3, #32]
    4786:	b29b      	uxth	r3, r3
    4788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    478c:	b29a      	uxth	r2, r3
    478e:	68fb      	ldr	r3, [r7, #12]
    4790:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    4792:	68fb      	ldr	r3, [r7, #12]
    4794:	8b9b      	ldrh	r3, [r3, #28]
    4796:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	8c1b      	ldrh	r3, [r3, #32]
    479c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    479e:	897b      	ldrh	r3, [r7, #10]
    47a0:	021b      	lsls	r3, r3, #8
    47a2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    47a4:	8abb      	ldrh	r3, [r7, #20]
    47a6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    47aa:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    47ac:	88fb      	ldrh	r3, [r7, #6]
    47ae:	011b      	lsls	r3, r3, #4
    47b0:	b29a      	uxth	r2, r3
    47b2:	893b      	ldrh	r3, [r7, #8]
    47b4:	4313      	orrs	r3, r2
    47b6:	b29a      	uxth	r2, r3
    47b8:	8abb      	ldrh	r3, [r7, #20]
    47ba:	4313      	orrs	r3, r2
    47bc:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    47be:	68fa      	ldr	r2, [r7, #12]
    47c0:	4b1c      	ldr	r3, [pc, #112]	; (4834 <TI3_Config+0xcc>)
    47c2:	429a      	cmp	r2, r3
    47c4:	d013      	beq.n	47ee <TI3_Config+0x86>
    47c6:	68fa      	ldr	r2, [r7, #12]
    47c8:	4b1b      	ldr	r3, [pc, #108]	; (4838 <TI3_Config+0xd0>)
    47ca:	429a      	cmp	r2, r3
    47cc:	d00f      	beq.n	47ee <TI3_Config+0x86>
    47ce:	68fb      	ldr	r3, [r7, #12]
    47d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    47d4:	d00b      	beq.n	47ee <TI3_Config+0x86>
    47d6:	68fa      	ldr	r2, [r7, #12]
    47d8:	4b18      	ldr	r3, [pc, #96]	; (483c <TI3_Config+0xd4>)
    47da:	429a      	cmp	r2, r3
    47dc:	d007      	beq.n	47ee <TI3_Config+0x86>
    47de:	68fa      	ldr	r2, [r7, #12]
    47e0:	4b17      	ldr	r3, [pc, #92]	; (4840 <TI3_Config+0xd8>)
    47e2:	429a      	cmp	r2, r3
    47e4:	d003      	beq.n	47ee <TI3_Config+0x86>
     (TIMx == TIM4) ||(TIMx == TIM5))
    47e6:	68fa      	ldr	r2, [r7, #12]
    47e8:	4b16      	ldr	r3, [pc, #88]	; (4844 <TI3_Config+0xdc>)
    47ea:	429a      	cmp	r2, r3
    47ec:	d10b      	bne.n	4806 <TI3_Config+0x9e>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    47ee:	8afb      	ldrh	r3, [r7, #22]
    47f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    47f4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    47f6:	8a7a      	ldrh	r2, [r7, #18]
    47f8:	8afb      	ldrh	r3, [r7, #22]
    47fa:	4313      	orrs	r3, r2
    47fc:	b29b      	uxth	r3, r3
    47fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4802:	82fb      	strh	r3, [r7, #22]
    4804:	e00a      	b.n	481c <TI3_Config+0xb4>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    4806:	8afb      	ldrh	r3, [r7, #22]
    4808:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    480c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    480e:	897a      	ldrh	r2, [r7, #10]
    4810:	8afb      	ldrh	r3, [r7, #22]
    4812:	4313      	orrs	r3, r2
    4814:	b29b      	uxth	r3, r3
    4816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    481a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	8aba      	ldrh	r2, [r7, #20]
    4820:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	8afa      	ldrh	r2, [r7, #22]
    4826:	841a      	strh	r2, [r3, #32]
}
    4828:	371c      	adds	r7, #28
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	40012c00 	.word	0x40012c00
    4838:	40013400 	.word	0x40013400
    483c:	40000400 	.word	0x40000400
    4840:	40000800 	.word	0x40000800
    4844:	40000c00 	.word	0x40000c00

00004848 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4848:	b480      	push	{r7}
    484a:	b087      	sub	sp, #28
    484c:	af00      	add	r7, sp, #0
    484e:	60f8      	str	r0, [r7, #12]
    4850:	8179      	strh	r1, [r7, #10]
    4852:	813a      	strh	r2, [r7, #8]
    4854:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    4856:	2300      	movs	r3, #0
    4858:	82bb      	strh	r3, [r7, #20]
    485a:	2300      	movs	r3, #0
    485c:	82fb      	strh	r3, [r7, #22]
    485e:	2300      	movs	r3, #0
    4860:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    4862:	68fb      	ldr	r3, [r7, #12]
    4864:	8c1b      	ldrh	r3, [r3, #32]
    4866:	b29b      	uxth	r3, r3
    4868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    486c:	b29a      	uxth	r2, r3
    486e:	68fb      	ldr	r3, [r7, #12]
    4870:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	8b9b      	ldrh	r3, [r3, #28]
    4876:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4878:	68fb      	ldr	r3, [r7, #12]
    487a:	8c1b      	ldrh	r3, [r3, #32]
    487c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    487e:	897b      	ldrh	r3, [r7, #10]
    4880:	031b      	lsls	r3, r3, #12
    4882:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    4884:	8abb      	ldrh	r3, [r7, #20]
    4886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    488a:	051b      	lsls	r3, r3, #20
    488c:	0d1b      	lsrs	r3, r3, #20
    488e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4890:	893b      	ldrh	r3, [r7, #8]
    4892:	021b      	lsls	r3, r3, #8
    4894:	b29a      	uxth	r2, r3
    4896:	8abb      	ldrh	r3, [r7, #20]
    4898:	4313      	orrs	r3, r2
    489a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    489c:	88fb      	ldrh	r3, [r7, #6]
    489e:	031b      	lsls	r3, r3, #12
    48a0:	b29a      	uxth	r2, r3
    48a2:	8abb      	ldrh	r3, [r7, #20]
    48a4:	4313      	orrs	r3, r2
    48a6:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    48a8:	68fa      	ldr	r2, [r7, #12]
    48aa:	4b1d      	ldr	r3, [pc, #116]	; (4920 <TI4_Config+0xd8>)
    48ac:	429a      	cmp	r2, r3
    48ae:	d013      	beq.n	48d8 <TI4_Config+0x90>
    48b0:	68fa      	ldr	r2, [r7, #12]
    48b2:	4b1c      	ldr	r3, [pc, #112]	; (4924 <TI4_Config+0xdc>)
    48b4:	429a      	cmp	r2, r3
    48b6:	d00f      	beq.n	48d8 <TI4_Config+0x90>
    48b8:	68fb      	ldr	r3, [r7, #12]
    48ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    48be:	d00b      	beq.n	48d8 <TI4_Config+0x90>
    48c0:	68fa      	ldr	r2, [r7, #12]
    48c2:	4b19      	ldr	r3, [pc, #100]	; (4928 <TI4_Config+0xe0>)
    48c4:	429a      	cmp	r2, r3
    48c6:	d007      	beq.n	48d8 <TI4_Config+0x90>
    48c8:	68fa      	ldr	r2, [r7, #12]
    48ca:	4b18      	ldr	r3, [pc, #96]	; (492c <TI4_Config+0xe4>)
    48cc:	429a      	cmp	r2, r3
    48ce:	d003      	beq.n	48d8 <TI4_Config+0x90>
     (TIMx == TIM4) ||(TIMx == TIM5))
    48d0:	68fa      	ldr	r2, [r7, #12]
    48d2:	4b17      	ldr	r3, [pc, #92]	; (4930 <TI4_Config+0xe8>)
    48d4:	429a      	cmp	r2, r3
    48d6:	d10b      	bne.n	48f0 <TI4_Config+0xa8>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    48d8:	8afb      	ldrh	r3, [r7, #22]
    48da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    48de:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    48e0:	8a7a      	ldrh	r2, [r7, #18]
    48e2:	8afb      	ldrh	r3, [r7, #22]
    48e4:	4313      	orrs	r3, r2
    48e6:	b29b      	uxth	r3, r3
    48e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    48ec:	82fb      	strh	r3, [r7, #22]
    48ee:	e00c      	b.n	490a <TI4_Config+0xc2>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    48f0:	8afb      	ldrh	r3, [r7, #22]
    48f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    48f6:	045b      	lsls	r3, r3, #17
    48f8:	0c5b      	lsrs	r3, r3, #17
    48fa:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    48fc:	897a      	ldrh	r2, [r7, #10]
    48fe:	8afb      	ldrh	r3, [r7, #22]
    4900:	4313      	orrs	r3, r2
    4902:	b29b      	uxth	r3, r3
    4904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4908:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    490a:	68fb      	ldr	r3, [r7, #12]
    490c:	8aba      	ldrh	r2, [r7, #20]
    490e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	8afa      	ldrh	r2, [r7, #22]
    4914:	841a      	strh	r2, [r3, #32]
}
    4916:	371c      	adds	r7, #28
    4918:	46bd      	mov	sp, r7
    491a:	f85d 7b04 	ldr.w	r7, [sp], #4
    491e:	4770      	bx	lr
    4920:	40012c00 	.word	0x40012c00
    4924:	40013400 	.word	0x40013400
    4928:	40000400 	.word	0x40000400
    492c:	40000800 	.word	0x40000800
    4930:	40000c00 	.word	0x40000c00

00004934 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    4934:	b480      	push	{r7}
    4936:	b083      	sub	sp, #12
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    493c:	4a05      	ldr	r2, [pc, #20]	; (4954 <NVIC_PriorityGroupConfig+0x20>)
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    4944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4948:	60d3      	str	r3, [r2, #12]
}
    494a:	370c      	adds	r7, #12
    494c:	46bd      	mov	sp, r7
    494e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4952:	4770      	bx	lr
    4954:	e000ed00 	.word	0xe000ed00

00004958 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    4958:	b480      	push	{r7}
    495a:	b087      	sub	sp, #28
    495c:	af00      	add	r7, sp, #0
    495e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    4960:	2300      	movs	r3, #0
    4962:	617b      	str	r3, [r7, #20]
    4964:	2300      	movs	r3, #0
    4966:	613b      	str	r3, [r7, #16]
    4968:	230f      	movs	r3, #15
    496a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	78db      	ldrb	r3, [r3, #3]
    4970:	2b00      	cmp	r3, #0
    4972:	d038      	beq.n	49e6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    4974:	4b26      	ldr	r3, [pc, #152]	; (4a10 <NVIC_Init+0xb8>)
    4976:	68db      	ldr	r3, [r3, #12]
    4978:	43db      	mvns	r3, r3
    497a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    497e:	0a1b      	lsrs	r3, r3, #8
    4980:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	f1c3 0304 	rsb	r3, r3, #4
    4988:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    498a:	697b      	ldr	r3, [r7, #20]
    498c:	68fa      	ldr	r2, [r7, #12]
    498e:	fa22 f303 	lsr.w	r3, r2, r3
    4992:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	785b      	ldrb	r3, [r3, #1]
    4998:	461a      	mov	r2, r3
    499a:	693b      	ldr	r3, [r7, #16]
    499c:	fa02 f303 	lsl.w	r3, r2, r3
    49a0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	789b      	ldrb	r3, [r3, #2]
    49a6:	461a      	mov	r2, r3
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	4013      	ands	r3, r2
    49ac:	697a      	ldr	r2, [r7, #20]
    49ae:	4313      	orrs	r3, r2
    49b0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    49b2:	697b      	ldr	r3, [r7, #20]
    49b4:	011b      	lsls	r3, r3, #4
    49b6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    49b8:	4916      	ldr	r1, [pc, #88]	; (4a14 <NVIC_Init+0xbc>)
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	781b      	ldrb	r3, [r3, #0]
    49be:	697a      	ldr	r2, [r7, #20]
    49c0:	b2d2      	uxtb	r2, r2
    49c2:	440b      	add	r3, r1
    49c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    49c8:	4b12      	ldr	r3, [pc, #72]	; (4a14 <NVIC_Init+0xbc>)
    49ca:	687a      	ldr	r2, [r7, #4]
    49cc:	7812      	ldrb	r2, [r2, #0]
    49ce:	0952      	lsrs	r2, r2, #5
    49d0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    49d2:	6879      	ldr	r1, [r7, #4]
    49d4:	7809      	ldrb	r1, [r1, #0]
    49d6:	f001 011f 	and.w	r1, r1, #31
    49da:	2001      	movs	r0, #1
    49dc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    49e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    49e4:	e00e      	b.n	4a04 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    49e6:	4b0b      	ldr	r3, [pc, #44]	; (4a14 <NVIC_Init+0xbc>)
    49e8:	687a      	ldr	r2, [r7, #4]
    49ea:	7812      	ldrb	r2, [r2, #0]
    49ec:	0952      	lsrs	r2, r2, #5
    49ee:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    49f0:	6879      	ldr	r1, [r7, #4]
    49f2:	7809      	ldrb	r1, [r1, #0]
    49f4:	f001 011f 	and.w	r1, r1, #31
    49f8:	2001      	movs	r0, #1
    49fa:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    49fe:	3220      	adds	r2, #32
    4a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    4a04:	371c      	adds	r7, #28
    4a06:	46bd      	mov	sp, r7
    4a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a0c:	4770      	bx	lr
    4a0e:	bf00      	nop
    4a10:	e000ed00 	.word	0xe000ed00
    4a14:	e000e100 	.word	0xe000e100

00004a18 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    4a18:	b480      	push	{r7}
    4a1a:	b083      	sub	sp, #12
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	6078      	str	r0, [r7, #4]
    4a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    4a22:	4a07      	ldr	r2, [pc, #28]	; (4a40 <NVIC_SetVectorTable+0x28>)
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    4a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4a2e:	6879      	ldr	r1, [r7, #4]
    4a30:	430b      	orrs	r3, r1
    4a32:	6093      	str	r3, [r2, #8]
}
    4a34:	370c      	adds	r7, #12
    4a36:	46bd      	mov	sp, r7
    4a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	e000ed00 	.word	0xe000ed00

00004a44 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    4a44:	b480      	push	{r7}
    4a46:	b083      	sub	sp, #12
    4a48:	af00      	add	r7, sp, #0
    4a4a:	4602      	mov	r2, r0
    4a4c:	460b      	mov	r3, r1
    4a4e:	71fa      	strb	r2, [r7, #7]
    4a50:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    4a52:	79bb      	ldrb	r3, [r7, #6]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d006      	beq.n	4a66 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
    4a58:	4b09      	ldr	r3, [pc, #36]	; (4a80 <NVIC_SystemLPConfig+0x3c>)
    4a5a:	4a09      	ldr	r2, [pc, #36]	; (4a80 <NVIC_SystemLPConfig+0x3c>)
    4a5c:	6911      	ldr	r1, [r2, #16]
    4a5e:	79fa      	ldrb	r2, [r7, #7]
    4a60:	430a      	orrs	r2, r1
    4a62:	611a      	str	r2, [r3, #16]
    4a64:	e006      	b.n	4a74 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    4a66:	4b06      	ldr	r3, [pc, #24]	; (4a80 <NVIC_SystemLPConfig+0x3c>)
    4a68:	4a05      	ldr	r2, [pc, #20]	; (4a80 <NVIC_SystemLPConfig+0x3c>)
    4a6a:	6911      	ldr	r1, [r2, #16]
    4a6c:	79fa      	ldrb	r2, [r7, #7]
    4a6e:	43d2      	mvns	r2, r2
    4a70:	400a      	ands	r2, r1
    4a72:	611a      	str	r2, [r3, #16]
  }
}
    4a74:	370c      	adds	r7, #12
    4a76:	46bd      	mov	sp, r7
    4a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a7c:	4770      	bx	lr
    4a7e:	bf00      	nop
    4a80:	e000ed00 	.word	0xe000ed00

00004a84 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    4a84:	b480      	push	{r7}
    4a86:	b083      	sub	sp, #12
    4a88:	af00      	add	r7, sp, #0
    4a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	2b04      	cmp	r3, #4
    4a90:	d106      	bne.n	4aa0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    4a92:	4b09      	ldr	r3, [pc, #36]	; (4ab8 <SysTick_CLKSourceConfig+0x34>)
    4a94:	4a08      	ldr	r2, [pc, #32]	; (4ab8 <SysTick_CLKSourceConfig+0x34>)
    4a96:	6812      	ldr	r2, [r2, #0]
    4a98:	f042 0204 	orr.w	r2, r2, #4
    4a9c:	601a      	str	r2, [r3, #0]
    4a9e:	e005      	b.n	4aac <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    4aa0:	4b05      	ldr	r3, [pc, #20]	; (4ab8 <SysTick_CLKSourceConfig+0x34>)
    4aa2:	4a05      	ldr	r2, [pc, #20]	; (4ab8 <SysTick_CLKSourceConfig+0x34>)
    4aa4:	6812      	ldr	r2, [r2, #0]
    4aa6:	f022 0204 	bic.w	r2, r2, #4
    4aaa:	601a      	str	r2, [r3, #0]
  }
}
    4aac:	370c      	adds	r7, #12
    4aae:	46bd      	mov	sp, r7
    4ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop
    4ab8:	e000e010 	.word	0xe000e010

00004abc <main>:


int main(void)
{
    4abc:	b480      	push	{r7}
    4abe:	af00      	add	r7, sp, #0
    asm(" ldr     r3, =0x12ff5678");
    4ac0:	4b1e      	ldr	r3, [pc, #120]	; (4b3c <main+0x80>)
    asm("ldr     r4, =0xb6231452");
    4ac2:	4c1f      	ldr	r4, [pc, #124]	; (4b40 <main+0x84>)
    asm("ldr     r5, =0x35678234");
    4ac4:	4d1f      	ldr	r5, [pc, #124]	; (4b44 <main+0x88>)
    asm("ldr     r6, =0x00000034");
    4ac6:	4e20      	ldr	r6, [pc, #128]	; (4b48 <main+0x8c>)
   asm("ldr     r7, =0x7fffffff");
    4ac8:	4f20      	ldr	r7, [pc, #128]	; (4b4c <main+0x90>)
    asm("ldr     r8, =0x80008000");
    4aca:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4b50 <main+0x94>
// asm("sasx r6,r7,r8")     ; 
// asm("qasx r6,r7,r8")     ; 
// asm("shasx r6,r7,r8")     ; 


asm("ssax r6,r3,r4")     ; 
    4ace:	fae3 f604 	ssax	r6, r3, r4
asm("qsax r6,r3,r4")     ; 
    4ad2:	fae3 f614 	qsax	r6, r3, r4
asm("shsax r6,r3,r4")     ; 
    4ad6:	fae3 f624 	shsax	r6, r3, r4
asm("ssax r6,r7,r8")     ; 
    4ada:	fae7 f608 	ssax	r6, r7, r8
asm("qsax r6,r7,r8")     ; 
    4ade:	fae7 f618 	qsax	r6, r7, r8
asm("shsax r6,r7,r8")     ; 
    4ae2:	fae7 f628 	shsax	r6, r7, r8

asm("ssub16 r6,r3,r4")     ; 
    4ae6:	fad3 f604 	ssub16	r6, r3, r4
asm("qsub16 r6,r3,r4")     ; 
    4aea:	fad3 f614 	qsub16	r6, r3, r4
asm("shsub16 r6,r3,r4")     ; 
    4aee:	fad3 f624 	shsub16	r6, r3, r4
asm("ssub16 r6,r7,r8")     ; 
    4af2:	fad7 f608 	ssub16	r6, r7, r8
asm("qsub16 r6,r7,r8")     ; 
    4af6:	fad7 f618 	qsub16	r6, r7, r8
asm("shsub16 r6,r7,r8")     ; 
    4afa:	fad7 f628 	shsub16	r6, r7, r8

asm("sadd8 r6,r3,r4")     ; 
    4afe:	fa83 f604 	sadd8	r6, r3, r4
asm("qadd8 r6,r3,r4")     ; 
    4b02:	fa83 f614 	qadd8	r6, r3, r4
asm("shadd8 r6,r3,r4")     ; 
    4b06:	fa83 f624 	shadd8	r6, r3, r4
asm("sadd8 r6,r7,r8")     ; 
    4b0a:	fa87 f608 	sadd8	r6, r7, r8
asm("qadd8 r6,r7,r8")     ; 
    4b0e:	fa87 f618 	qadd8	r6, r7, r8
asm("shadd8 r6,r7,r8")     ; 
    4b12:	fa87 f628 	shadd8	r6, r7, r8

asm("ssub8 r6,r3,r4")     ; 
    4b16:	fac3 f604 	ssub8	r6, r3, r4
asm("qsub8 r6,r3,r4")     ; 
    4b1a:	fac3 f614 	qsub8	r6, r3, r4
asm("shsub8 r6,r3,r4")     ; 
    4b1e:	fac3 f624 	shsub8	r6, r3, r4
asm("ssub8 r6,r7,r8")     ; 
    4b22:	fac7 f608 	ssub8	r6, r7, r8
asm("qsub8 r6,r7,r8")     ; 
    4b26:	fac7 f618 	qsub8	r6, r7, r8
asm("shsub8 r6,r7,r8")     ; 
    4b2a:	fac7 f628 	shsub8	r6, r7, r8
    asm("wfi");
    4b2e:	bf30      	wfi
 //   asm("smlawb r6,r3,r4,r5 ")     ;
 //  asm(" smlawt r6,r3,r4,r5 ")    ;
  //  asm(" smulwt r0, r1, r2") ;
}
    4b30:	4618      	mov	r0, r3
    4b32:	46bd      	mov	sp, r7
    4b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b38:	4770      	bx	lr
    4b3a:	0000      	movs	r0, r0
    4b3c:	12ff5678 	.word	0x12ff5678
    4b40:	b6231452 	.word	0xb6231452
    4b44:	35678234 	.word	0x35678234
    4b48:	00000034 	.word	0x00000034
    4b4c:	7fffffff 	.word	0x7fffffff
    4b50:	80008000 	.word	0x80008000

00004b54 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    4b54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    4b56:	e003      	b.n	4b60 <LoopCopyDataInit>

00004b58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    4b58:	4b0a      	ldr	r3, [pc, #40]	; (4b84 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    4b5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    4b5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    4b5e:	3104      	adds	r1, #4

00004b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    4b60:	4809      	ldr	r0, [pc, #36]	; (4b88 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    4b62:	4b0a      	ldr	r3, [pc, #40]	; (4b8c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    4b64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    4b66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    4b68:	d3f6      	bcc.n	4b58 <CopyDataInit>
	ldr	r2, =_sbss
    4b6a:	4a09      	ldr	r2, [pc, #36]	; (4b90 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    4b6c:	e002      	b.n	4b74 <LoopFillZerobss>

00004b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    4b6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
    4b70:	f842 3b04 	str.w	r3, [r2], #4

00004b74 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    4b74:	4b07      	ldr	r3, [pc, #28]	; (4b94 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    4b76:	429a      	cmp	r2, r3
	bcc	FillZerobss
    4b78:	d3f9      	bcc.n	4b6e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    4b7a:	f7fb fc07 	bl	38c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    4b7e:	f7ff ff9d 	bl	4abc <main>
	bx	lr    
    4b82:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    4b84:	00004b9a 	.word	0x00004b9a
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    4b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    4b8c:	20000028 	.word	0x20000028
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    4b90:	20000028 	.word	0x20000028
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    4b94:	20000028 	.word	0x20000028

00004b98 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    4b98:	e7fe      	b.n	4b98 <ADC1_2_IRQHandler>
